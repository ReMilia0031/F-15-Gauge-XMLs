<Gauge Name="F-15 ELECTRICAL SYSTEMS" Version="8.50">

<!--
Version 8.50
	[EDT] ELECTRICAL
Version 8.30
	[ADD] JFS SYS
Version 8.20
	[EDT] FAIRING
Version 8.10
	[ADD] FUEL SYSTEM
Version 8.00
	[ADD] AFCS,CAS
Version 7.50
	[***]
Version 7.00
	[ADD] ELECTRICAL SYSTEM
	[DEL] GAUGE BIT
Version 6.85
	[ADD] ELECTRICAL SYSTEM (WIP)
Version 6.80
	[EDT] ECS
	[EDT] NOZZLE POSITION GAUGE
Version 6.5
	[EDT] ARMT
Version 6.0
	[ADD] HUD BRI
Version 5.0
	[ADD] R1*
	[ADD] R2*
	[ADD] TCN*
	[ADD] ILS*
	[ADD] GAUGE NEEDLE CIRCUIT / GAUGE_BIT (MOVED : S_SYS)
	[EDT] BLEED AIR CAUTION
	[EDT] EEC CAUTION
	[EDT] INLET CAUTION
	-->

	<Element Name="SYS INIT">
		<Select>
      		<Value>
				(L:SYS_V_INIT, bool) 0 ==
					if{
						1 (>L:SYS_V_INIT)

						1 (>L:AO_LWING_PYLON, bool)
						1 (>L:AO_CENTR_PYLON, bool)
						1 (>L:AO_RWING_PYLON, bool)
						0 (>L:CAGE SWITCH, enum)
						0 (>L:HUD REJECT MODE, enum)
						0 (>L:ILS SWITCH, enum)

						400 (>L:SETTING LAW, enum)

						2000 (>L:SETTING BNGO, enum)
						1 (>L:CMD_GLOBAL)
						1 (>L:CMD_PROGRAM_CAP)
						1 (>L:ICS_STATUS_DCL)
						0 (>L:ICMS_STATUS_B1)
						5 (>L:ICMS_STATUS_B2)
						5 (>L:ICMS_STATUS_B3)
						1 (>L:ICMS_LIMIT_B3)

						40 (>L:DTM_RANGE)
						1 (>L:MPCD_DTM_DAT)
						1 (>L:MPCD_DTM_SRV)
						1 (>L:MPCD_DTM_TGT)
						1 (>L:MPCD_DTM_SHR)
						1 (>L:MPCD_DTM_PLN)
						6 (>L:KNOB_FS_TEWS_INT)
					}
			</Value>
		</Select>
	</Element>

	<Element Name="POWER">
		<Element Name="FSX POWER">
			<Element Name="MASTER BATTERY">
				<Select>
					<Value>
					(L:EXTARNAL_AC_AVAIL) 1 ==
					(L:ESS_DC_BUS_AVAIL) 1 == or
						if{
							(A:ELECTRICAL MASTER BATTERY, enum) 0 ==
								if{
									(>K:TOGGLE_MASTER_BATTERY)
								}
						}
					(L:EXTARNAL_AC_AVAIL) 0 ==
					(L:ESS_DC_BUS_AVAIL) 0 == and
						if{
							(A:ELECTRICAL MASTER BATTERY, enum) 1 ==
								if{
									(>K:TOGGLE_MASTER_BATTERY)
								}
						}
					</Value>
				</Select>
			</Element>

			<Element Name="AVIONICS MASTER">
				<Select>
					<Value>
					(L:ESS_AC_BUS_AVAIL) 1 ==
						if{
							(A:AVIONICS MASTER SWITCH, bool) 0 ==
								if{
									(>K:TOGGLE_AVIONICS_MASTER)
								}
						}

					(L:ESS_AC_BUS_AVAIL) 0 ==
						if{
							(A:AVIONICS MASTER SWITCH, bool) 1 ==
								if{
									(>K:TOGGLE_AVIONICS_MASTER)
								}
						}
					</Value>
				</Select>
			</Element>

			<Element Name="LEFT GENERATOR">
				<Select>
					<Value>
					(L:LGEN_AVAIL, enum) 1 ==
						if{
							(A:GENERAL ENG MASTER ALTERNATOR:1, enum) 0 ==
								if{
									(>K:TOGGLE_ALTERNATOR1)
								}
						}
						els{
							(A:GENERAL ENG MASTER ALTERNATOR:1, enum) 1 ==
								if{
									(>K:TOGGLE_ALTERNATOR1)
								}
						}
					</Value>
				</Select>
			</Element>
			<Element Name="RIGHT GENERATOR">
				<Select>
					<Value>
					(L:RGEN_AVAIL, enum) 1 ==
						if{
							(A:GENERAL ENG MASTER ALTERNATOR:2, enum) 0 ==
								if{
									(>K:TOGGLE_ALTERNATOR2)
								}
							}
						els{
							(A:GENERAL ENG MASTER ALTERNATOR:2, enum) 1 ==
								if{
									(>K:TOGGLE_ALTERNATOR2)
								}
							}
					</Value>
				</Select>
			</Element>
		</Element>

		<Element Name="INTERNAL POWER">
			<Element Name="LEFT GENERATOR">
				<Select>
					<Value>
					(A:TURB ENG1 N2, Percent) 44 &lt;
						if{
							(A:TURB ENG1 N2, Percent) 115 * 44 / (>L:LGEN_VOLTAGE_AC)
						}
						els{
							115 (>L:LGEN_VOLTAGE_AC)
						}
					</Value>
				</Select>
			</Element>
			<Element Name="RIGHT GENERATOR">
				<Select>
					<Value>
					(A:TURB ENG2 N2, Percent) 44 &lt;
						if{
							(A:TURB ENG2 N2, Percent) 115 * 44 / (>L:RGEN_VOLTAGE_AC)
						}
						els{
							115 (>L:RGEN_VOLTAGE_AC)
						}
					</Value>
				</Select>
			</Element>
			<Element Name="LEFT GENERATOR AVAILABLE">
				<Select>
					<Value>
					(L:LGEN_VOLTAGE_AC) 115 ==
					(L:SW1_FS_ENG_GEN_L, bool) 1 == and
						if{ 1 (>L:LGEN_AVAIL, enum) }
						els{ 0 (>L:LGEN_AVAIL, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="RIGHT GENERATOR AVAILABLE">
				<Select>
					<Value>
					(L:RGEN_VOLTAGE_AC) 115 ==
					(L:SW1_FS_ENG_GEN_R, bool) 1 == and
						if{ 1 (>L:RGEN_AVAIL, enum) }
						els{ 0 (>L:RGEN_AVAIL, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="EMERGENCY GENERATOR">
				<Select>
					<Value>
						(L:LGEN_AVAIL, enum) 0 ==
						(L:RGEN_AVAIL, enum) 0 == and
						(A:SIM ON GROUND, bool) 0 == and
						(L:SW2_FS_ENG_EMER_GEN, enum) 0 &gt; and
							if{
								115 (>L:EMER_GEN_AC_VOLTAGE)
								28 (>L:EMER_GEN_DC_VOLTAGE)
							}

						(L:LGEN_AVAIL, enum) 0 ==
						(L:RGEN_AVAIL, enum) 0 == and
						(A:SIM ON GROUND, bool) 1 == and
						(L:JFS_GEN_AC_AVAIL) 1 == and
						(L:JFS_GEN_DC_AVAIL) 1 == and
						(L:SW2_FS_ENG_EMER_GEN, enum) 2 == and
							if{
								115 (>L:EMER_GEN_AC_VOLTAGE)
								28 (>L:EMER_GEN_DC_VOLTAGE)
							}

						(L:LGEN_AVAIL, enum) 0 ==
						(L:RGEN_AVAIL, enum) 0 == or
						(L:L_BST_PUMP_ON) 0 == or
						(L:R_BST_PUMP_ON) 0 == or
						(A:SIM ON GROUND, bool) 0 == and
						(L:SW2_FS_ENG_EMER_GEN, enum) 0 &gt; and
							if{
								28 (>L:EMER_ESS_DC_VOLTAGE)
							}
							els{
								0 (>L:EMER_ESS_DC_VOLTAGE)
							}

						(L:LGEN_AVAIL, enum) 1 ==
						(L:RGEN_AVAIL, enum) 1 == and
						(L:JFS_GEN_AC_AVAIL) 0 == or
						(L:JFS_GEN_DC_AVAIL) 0 == or
						(L:SW2_FS_ENG_EMER_GEN, enum) 0 == or
							if{
								0 (>L:EMER_GEN_AC_VOLTAGE)
								0 (>L:EMER_GEN_DC_VOLTAGE)
							}
						(L:EMER_GEN_AC_VOLTAGE) (>L:EMER_GEN_AC_BUS_VOLTAGE)
						(L:EMER_GEN_DC_VOLTAGE) (>L:EMER_GEN_DC_BUS_VOLTAGE)
						(L:EMER_ESS_DC_VOLTAGE) (>L:EMER_ESS_DC_BUS_VOLTAGE)
					</Value>
				</Select>
			</Element>

			<Element Name="EMERGENCY GENERATOR AVAILABLE">
				<Select>
					<Value>
						(L:EMER_GEN_AC_VOLTAGE) 115 ==
							if{ 1 (>L:EMER_GEN_AC_AVAIL) }
							els{ 0 (>L:EMER_GEN_AC_AVAIL) }

						(L:EMER_GEN_DC_VOLTAGE) 28 ==
							if{ 1 (>L:EMER_GEN_DC_AVAIL) }
							els{ 0 (>L:EMER_GEN_DC_AVAIL) }

						(L:EMER_ESS_DC_VOLTAGE) 28 ==
							if{ 1 (>L:EMER_ESS_DC_AVAIL) }
							els{ 0 (>L:EMER_ESS_DC_AVAIL) }
					</Value>
				</Select>
			</Element>
			<Element Name="JFS GENERATOR">
				<Select>
					<Value>
						(L:JFS_GENERAT_RPM) 115 * 54000 / (>L:JFS_GEN_AC_VOLTAGE)
						(L:JFS_GENERAT_RPM) 28 * 54000 / (>L:JFS_GEN_DC_VOLTAGE)

						(L:JFS_GEN_AC_VOLTAGE) 115 &gt;
							if{ 115 (>L:JFS_GEN_AC_VOLTAGE) }
						(L:JFS_GEN_DC_VOLTAGE) 28 &gt;
							if{ 28 (>L:JFS_GEN_DC_VOLTAGE) }
					</Value>
				</Select>
			</Element>
			<Element Name="JFS GENERATOR AVAILABLE">
				<Select>
					<Value>
						(L:JFS_GEN_AC_VOLTAGE) 115 &gt;
							if{ 1 (>L:JFS_GEN_AC_AVAIL) }
							els{ 0 (>L:JFS_GEN_AC_AVAIL) }

						(L:EMER_GEN_DC_VOLTAGE) 28 ==
							if{ 1 (>L:JFS_GEN_DC_AVAIL) }
							els{ 0 (>L:JFS_GEN_DC_AVAIL) }
					</Value>
				</Select>
			</Element>

			<Element Name="BUS LINE">
				<Element Name="GENERATOR BUS LINE">
					<Select>
						<Value>
						<!-- LMAIN GEN DISABLED , EMER GEN DISABLED , EXT POWER DISABLED -->
							(L:SW1_FS_ENG_GEN_L, bool) 0 ==
							(L:EMER_GEN_AC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									0 (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}
						<!-- LMAIN GEN DISABLED , EMER GEN DISABLED , EXT POWER ENABLED -->
							(L:SW1_FS_ENG_GEN_L, bool) 0 ==
							(L:EMER_GEN_AC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:EXTARNAL_AC_VOLTS) (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}
						<!-- LMAIN GEN DISABLED , EMER GEN ENABLED , EXT PWR DISABLED -->
							(L:SW1_FS_ENG_GEN_L, bool) 0 ==
							(L:EMER_GEN_AC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									(L:EMER_GEN_AC_BUS_VOLTAGE) (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}
						<!-- LMAIN GEN DISABLED , EMER GEN ENABLED , EXT POWER ENABLED -->
							(L:SW1_FS_ENG_GEN_L, bool) 0 ==
							(L:EMER_GEN_AC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:EMER_GEN_AC_BUS_VOLTAGE) (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}
						<!-- LMAIN GEN ENABLED , EMER GEN DISABLED , EXT PWR DISABLED -->
							(L:SW1_FS_ENG_GEN_L, bool) 1 ==
							(L:EMER_GEN_AC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									(L:LGEN_VOLTAGE_AC) (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}
						<!-- LMAIN GEN ENABLED , EMER GEN DISABLED , EXT PWR ENABLED -->
							(L:SW1_FS_ENG_GEN_L, bool) 1 ==
							(L:EMER_GEN_AC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:LGEN_VOLTAGE_AC) (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}
						<!-- LMAIN GEN ENABLED , EMER GEN ENABLED , EXT PWR DISABLED -->
							(L:SW1_FS_ENG_GEN_L, bool) 1 ==
							(L:EMER_GEN_AC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									(L:LGEN_VOLTAGE_AC) (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}
						<!-- LMAIN GEN ENABLED , EMER GEN ENABLED , EXT PWR ENABLED -->
							(L:SW1_FS_ENG_GEN_L, bool)  1 ==
							(L:EMER_GEN_AC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:LGEN_VOLTAGE_AC) (>L:LEFT_AC_BUS_LINE_VOLTAGE)
								}

								
						<!-- RMAIN GEN -->
							(L:SW1_FS_ENG_GEN_R, bool) 1 ==
								if{
									(L:RGEN_VOLTAGE_AC) (>L:RIGHT_AC_BUS_LINE_VOLTAGE)
								}
								els{
									0 (>L:RIGHT_AC_BUS_LINE_VOLTAGE)
								}

							(L:LGEN_AVAIL, enum) 0 ==							
							(L:RGEN_AVAIL, enum) 1 == and
								if{
									<!-- (L:RIGHT_AC_BUS_LINE_VOLTAGE) (>L:LEFT_AC_BUS_LINE_VOLTAGE) -->
								}

							(L:LGEN_AVAIL, enum) 1 ==							
							(L:RGEN_AVAIL, enum) 0 == and
								if{
									<!-- (L:LEFT_AC_BUS_LINE_VOLTAGE) (>L:RIGHT_AC_BUS_LINE_VOLTAGE) -->
								}
						</Value>
					</Select>
				</Element>
				<Element Name="XFMR RECTIFIER">
					<Select>
						<Value>
							(L:L_XMFR_RECT_PWR) 1 ==
								if{ (L:LEFT_AC_BUS_LINE_VOLTAGE) 28 * 115 / (>L:LEFT_XFMR_VOLTAGE) }
								els{ 0 (>L:LEFT_XFMR_VOLTAGE) }
							
							(L:R_XMFR_RECT_PWR) 1 ==
								if{ (L:RIGHT_AC_BUS_LINE_VOLTAGE) 28 * 115 / (>L:RIGHT_XFMR_VOLTAGE) }
								els{ 0 (>L:RIGHT_XFMR_VOLTAGE) }
							

						<!-- XFMR ENABLED , EMER GEN DISABLED , EXT POWER DISABLED -->
							(L:L_XMFR_RECT_PWR) 1 ==
							(L:EMER_GEN_DC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									(L:LEFT_XFMR_VOLTAGE) (>L:LEFT_XFMR_LINE_VOLTAGE)
								}
						<!-- XFMR ENABLED , EMER GEN ENABLED , EXT POWER ENABLED -->
							(L:L_XMFR_RECT_PWR) 1 ==
							(L:EMER_GEN_DC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:LEFT_XFMR_VOLTAGE) (>L:LEFT_XFMR_LINE_VOLTAGE)
								}
						<!-- XFMR ENABLED , EMER GEN ENABLED , EXT POWER DISABLED -->
							(L:L_XMFR_RECT_PWR) 1 ==
							(L:EMER_GEN_DC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									(L:LEFT_XFMR_VOLTAGE) (>L:LEFT_XFMR_LINE_VOLTAGE)
								}
						<!-- XFMR ENABLED , EMER GEN DISABLED , EXT POWER ENABLED -->
							(L:L_XMFR_RECT_PWR) 1 ==
							(L:EMER_GEN_DC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:LEFT_XFMR_VOLTAGE) (>L:LEFT_XFMR_LINE_VOLTAGE)
								}

						<!--  XFMR DISABLED , EMER GEN ENABLED , EXT POWER ENABLED -->
							(L:L_XMFR_RECT_PWR) 0 ==
							(L:EMER_GEN_DC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:EMER_GEN_DC_BUS_VOLTAGE) (>L:LEFT_XFMR_LINE_VOLTAGE)
								}
						<!--  XFMR DISABLED , EMER GEN ENABLED , EXT POWER DISABLED -->
							(L:L_XMFR_RECT_PWR) 0 ==
							(L:EMER_GEN_DC_AVAIL) 1 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									(L:EMER_GEN_DC_BUS_VOLTAGE) (>L:LEFT_XFMR_LINE_VOLTAGE)
								}
						<!-- XFMR DISABLED , EMER GEN DISABLED , EXT POWER ENABLED -->
							(L:L_XMFR_RECT_PWR) 0 ==
							(L:EMER_GEN_DC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:EXTARNAL_AC_VOLTS) (>L:LEFT_XFMR_LINE_VOLTAGE)
								}

						<!-- XFMR DISABLED , EMER GEN DISABLED , EXT POWER DISABLED -->
							(L:L_XMFR_RECT_PWR) 0 ==
							(L:EMER_GEN_DC_AVAIL) 0 == and
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									0 (>L:LEFT_XFMR_LINE_VOLTAGE)
								}
								

							(L:RIGHT_XFMR_VOLTAGE) (>L:RIGHT_XFMR_LINE_VOLTAGE)

							(L:LEFT_XFMR_LINE_VOLTAGE) 20 &lt;
							(L:RIGHT_XFMR_LINE_VOLTAGE) 25 &gt; and
								if{
									<!-- (L:RIGHT_XFMR_LINE_VOLTAGE) (>L:LEFT_XFMR_LINE_VOLTAGE) -->
								}

							(L:LEFT_XFMR_LINE_VOLTAGE) 25 &gt;
							(L:RIGHT_XFMR_LINE_VOLTAGE) 20 &lt; and
								if{
									<!-- (L:LEFT_XFMR_LINE_VOLTAGE) (>L:RIGHT_XFMR_LINE_VOLTAGE) -->
								}
						</Value>
					</Select>
				</Element>
				<Element Name="AC LINE">
					<Select>
						<Value>
							(L:RIGHT_AC_BUS_AVAIL) 0 ==
							(L:EXTARNAL_AC_AVAIL) 1 == and
								if{
									(L:EXTARNAL_AC_VOLTS) 26 * 28 / (>L:RIGHT_26_AC_BUS_VOLTAGE)
								}
							(L:RIGHT_AC_BUS_AVAIL) 1 ==
							(L:26_VAC_AUTO_XFMR_PWR) 1 == and
								if{
									(L:RIGHT_AC_BUS_LINE_VOLTAGE) 26 * 115 / (>L:RIGHT_26_AC_BUS_VOLTAGE)
								}
							(L:RIGHT_AC_BUS_AVAIL) 0 ==
							(L:EXTARNAL_AC_AVAIL) 0 == and
								if{
									0 (>L:RIGHT_26_AC_BUS_VOLTAGE)
								}
							(L:LEFT_AC_BUS_LINE_VOLTAGE) (>L:ESS_AC_BUS_VOLTAGE)

							(L:LEFT_AC_BUS_LINE_VOLTAGE) (>L:LEFT_AC_BUS_VOLTAGE)
							(L:RIGHT_AC_BUS_LINE_VOLTAGE) (>L:RIGHT_AC_BUS_VOLTAGE)

							(L:ESS_AC_BUS_VOLTAGE) (>L:ENG_INST_AC_BUS_VOLTAGE)
							(L:ESS_AC_BUS_VOLTAGE) (>L:AUTO_XMFR_VOLTAGE)
						</Value>
					</Select>
				</Element>
				<Element Name="AC AVAILABLE">
					<Select>
						<Value>
							(L:RIGHT_AC_BUS_VOLTAGE) 115 ==
								if{ 1 (>L:RIGHT_AC_BUS_AVAIL) }
								els{ 0 (>L:RIGHT_AC_BUS_AVAIL) }

							(L:RIGHT_26_AC_BUS_VOLTAGE) 26 ==
								if{ 1 (>L:RIGHT_26_AC_BUS_AVAIL) }
								els{ 0 (>L:RIGHT_26_AC_BUS_AVAIL) }

							(L:LEFT_AC_BUS_VOLTAGE) 115 ==
								if{ 1 (>L:LEFT_AC_BUS_AVAIL) }
								els{ 0 (>L:LEFT_AC_BUS_AVAIL) }

							(L:ESS_AC_BUS_VOLTAGE) 115 ==
								if{ 1 (>L:ESS_AC_BUS_AVAIL) }
								els{ 0 (>L:ESS_AC_BUS_AVAIL) }

							(L:ENG_INST_AC_BUS_VOLTAGE) 115 ==
								if{ 1 (>L:ENG_INST_AC_BUS_AVAIL) }
								els{ 0 (>L:ENG_INST_AC_BUS_AVAIL) }
						</Value>
					</Select>
				</Element>
				<Element Name="DC LINE">
					<Select>
						<Value>
							(L:RIGHT_XFMR_LINE_VOLTAGE) (>L:RIGHT_DC_BUS_VOLTAGE)
							(L:RIGHT_DC_BUS_VOLTAGE) (>L:ARAM_DC_BUS_VOLTAGE)
							(L:ARAM_DC_BUS_VOLTAGE) (>L:M_ARM_DC_BUS_VOLTAGE)

							(L:LEFT_XFMR_LINE_VOLTAGE) (>L:LEFT_DC_BUS_VOLTAGE)
							(L:LEFT_XFMR_LINE_VOLTAGE) (>L:ESS_DC_BUS_VOLTAGE)

							(L:EMER_ESS_DC_AVAIL) 0 ==
								if{
									(L:ESS_DC_BUS_VOLTAGE) (>L:ENG_CONT_ESS_DC_BUS_VOLTAGE)
									(L:LEFT_XFMR_LINE_VOLTAGE) (>L:JFS_ESS_DC_BUS_VOLTAGE)
									(L:LEFT_XFMR_LINE_VOLTAGE) (>L:FIRE_EXT_BUS_VOLTAGE)
								}
							(L:EMER_ESS_DC_AVAIL) 1 ==
								if{
									(L:EMER_ESS_DC_BUS_VOLTAGE) (>L:ENG_CONT_ESS_DC_BUS_VOLTAGE)
									(L:EMER_ESS_DC_BUS_VOLTAGE) (>L:JFS_ESS_DC_BUS_VOLTAGE)
									(L:EMER_ESS_DC_BUS_VOLTAGE) (>L:FIRE_EXT_BUS_VOLTAGE)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="DC AVAILABLE">
					<Select>
						<Value>
							(L:M_ARM_DC_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:M_ARM_DC_BUS_AVAIL) }
								els{ 0 (>L:M_ARM_DC_BUS_AVAIL) }

							(L:ARAM_DC_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:ARAM_DC_BUS_AVAIL) }
								els{ 0 (>L:ARAM_DC_BUS_AVAIL) }

							(L:RIGHT_DC_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:RIGHT_DC_BUS_AVAIL) }
								els{ 0 (>L:RIGHT_DC_BUS_AVAIL) }

							(L:LEFT_DC_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:LEFT_DC_BUS_AVAIL) }
								els{ 0 (>L:LEFT_DC_BUS_AVAIL) }

							(L:ESS_DC_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:ESS_DC_BUS_AVAIL) }
								els{ 0 (>L:ESS_DC_BUS_AVAIL) }

							(L:ENG_CONT_ESS_DC_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:ENG_CONT_ESS_DC_BUS_AVAIL) }
								els{ 0 (>L:ENG_CONT_ESS_DC_BUS_AVAIL) }

							(L:JFS_ESS_DC_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:JFS_ESS_DC_BUS_AVAIL) }
								els{ 0 (>L:JFS_ESS_DC_BUS_AVAIL) }

							(L:FIRE_EXT_BUS_VOLTAGE) 28 ==
								if{ 1 (>L:FIRE_EXT_BUS_AVAIL) }
								els{ 0 (>L:FIRE_EXT_BUS_AVAIL) }
						</Value>
					</Select>
				</Element>
			</Element>

			<Element Name="BOOST SYS MALFUNCTION">
				<Select>
					<Value>
						(L:LGEN_AVAIL, enum) 0 ==
						(L:RGEN_AVAIL, enum) 0 == and
						(L:SW2_FS_ENG_EMER_GEN, enum) 0 &gt; and
							if{
								1 (>L:BST_SYS, bool)
							}
							els{
								0 (>L:BST_SYS, bool)
							}
					</Value>
				</Select>
			</Element>
		</Element>

		<Element Name="INT PWR SYSTEM">
			<Element Name="BUS">
				<Element Name="RIGHT AC BUS">
					<Select>
						<Value>
							(L:RIGHT_AC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AA_STA_2AB_AC_PWR)
									1 (>L:AA_STA_8AB_AC_PWR)
									1 (>L:AA_STA_3L_7R_CFT_AC_PWR)
									1 (>L:AA_STA_4_6_AC_PWR)
									1 (>L:AA_STA_2_8_AC_PWR)
									1 (>L:AG_STA_2_8_AC_PWR)
									1 (>L:AG_STA_5_AC_PWR)
									1 (>L:CTVS_PWR)
									1 (>L:ENG_ANTI_ICE_AC_PWR)
									1 (>L:EXCEEDANCE_COUNTER)
									1 (>L:GUN_PWR)
									1 (>L:ICS_PWR)
									1 (>L:JTIDS_PWR)
									1 (>L:L_WING_XFR_PUMP_PWR)
									1 (>L:OXY_GAGING_PWR)
									1 (>L:R_AIR_INLET_CONT_AC_PWR)
									1 (>L:R_AOA_PROVE_HTR_PWR)
									1 (>L:R_BST_PUMP_PWR)
									1 (>L:R_CFT_AFT_XFR_PUMP)
									1 (>L:RH_TEWS_POD_AC_PWR)
									1 (>L:R_DUCT_PITOT_HTR_PWR)
									1 (>L:R_ENG_FUEL_FLOW_IND_PWR)
									1 (>L:R_TOTAL_TEMP_PROBE_HTR_PWR)
									1 (>L:R_WING_XFR_PUMP_PWR)
									1 (>L:R_XMFR_RECT_PWR)
									1 (>L:RDR_WARN_RCVR_POD_PWR)
									1 (>L:RWR_AC_PWR)
									1 (>L:SEAT_ADJ_PWR)
									1 (>L:UTILITY_PWR_RCPT_AC_PWR)
									1 (>L:26_VAC_AUTO_XFMR_PWR)
								}
								els{
									0 (>L:AA_STA_2AB_AC_PWR)
									0 (>L:AA_STA_8AB_AC_PWR)
									0 (>L:AA_STA_3L_7R_CFT_AC_PWR)
									0 (>L:AA_STA_4_6_AC_PWR)
									0 (>L:AA_STA_2_8_AC_PWR)
									0 (>L:AG_STA_2_8_AC_PWR)
									0 (>L:AG_STA_5_AC_PWR)
									0 (>L:CTVS_PWR)
									0 (>L:ENG_ANTI_ICE_AC_PWR)
									0 (>L:EXCEEDANCE_COUNTER)
									0 (>L:GUN_PWR)
									0 (>L:ICS_PWR)
									0 (>L:JTIDS_PWR)
									0 (>L:L_WING_XFR_PUMP_PWR)
									0 (>L:OXY_GAGING_PWR)
									0 (>L:R_AIR_INLET_CONT_AC_PWR)
									0 (>L:R_AOA_PROVE_HTR_PWR)
									0 (>L:R_BST_PUMP_PWR)
									0 (>L:R_CFT_AFT_XFR_PUMP)
									0 (>L:RH_TEWS_POD_AC_PWR)
									0 (>L:R_DUCT_PITOT_HTR_PWR)
									0 (>L:R_ENG_FUEL_FLOW_IND_PWR)
									0 (>L:R_TOTAL_TEMP_PROBE_HTR_PWR)
									0 (>L:R_WING_XFR_PUMP_PWR)
									0 (>L:R_XMFR_RECT_PWR)
									0 (>L:RDR_WARN_RCVR_POD_PWR)
									0 (>L:RWR_AC_PWR)
									0 (>L:SEAT_ADJ_PWR)
									0 (>L:UTILITY_PWR_RCPT_AC_PWR)
									0 (>L:26_VAC_AUTO_XFMR_PWR)
								}
								}
						</Value>
					</Select>
				</Element>
				<Element Name="RIGHT 26V AC BUS">
					<Select>
						<Value>
							(L:RIGHT_26_AC_BUS_AVAIL) 1 ==
								if{
									1 (>L:ENG_ENP_IND_PWR)
									1 (>L:ENG_OIL_PRESS_IND_PWR)
									1 (>L:HYDR_PRESS_IND_PWR)
									1 (>L:PRAD_IND_PWR)
								}
								els{
									0 (>L:ENG_ENP_IND_PWR)
									0 (>L:ENG_OIL_PRESS_IND_PWR)
									0 (>L:HYDR_PRESS_IND_PWR)
									0 (>L:PRAD_IND_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="MASTER ARM DC BUS">
					<Select>
						<Value>
							(L:M_ARM_DC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AA_MASTER_ARM_PWR)
									1 (>L:AG_MASTER_ARM_PWR)
									1 (>L:GUN_TRIG_PWR)
									1 (>L:LOGIC_PWR)
									1 (>L:UMB_RET_PWR)
								}
								els{
									0 (>L:AA_MASTER_ARM_PWR)
									0 (>L:AG_MASTER_ARM_PWR)
									0 (>L:GUN_TRIG_PWR)
									0 (>L:LOGIC_PWR)
									0 (>L:UMB_RET_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="ARMAMENT DC BUS">
					<Select>
						<Value>
							(L:ARAM_DC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AG_JETT_PWR)
									1 (>L:AIM-7_JETT_PWR)
									1 (>L:AIM-9_JETT_PWR)
									1 (>L:MASTER_ARM_BUS_PWR)
									1 (>L:MASTER_ARM_CONT_PWR)
								}
								els{
									0 (>L:AG_JETT_PWR)
									0 (>L:AIM-7_JETT_PWR)
									0 (>L:AIM-9_JETT_PWR)
									0 (>L:MASTER_ARM_BUS_PWR)
									0 (>L:MASTER_ARM_CONT_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="RIGHT DC BUS">
					<Select>
						<Value>
							(L:RIGHT_DC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AA_MSL_MOT_FIRE_PWR)
									1 (>L:AA_STA_2AB_DC_PWR)
									1 (>L:AA_STA_8AB_DC_PWR)
									1 (>L:AA_STA_3L_7R_CFT_DC_PWR)
									1 (>L:AA_STA_4_6_DC_PWR)
									1 (>L:AA_STA_2_8_DC_PWR)
									1 (>L:AG_STA_2_8_DC_PWR)
									1 (>L:AG_STA_5_DC_PWR)
									1 (>L:ARM_BUS_CONT_PWR)
									1 (>L:CSBPC_HYD_BYPASS_PWR)
									1 (>L:ENG_ANTI_ICE_DC_PWR)
									1 (>L:ENG_OIL_PRS_PWR)
									1 (>L:GRD_FUEL_CONT_CK_PWR)
									1 (>L:GUN_CONT_DC_PWR)
									1 (>L:HYD_PRESS_PWR)
									1 (>L:ICS_CONT_PWR)
									1 (>L:LANDING_LT_PWR)
									1 (>L:LANDING_TAXY_LT_CONT_PWR)
									1 (>L:LAST_ROUND_PWR)
									1 (>L:LR_CFT_AG_PWR)
									1 (>L:L_WG_XFER_PUMP_RLY_PWR)
									1 (>L:MODE_SEL_PWR)
									1 (>L:MPCD_PWR)
									1 (>L:R_AIR_INLET_CONT_DC_PWR)
									1 (>L:R_BST_PUMP_RLY_PWR)
									1 (>L:R_CFT_HT_EXCH_DR_ACTR_PWR)
									1 (>L:RH_TEWS_POD_DC_PWR)
									1 (>L:RUDDER_TRAVEL_LMTR_PWR)
									1 (>L:R_WG_XFER_PUMP_RLY_PWR)
									1 (>L:RDR_WARN_RCVR_PWR)
									1 (>L:RWR_DC_PWR)
									1 (>L:SEAT_ADJ_CONT_PWR)
									1 (>L:TAXY_LT_PWR)
									1 (>L:TEWS_POD_CONT_PWR)
									1 (>L:UTILITY_PWR_RCPT_DC_PWR)
									1 (>L:VTRS_CTVS_PWR)
									1 (>L:WSHLD_ANTI_ICE_PWR)
								}
								els{
									0 (>L:AA_MSL_MOT_FIRE_PWR)
									0 (>L:AA_STA_2AB_DC_PWR)
									0 (>L:AA_STA_8AB_DC_PWR)
									0 (>L:AA_STA_3L_7R_CFT_DC_PWR)
									0 (>L:AA_STA_4_6_DC_PWR)
									0 (>L:AA_STA_2_8_DC_PWR)
									0 (>L:AG_STA_2_8_DC_PWR)
									0 (>L:AG_STA_5_DC_PWR)
									0 (>L:ARM_BUS_CONT_PWR)
									0 (>L:CSBPC_HYD_BYPASS_PWR)
									0 (>L:ENG_ANTI_ICE_DC_PWR)
									0 (>L:ENG_OIL_PRS_PWR)
									0 (>L:GRD_FUEL_CONT_CK_PWR)
									0 (>L:GUN_CONT_DC_PWR)
									0 (>L:HYD_PRESS_PWR)
									0 (>L:ICS_CONT_PWR)
									0 (>L:LANDING_LT_PWR)
									0 (>L:LANDING_TAXY_LT_CONT_PWR)
									0 (>L:LAST_ROUND_PWR)
									0 (>L:LR_CFT_AG_PWR)
									0 (>L:L_WG_XFER_PUMP_RLY_PWR)
									0 (>L:MODE_SEL_PWR)
									0 (>L:MPCD_PWR)
									0 (>L:R_AIR_INLET_CONT_DC_PWR)
									0 (>L:R_BST_PUMP_RLY_PWR)
									0 (>L:R_CFT_HT_EXCH_DR_ACTR_PWR)
									0 (>L:RH_TEWS_POD_DC_PWR)
									0 (>L:RUDDER_TRAVEL_LMTR_PWR)
									0 (>L:R_WG_XFER_PUMP_RLY_PWR)
									0 (>L:RDR_WARN_RCVR_PWR)
									0 (>L:RWR_DC_PWR)
									0 (>L:SEAT_ADJ_CONT_PWR)
									0 (>L:TAXY_LT_PWR)
									0 (>L:TEWS_POD_CONT_PWR)
									0 (>L:UTILITY_PWR_RCPT_DC_PWR)
									0 (>L:VTRS_CTVS_PWR)
									0 (>L:WSHLD_ANTI_ICE_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="LEFT AC BUS">
					<Select>
						<Value>
							(L:LEFT_AC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AC_PRESENT_RLY_PWR)
									1 (>L:ACS_PWR)
									1 (>L:ADC_PWR)
									1 (>L:AIC_L_PWR)
									1 (>L:AIR_MACH_IND_PWR)
									1 (>L:ALTMTR_IND_PWR)
									1 (>L:AOA_IND_PWR)
									1 (>L:CCC_PWR)
									1 (>L:EWWS_AC_PWR)
									1 (>L:FORM_LT_AVIONICS_DIM_CONT_PWR)
									1 (>L:HUD_AC_PWR)
									1 (>L:INTRL_NAV_SET_MEAS_UNIT_PWR)
									1 (>L:INTRG_RCVR_XMTR_PWR)
									1 (>L:INTRL_NAV_SET_DSPL_UNIT_PWR)
									1 (>L:INTERIOR_LTS_PWR)
									1 (>L:IRE_PWR)
									1 (>L:KIR_PWR)
									1 (>L:KIT_PWR)
									1 (>L:L_AIR_INLET_CONT_AC_PWR)
									1 (>L:L_AOA_PROVE_HTR_PWR)
									1 (>L:L_BST_PUMP_PWR)
									1 (>L:L_CFT_AFT_XFR_PUMP)
									1 (>L:L_CFT_CTR_XFR_PUMP)
									1 (>L:LR_PITOT_MAST_HTR_PWR)
									1 (>L:LEAD_COMP_GYRO_AC_PWR)
									1 (>L:L_ENG_FUEL_FLOW_IND_PWR)
									1 (>L:LH_TEWS_POD_AC_PWR)
									1 (>L:L_TOTAL_TEMP_SNSR_HTR_PWR)
									1 (>L:L_XMFR_RECT_PWR)
									1 (>L:PACS_AC_PWR)
									1 (>L:POS_ANTI_COL_LTS_PWR)
									1 (>L:RDR_COOLANT_PUMP_AC_PWR)
									1 (>L:RDR_XMTR_PWR)
									1 (>L:RDR_XMTR_LVPS_PWR)
									1 (>L:SIGNAL_DATA_RCDR_PWR)
									1 (>L:TACAN_RCVR_XMTR_PWR)
									1 (>L:TIS_PWR)
									1 (>L:TANK_XFR_PMP_PWR)
									1 (>L:VS_IND_PWR)
									1 (>L:VSD_PWR)
								}
								els{
									0 (>L:AC_PRESENT_RLY_PWR)
									0 (>L:ACS_PWR)
									0 (>L:ADC_PWR)
									0 (>L:AIC_L_PWR)
									0 (>L:AIR_MACH_IND_PWR)
									0 (>L:ALTMTR_IND_PWR)
									0 (>L:AOA_IND_PWR)
									0 (>L:CCC_PWR)
									0 (>L:EWWS_AC_PWR)
									0 (>L:FORM_LT_AVIONICS_DIM_CONT_PWR)
									0 (>L:HUD_AC_PWR)
									0 (>L:INTRL_NAV_SET_MEAS_UNIT_PWR)
									0 (>L:INTRG_RCVR_XMTR_PWR)
									0 (>L:INTRL_NAV_SET_DSPL_UNIT_PWR)
									0 (>L:INTERIOR_LTS_PWR)
									0 (>L:IRE_PWR)
									0 (>L:KIR_PWR)
									0 (>L:KIT_PWR)
									0 (>L:L_AIR_INLET_CONT_AC_PWR)
									0 (>L:L_AOA_PROVE_HTR_PWR)
									0 (>L:L_BST_PUMP_PWR)
									0 (>L:L_CFT_AFT_XFR_PUMP)
									0 (>L:L_CFT_CTR_XFR_PUMP)
									0 (>L:LR_PITOT_MAST_HTR_PWR)
									0 (>L:LEAD_COMP_GYRO_AC_PWR)
									0 (>L:L_ENG_FUEL_FLOW_IND_PWR)
									0 (>L:LH_TEWS_POD_AC_PWR)
									0 (>L:L_TOTAL_TEMP_SNSR_HTR_PWR)
									0 (>L:L_XMFR_RECT_PWR)
									0 (>L:PACS_AC_PWR)
									0 (>L:POS_ANTI_COL_LTS_PWR)
									0 (>L:RDR_COOLANT_PUMP_AC_PWR)
									0 (>L:RDR_XMTR_PWR)
									0 (>L:RDR_XMTR_LVPS_PWR)
									0 (>L:SIGNAL_DATA_RCDR_PWR)
									0 (>L:TACAN_RCVR_XMTR_PWR)
									0 (>L:TIS_PWR)
									0 (>L:TANK_XFR_PMP_PWR)
									0 (>L:VS_IND_PWR)
									0 (>L:VSD_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="ESS AC BUS">
					<Select>
						<Value>
							(L:ESS_AC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AFCS_AC_PWR)
									1 (>L:ARR_FLD_LTS_PWR)
									1 (>L:FUEL_LVL_SENS_PWR)
									1 (>L:ATTD_DIR_IND_PWR)
									1 (>L:ATTD_HDG_REF_PWR)
									1 (>L:BLEED_AIR_LEAK_DET_AC_PWR)
									1 (>L:CAUT_WRN_ADV_LTS_PWR)
									1 (>L:ENG_INSTR_ESS_AC_PWR)
									1 (>L:FUEL_QTY_IND_PWR)
									1 (>L:HORIZ_SIT_IND_PWR)
									1 (>L:LR_PITOT_HEAD_HEAT_PWR)
									1 (>L:L_DUCT_PITOT_HTR_PWR)
									1 (>L:R_CFT_CTR_XFR_PUMP)
									1 (>L:STBY_ATTD_IND_PWR)
									1 (>L:STORM_FLOOD_LT_PWR)
								}
								els{
									0 (>L:AFCS_AC_PWR)
									0 (>L:ARR_FLD_LTS_PWR)
									0 (>L:FUEL_LVL_SENS_PWR)
									0 (>L:ATTD_DIR_IND_PWR)
									0 (>L:ATTD_HDG_REF_PWR)
									0 (>L:BLEED_AIR_LEAK_DET_AC_PWR)
									0 (>L:CAUT_WRN_ADV_LTS_PWR)
									0 (>L:ENG_INSTR_ESS_AC_PWR)
									0 (>L:FUEL_QTY_IND_PWR)
									0 (>L:HORIZ_SIT_IND_PWR)
									0 (>L:LR_PITOT_HEAD_HEAT_PWR)
									0 (>L:L_DUCT_PITOT_HTR_PWR)
									0 (>L:R_CFT_CTR_XFR_PUMP)
									0 (>L:STBY_ATTD_IND_PWR)
									0 (>L:STORM_FLOOD_LT_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="ENG INST AC BUS">
					<Select>
						<Value>
							(L:LEFT_AC_BUS_AVAIL) 1 ==
							(L:JFS_ESS_DC_BUS_AVAIL) 1 == or
								if{
									1 (>L:ENG_RPM_TACH_IND_PWR)
									1 (>L:ENG_FTIT_IND_PWR)
								}
								els{
									0 (>L:ENG_RPM_TACH_IND_PWR)
									0 (>L:ENG_FTIT_IND_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="LEFT DC BUS">
					<Select>
						<Value>
							(L:LEFT_DC_BUS_AVAIL) 1 ==
								if{
									1 (>L:ARMT_CONT_SET_PWR)
									1 (>L:ASP_BIT_CONT_PNL_PWR)
									1 (>L:AV_GND_COOL_CONT_PWR)
									1 (>L:CFT_LVL_CONT_VALVE_PWR)
									1 (>L:ECS_TEMP_CONT_PWR)
									1 (>L:EMER_GEN_EBP_PWR)
									1 (>L:EWWS_DC_PWR)
									1 (>L:GRD_PWR_RUD_TRVL_CAUT_PWR)
									1 (>L:HUD_DC_PWR)
									1 (>L:ILS_PWR)
									1 (>L:ILE_PWR)
									1 (>L:KY-58_PWR)
									1 (>L:LEAD_COMP_GYRO_DC_PWR)
									1 (>L:L_AIR_INLET_CONT_DC_PWR)
									1 (>L:L_BST_PUMP_RLY_PWR)
									1 (>L:L_CFT_HT_EXCH_DR_ACTR_PWR)
									1 (>L:LR_CFT_CTR_XFR_PUMP_PWR)
									1 (>L:LH_TEWS_POD_DC_PWR)
									1 (>L:PACS_DC_PWR)
									1 (>L:PSN_ANTI_COLLISION_LT_CONT_PWR)
									1 (>L:RDR_CONT_LVPS_PWR)
									1 (>L:RDR_COOLANT_PUMP_DC_PWR)
									1 (>L:RDR_LVPS_PWR)
									1 (>L:TACAN_ADI_TCN_ILS_PNL_PWR)
									1 (>L:TIS_PWR)
									1 (>L:UHF_RT_2_PWR)
								}
								els{
									0 (>L:ARMT_CONT_SET_PWR)
									0 (>L:ASP_BIT_CONT_PNL_PWR)
									0 (>L:AV_GND_COOL_CONT_PWR)
									0 (>L:CFT_LVL_CONT_VALVE_PWR)
									0 (>L:ECS_TEMP_CONT_PWR)
									0 (>L:EMER_GEN_EBP_PWR)
									0 (>L:EWWS_DC_PWR)
									0 (>L:GRD_PWR_RUD_TRVL_CAUT_PWR)
									0 (>L:HUD_DC_PWR)
									0 (>L:ILS_PWR)
									0 (>L:ILE_PWR)
									0 (>L:KY-58_PWR)
									0 (>L:LEAD_COMP_GYRO_DC_PWR)
									0 (>L:L_AIR_INLET_CONT_DC_PWR)
									0 (>L:L_BST_PUMP_RLY_PWR)
									0 (>L:L_CFT_HT_EXCH_DR_ACTR_PWR)
									0 (>L:LR_CFT_CTR_XFR_PUMP_PWR)
									0 (>L:LH_TEWS_POD_DC_PWR)
									0 (>L:PACS_DC_PWR)
									0 (>L:PSN_ANTI_COLLISION_LT_CONT_PWR)
									0 (>L:RDR_CONT_LVPS_PWR)
									0 (>L:RDR_COOLANT_PUMP_DC_PWR)
									0 (>L:RDR_LVPS_PWR)
									0 (>L:TACAN_ADI_TCN_ILS_PNL_PWR)
									0 (>L:TIS_PWR)
									0 (>L:UHF_RT_2_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="ESS DC BUS">
					<Select>
						<Value>
							(L:ESS_DC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AERIAL_REFUELING_PWR)
									1 (>L:AFCS_DC_PWR)
									1 (>L:AIM-7_EJECT_PWR)
									1 (>L:ARI_SHUTOFF_ANTI-SKID_CONT_PWR)
									1 (>L:ADF_PWR)
									1 (>L:BLEED_AIR_LEAK_DET_DC_PWR)
									1 (>L:BK_PULSER_PWR)
									1 (>L:CBN_AIR_DUMP_SOL_PWR)
									1 (>L:ESS_DC_PRESS_RLY_PWR)
									1 (>L:CFT_AG_STOR_REL_PWR)
									1 (>L:CMD_PRGMR_PWR)
									1 (>L:CFT_AFT_CONT_PWR)
									1 (>L:CFT_LCV_CONT_PWR)
									1 (>L:ECS_HEAT_EXCANGER_PWR)
									1 (>L:EMER_JETT_PWR)
									1 (>L:ENG_CONT_ESS_BUS_PWR)
									1 (>L:ENVIRONMENTAL_CONT_SYS_PWR)
									1 (>L:FLAP_PWR)
									1 (>L:FUEL_DUMP_PWR)
									1 (>L:FUEL_LEVEL_SENSING_UNIT_PWR)
									1 (>L:FUEL_PRESS_REGULATORS_PWR)
									1 (>L:HOT_FUEL_GRD_REFUEL_PWR)
									1 (>L:IFF_PWR)
									1 (>L:INT_COMM_FTIT_WARN_PWR)
									1 (>L:INT_LTS_TEST_PWR)
									1 (>L:LDG_GR_POS_WRN_TONE_PWR)
									1 (>L:L_ENG_OVSP_DET_PWR)
									1 (>L:LG_PWR)
									1 (>L:LG_POS_IND_PWR)
									1 (>L:L_MAIN_GEAR_WOW_PWR)
									1 (>L:NWS_PWR)
									1 (>L:PRAD_CONT_PWR)
									1 (>L:R_ENG_OVSP_DET_PWR)
									1 (>L:R_MAIN_GEAR_WOW_PWR)
									1 (>L:SPD_BRK_PWR)
									1 (>L:STORE_RELEASE_PWR)
									1 (>L:UHF_RT_1_PWR)
								}
								els{
									0 (>L:AERIAL_REFUELING_PWR)
									0 (>L:AFCS_DC_PWR)
									0 (>L:AIM-7_EJECT_PWR)
									0 (>L:ARI_SHUTOFF_ANTI-SKID_CONT_PWR)
									0 (>L:ADF_PWR)
									0 (>L:BLEED_AIR_LEAK_DET_DC_PWR)
									0 (>L:BK_PULSER_PWR)
									0 (>L:CBN_AIR_DUMP_SOL_PWR)
									0 (>L:ESS_DC_PRESS_RLY_PWR)
									0 (>L:CFT_AG_STOR_REL_PWR)
									0 (>L:CMD_PRGMR_PWR)
									0 (>L:CFT_AFT_CONT_PWR)
									0 (>L:CFT_LCV_CONT_PWR)
									0 (>L:ECS_HEAT_EXCANGER_PWR)
									0 (>L:EMER_JETT_PWR)
									0 (>L:ENG_CONT_ESS_BUS_PWR)
									0 (>L:ENVIRONMENTAL_CONT_SYS_PWR)
									0 (>L:FLAP_PWR)
									0 (>L:FUEL_DUMP_PWR)
									0 (>L:FUEL_LEVEL_SENSING_UNIT_PWR)
									0 (>L:FUEL_PRESS_REGULATORS_PWR)
									0 (>L:HOT_FUEL_GRD_REFUEL_PWR)
									0 (>L:IFF_PWR)
									0 (>L:INT_COMM_FTIT_WARN_PWR)
									0 (>L:INT_LTS_TEST_PWR)
									0 (>L:LDG_GR_POS_WRN_TONE_PWR)
									0 (>L:L_ENG_OVSP_DET_PWR)
									0 (>L:LG_PWR)
									0 (>L:LG_POS_IND_PWR)
									0 (>L:L_MAIN_GEAR_WOW_PWR)
									0 (>L:NWS_PWR)
									0 (>L:PRAD_CONT_PWR)
									0 (>L:R_ENG_OVSP_DET_PWR)
									0 (>L:R_MAIN_GEAR_WOW_PWR)
									0 (>L:SPD_BRK_PWR)
									0 (>L:STORE_RELEASE_PWR)
									0 (>L:UHF_RT_1_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="ENG CONT ESS DC BUS">
					<Select>
						<Value>
							(L:ENG_CONT_ESS_DC_BUS_AVAIL) 1 ==
								if{
									1 (>L:CAUT_LT_CON_MA_CAUT_RESET_PWR)
									1 (>L:ENG_FIRE_EXT_SYS_PWR)
									1 (>L:ENG_FIRE_OVHT_DET_SYS_PWR)
									1 (>L:L_ENG_FUEL_SOV_PWR)
									1 (>L:L_ENG_IND_ACCESS_PWR)
									1 (>L:NOSE_LDG_WOW_PWR)
									1 (>L:R_ENG_FUEL_SOV_PWR)
									1 (>L:R_ENG_IND_ACCESS_PWR)
								}
								els{
									0 (>L:CAUT_LT_CON_MA_CAUT_RESET_PWR)
									0 (>L:ENG_FIRE_EXT_SYS_PWR)
									0 (>L:ENG_FIRE_OVHT_DET_SYS_PWR)
									0 (>L:L_ENG_FUEL_SOV_PWR)
									0 (>L:L_ENG_IND_ACCESS_PWR)
									0 (>L:NOSE_LDG_WOW_PWR)
									0 (>L:R_ENG_FUEL_SOV_PWR)
									0 (>L:R_ENG_IND_ACCESS_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="JFS ESS DC BUS">
					<Select>
						<Value>
							(L:JFS_ESS_DC_BUS_AVAIL) 1 ==
								if{
									1 (>L:AMAD_FIRE_DET_SYS_PWR)
									1 (>L:INTERCOM_PWR)
									1 (>L:LR_AMAD_SEL_PWR)
									1 (>L:UTIL_FLOOD_LT_PWR)
									1 (>L:FTIT_WARN_PWR)
								}
								els{
									0 (>L:AMAD_FIRE_DET_SYS_PWR)
									0 (>L:INTERCOM_PWR)
									0 (>L:LR_AMAD_SEL_PWR)
									0 (>L:UTIL_FLOOD_LT_PWR)
									0 (>L:FTIT_WARN_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="FIRE EXT BUS">
					<Select>
						<Value>
							(L:FIRE_EXT_BUS_AVAIL) 1 ==
							(A:SIM ON GROUND, enum) 1 == and
								if{
									1 (>L:AMAD_F_EXT_SYS_PWR)
								}
								els{
									0 (>L:AMAD_F_EXT_SYS_PWR)
								}
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="SYS">
				<Element Name="LEFT BOOST PUMP">
					<Select>
						<Value>
							(L:L_BST_PUMP_PWR) 1 ==
							(L:FUEL_PRESS_REGULATORS_PWR) 1 == and
							(A:GENERAL ENG FUEL PRESSURE:1, PSI) 12 &gt; and
							(A:GENERAL ENG COMBUSTION:1, bool) 1 == and
								if{
									1 (>L:L_BST_PUMP_ON)
								}
								els{
									0 (>L:L_BST_PUMP_ON)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="RIGHT BOOST PUMP">
					<Select>
						<Value>
							(L:R_BST_PUMP_PWR) 1 ==
							(L:FUEL_PRESS_REGULATORS_PWR) 1 == and
							(A:GENERAL ENG FUEL PRESSURE:2, PSI) 12 &gt; and
							(A:GENERAL ENG COMBUSTION:2, bool) 1 == and
								if{
									1 (>L:R_BST_PUMP_ON)
								}
								els{
									0 (>L:R_BST_PUMP_ON)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="HYD PUMP">
					<Select>
						<Value>
							(L:HYD_PRESS_PWR) 1 ==
							(L:HYD_L_INIT) 0 == and
							(A:HYDRAULIC SWITCH, bool) 0 == and
								if{
									1 (>K:HYDRAULIC_SWITCH_TOGGLE)
									2 (>K:HYDRAULIC_SWITCH_TOGGLE)
									1 (>L:HYD_L_INIT)
								}
							(L:HYD_PRESS_PWR) 0 ==
							(L:HYD_L_INIT) 1 == and
							(A:HYDRAULIC SWITCH, bool) 1 == and
								if{
									1 (>K:HYDRAULIC_SWITCH_TOGGLE)
									2 (>K:HYDRAULIC_SWITCH_TOGGLE)
									0 (>L:HYD_L_INIT)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="GAUGE POWER">
					<Select>
						<Value>
							(L:GND_AMI_PWR, enum) 1 ==
							(L:AIR_MACH_IND_PWR) 1 == and
								if{
									1 (>L:AMI_PWR, enum)
								}
								els{
									0 (>L:AMI_PWR, enum)
								}

							(L:GND_AOA_PWR, enum) 1 ==
							(L:AOA_IND_PWR) 1 == and
								if{
									1 (>L:AOA_PWR, enum)
								}
								els{
									0 (>L:AOA_PWR, enum)
								}

							1 (>L:ACC_PWR, enum)

							(L:GND_ADI_PWR, enum) 1 ==
							(L:ATTD_DIR_IND_PWR) 1 == and
								if{
									1 (>L:ATTD_PWR, enum)
								}
								els{
									0 (>L:ATTD_PWR, enum)
								}

							(L:GND_HSI_PWR, enum) 1 ==
							(L:HORIZ_SIT_IND_PWR) 1 == and
								if{
									1 (>L:HSI_PWR, enum)
								}
								els{
									0 (>L:HSI_PWR, enum)
								}

							(L:GND_ALTMTR_PWR, enum) 1 ==
							(L:ALTMTR_IND_PWR) 1 == and
								if{
									1 (>L:ALTMTR_PWR, enum)
								}
								els{
									0 (>L:ALTMTR_PWR, enum)
								}

							(L:GND_VSI_PWR, enum) 1 ==
							(L:VS_IND_PWR) 1 == and
								if{
									1 (>L:VSI_PWR, enum)
								}
								els{
									0 (>L:VSI_PWR, enum)
								}
							(L:CC_PWR, enum) 1 ==
								if{
									1 (>L:CLK_PWR, enum)
								}
								els{
									0 (>L:CLK_PWR, enum)
								}

							(L:ENG_RPM_TACH_IND_PWR) 1 ==
								if{
									1 (>L:TACH_GAUGE_PWR, enum)
								}
								els{
									0 (>L:TACH_GAUGE_PWR, enum)
								}

							(L:ENG_FTIT_IND_PWR) 1 ==
								if{
									1 (>L:FTIT_GAUGE_PWR, enum)
								}
								els{
									0 (>L:FTIT_GAUGE_PWR, enum)
								}

							(L:GND_FUEL_FLOW_GAUGE_PWR, enum) 1 ==
							(L:L_ENG_FUEL_FLOW_IND_PWR) 1 == and
								if{
									1 (>L:L_FF_GAUGE_PWR, enum)
								}
								els{
									0 (>L:L_FF_GAUGE_PWR, enum)
								}

							(L:GND_FUEL_FLOW_GAUGE_PWR, enum) 1 ==
							(L:R_ENG_FUEL_FLOW_IND_PWR) 1 == and
								if{
									1 (>L:R_FF_GAUGE_PWR, enum)
								}
								els{
									0 (>L:R_FF_GAUGE_PWR, enum)
								}

							(L:GND_NOZZLE_GAUGE_PWR, enum) 1 ==
							(L:ENG_ENP_IND_PWR) 1 ==
								if{
									1 (>L:ENP_GAUGE_PWR, enum)
								}
								els{
									0 (>L:ENP_GAUGE_PWR, enum)
								}

							(L:GND_HYDRAULIC_GAUGE_PWR, enum) 1 ==
							(L:HYDR_PRESS_IND_PWR) 1 == and
								if{
									1 (>L:HYDRAULIC_GAUGE_PWR, enum)
								}
								els{
									0 (>L:HYDRAULIC_GAUGE_PWR, enum)
								}

							(L:GND_OIL_PRESS_GAUGE_PWR, enum) 1 ==
							(L:ENG_OIL_PRESS_IND_PWR) 1 == and
								if{
									1 (>L:OIL_PRESS_GAUGE_PWR, enum)
								}
								els{
									0 (>L:OIL_PRESS_GAUGE_PWR, enum)
								}

							(L:GND_STBY_ATT_PWR, enum) 1 ==
							(L:STBY_ATTD_IND_PWR) 1 == and
								if{
									1 (>L:STBY_ATTD_PWR, enum)
								}
								els{
									0 (>L:STBY_ATTD_PWR, enum)
								}

							(L:GND_FUEL_GAUGE_PWR, enum) 1 ==
							(L:FUEL_QTY_IND_PWR) 1 == and
								if{
									1 (>L:FUEL_GAUGE_PWR, enum)
								}
								els{
									0 (>L:FUEL_GAUGE_PWR, enum)
								}

							(L:PRAD_IND_PWR) 1 ==
								if{
									1 (>L:PRAD_GAUGE_PWR, enum)
								}
								els{
									0 (>L:PRAD_GAUGE_PWR, enum)
								}
							(L:OXY_GAGING_PWR) 1 ==
								if{
									1 (>L:OXY_GAUGE_PWR, enum)
								}
								els{
									0 (>L:OXY_GAUGE_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="TEWS SYS PWR">
					<Select>
						<Value>
							(L:TEWS_POD_CONT_PWR) 1 ==
							(L:LH_TEWS_POD_AC_PWR) 1 == and
							(L:RH_TEWS_POD_AC_PWR) 1 == and
							(L:SW1_FS_TEWS_ICS) 1 == and
								if{
									1 (>L:TEWS_SYS_PWR)
								}
								els{
									0 (>L:TEWS_SYS_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="RADAR SYS PWR">
					<Select>
						<Value>
							(L:RDR_COOLANT_PUMP_AC_PWR) 1 ==
							(L:RDR_COOLANT_PUMP_DC_PWR) 1 == and
							(L:RDR_CONT_LVPS_PWR) 1 == and
							(L:RDR_LVPS_PWR) 1 == and
							(L:RDR_XMTR_PWR) 1 == and
							(L:RDR_XMTR_LVPS_PWR) 1 == and
							(L:RDR_WARN_RCVR_PWR) 1 == and
							(L:RDR_WARN_RCVR_POD_PWR) 1 == and
								if{
									1 (>L:RDR_SYS_PWR)
								}
								els{
									0 (>L:RDR_SYS_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="EWWS SYS PWR">
					<Select>
						<Value>
							(L:EWWS_AC_PWR) 1 ==
							(L:EWWS_DC_PWR) 1 == and
								if{
									1 (>L:EWWS_SYS_PWR)
								}
								els{
									0 (>L:RWWS_SYS_PWR)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="TAC INFO SYS PWR">
					<Select>
						<Value>
							(L:TIS_PWR) 1 ==
								if{
									1 (>L:TIS_SYS_PWR)
								}
								els{
									0 (>L:TIS_SYS_PWR)
								}
						</Value>
					</Select>
				</Element>
			</Element>
		</Element>
		<Element Name="EXTERNAL POWER">
			<Element>
				<Select>
					<Value>
					(A:AIRSPEED INDICATED, knots) 10 &lt;
					(A:SIM ON GROUND, enum) 1 == and
						if{ 28 (>L:EXTARNAL_AC_VOLTS) }
						els{ 0 (>L:EXTARNAL_AC_VOLTS) }
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
					(L:EXTARNAL_AC_VOLTS) 28 ==
					(L:SW2_FS_ENG_EXT_PWR, enum) 0 &gt; and
						if{ 1 (>L:EXTARNAL_AC_AVAIL) }
						els{ 0 (>L:EXTARNAL_AC_AVAIL) }
					</Value>
				</Select>
			</Element>
		</Element>

		<Element Name="GROUND POWER">
			<Element Name="SWITCH 1">
			<!-- HYD , OIL.P , FF , NOZ GAUGE / LDG / EXCDNCE CENTER / A+ / CSBPC / FLAPS / SPEEDBRAKE / AFCS -->
				<Element Name="POSITION A">
					<Select>
						<Value>
							(L:SW2_FS_GND_PWR_1, enum) 0 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_HYDRAULIC_GAUGE_PWR, enum)
									1 (>L:GND_OIL_PRESS_GAUGE_PWR, enum)
									1 (>L:GND_LDG_GEAR_PWR, enum)
									1 (>L:GND_FUEL_FLOW_GAUGE_PWR, enum)
									1 (>L:GND_EXC_CNTR_PWR, enum)

									0 (>L:GND_A_PLUS_PWR, enum)
									0 (>L:GND_CSBPC_PWR, enum)
									0 (>L:GND_FUEL_GAUGE_PWR, enum)
									0 (>L:GND_NOZZLE_GAUGE_PWR, enum)
									0 (>L:GND_FLAPS_GAUGE_PWR, enum)
									0 (>L:GND_SPEED_BRAKE_PWR, enum)
									0 (>L:GND_AFCS_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="POSITION AUTO">
					<Select>
						<Value>
							(L:SW2_FS_GND_PWR_1, enum) 1 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_HYDRAULIC_GAUGE_PWR, enum)
									1 (>L:GND_OIL_PRESS_GAUGE_PWR, enum)
									1 (>L:GND_LDG_GEAR_PWR, enum)
									1 (>L:GND_FUEL_FLOW_GAUGE_PWR, enum)
									1 (>L:GND_EXC_CNTR_PWR, enum)

									1 (>L:GND_A_PLUS_PWR, enum)
									1 (>L:GND_CSBPC_PWR, enum)
									1 (>L:GND_FUEL_GAUGE_PWR, enum)
									1 (>L:GND_NOZZLE_GAUGE_PWR, enum)
									1 (>L:GND_FLAPS_GAUGE_PWR, enum)
									1 (>L:GND_SPEED_BRAKE_PWR, enum)
									1 (>L:GND_AFCS_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="POSITION B">
					<Select>
						<Value>
							(L:SW2_FS_GND_PWR_1, enum) 2 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									0 (>L:GND_HYDRAULIC_GAUGE_PWR, enum)
									0 (>L:GND_OIL_PRESS_GAUGE_PWR, enum)
									0 (>L:GND_LDG_GEAR_PWR, enum)
									0 (>L:GND_FUEL_FLOW_GAUGE_PWR, enum)
									0 (>L:GND_EXC_CNTR_PWR, enum)

									1 (>L:GND_A_PLUS_PWR, enum)
									1 (>L:GND_CSBPC_PWR, enum)
									1 (>L:GND_FUEL_GAUGE_PWR, enum)
									1 (>L:GND_NOZZLE_GAUGE_PWR, enum)
									1 (>L:GND_FLAPS_GAUGE_PWR, enum)
									1 (>L:GND_SPEED_BRAKE_PWR, enum)
									1 (>L:GND_AFCS_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="SWITCH 2">
			<!-- STBY ATT , ADI , HSI GAUGE / AHRS -->
				<Element Name="POSITION AUTO">
					<Select>
						<Value>
							(L:SW1_FS_COOL_2, enum) 0 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_AHRS_PWR, enum)
									1 (>L:GND_STBY_ATT_PWR, enum)
									1 (>L:GND_ADI_PWR, enum)
									1 (>L:GND_HSI_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="POSITION ON">
					<Select>
						<Value>
							(L:SW1_FS_COOL_2, enum) 1 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_AHRS_PWR, enum)
									1 (>L:GND_STBY_ATT_PWR, enum)
									1 (>L:GND_ADI_PWR, enum)
									1 (>L:GND_HSI_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="SWITCH 3">
				<!-- AOA , ALTMTR , VSI , AMI / ADC / AIC -->
				<Element Name="POSITION AUTO">
					<Select>
						<Value>
							(L:SW1_FS_COOL_3, enum) 0 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_ADC_PWR, enum)
									1 (>L:GND_AOA_PWR, enum)
									1 (>L:GND_ALTMTR_PWR, enum)
									1 (>L:GND_VSI_PWR, enum)
									1 (>L:GND_AMI_PWR, enum)
									1 (>L:GND_AIC_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="POSITION ON">
					<Select>
						<Value>
							(L:SW1_FS_COOL_3, enum) 1 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_ADC_PWR, enum)
									1 (>L:GND_AOA_PWR, enum)
									1 (>L:GND_ALTMTR_PWR, enum)
									1 (>L:GND_VSI_PWR, enum)
									1 (>L:GND_AMI_PWR, enum)
									1 (>L:GND_AIC_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="SWITCH 4">
				<!-- ICS / ACS / IBS / PSDP -->
				<Element Name="POSITION AUTO">
					<Select>
						<Value>
							(L:SW1_FS_COOL_4, enum) 0 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_ICS_PWR, enum)
									1 (>L:GND_ACS_PWR, enum)
									1 (>L:GND_IBS_PWR, enum)
									1 (>L:GND_PSDP_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="POSITION ON">
					<Select>
						<Value>
							(L:SW1_FS_COOL_4, enum) 1 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									0 (>L:GND_ICS_PWR, enum)
									0 (>L:GND_ACS_PWR, enum)
									0 (>L:GND_IBS_PWR, enum)
									0 (>L:GND_PSDP_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="SWITCH CC">
				<Element Name="POSITION AUTO">
					<Select>
						<Value>
							(L:SW2_FS_CC, enum) 1 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_CC_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="POSITION ON">
					<Select>
						<Value>
							(L:SW2_FS_CC, enum) 2 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									1 (>L:GND_CC_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="POSITION OFF">
					<Select>
						<Value>
							(L:SW2_FS_CC, enum) 0 ==
							(L:AV_GND_COOL_CONT_PWR) 1 == and
								if{
									0 (>L:GND_CC_PWR, enum)
								}
						</Value>
					</Select>
				</Element>
			</Element>
		</Element>
		<Element Name="GND PWR SYSTEM">
			<Element Name="CENTRAL COMPUTER (CC)">
				<Select>
					<Value>
						(L:GND_CC_PWR, enum) 1 ==
						(L:ADC_PWR) 1 == and
						(L:CCC_PWR) 1 == and
							if{ 1 (>L:CC_PWR, enum) }
							els{ 0 (>L:CC_PWR, enum) }

						(L:CC_PWR, enum) 1 ==
							if{
								1 (>L:INS_GC_RDY, enum)
								1 (>L:INS_RDY, bool)								
								(>K:RESET_G_FORCE_INDICATOR)
							}
							els{
								0 (>L:INS_GC_RDY, enum)
								0 (>L:INS_RDY, bool)
							}
					</Value>
				</Select>
			</Element>
			<Element Name="AIR DATA COMPUTER (ADC)">
				<Select>
					<Value>
						(L:GND_ADC_PWR, enum) 1 ==
						(L:ADC_PWR) 1 ==
							if{ 1 (>L:ADC_POWER) }
							els{ 0 (>L:ADC_POWER) }
					</Value>
				</Select>
			</Element>
			<Element Name="SPEED BRAKE">
				<Select>
					<Value>
						(L:GND_SPEED_BRAKE_PWR, enum) 1 ==
						(L:SPD_BRK_PWR) 1 == and
							if{}
					</Value>
				</Select>
			</Element>
			<Element Name="AUTOMATIC FLIGHT CONTROL SYSTEM (AFCS)">
				<Select>
					<Value>
						(L:GND_AFCS_PWR, enum) 1 ==
						(L:AFCS_AC_PWR) 1 == and
						(L:AFCS_DC_PWR) 1 == and
							if{ 1 (>L:AFCS_POWER) }
							els{ 0 (>L:AFCS_POWER) }
					</Value>
				</Select>
			</Element>
			<Element Name="FLAPS">
				<Select>
					<Value>
						(L:FLAP_PWR) 1 ==
							if{
								(A:FLAPS HANDLE PERCENT, Percent) 0 &gt;
									if{ 0 (>L:SW1_FLAPS, enum) }
									els{ 1 (>L:SW1_FLAPS, enum) }
							}
					</Value>
				</Select>
			</Element>
			<Element Name="A+">
				<Select>
					<Value>
						(L:GND_A_PLUS_PWR, enum) 1 ==
							if{}
					</Value>
				</Select>
			</Element>
			<Element Name="CONTROL STICK BOOST PITCH COMPENSATOR (CSBPC)">
				<Select>
					<Value>
						(L:GND_CSBPC_PWR, enum) 1 ==
						(L:CSBPC_HYD_BYPASS_PWR) 1 == and
							if{}
					</Value>
				</Select>
			</Element>
			<Element Name="ATTITUDE HEADING REFERENCE SET (AHRS)">
				<Select>
					<Value>
						(L:GND_AHRS_PWR, enum) 1 ==
						(L:ATTD_HDG_REF_PWR) 1 == and
							if{}
					</Value>
				</Select>
			</Element>
			<Element Name="AIR INLET CONTROLLER (AIC)">
				<Select>
					<Value>
						(L:GND_AIC_PWR, enum) 1 ==
							if{
								(L:L_AIR_INLET_CONT_AC_PWR) 1 ==
								(L:L_AIR_INLET_CONT_DC_PWR) 1 == and
									if{ 1 (>L:L_AIC_PWR) }
									els{ 0 (>L:L_AIC_PWR) }

								(L:R_AIR_INLET_CONT_AC_PWR) 1 ==
								(L:R_AIR_INLET_CONT_DC_PWR) 1 == and
									if{ 1 (>L:R_AIC_PWR) }
									els{ 0 (>L:R_AIC_PWR) }
							}
							els{
								0 (>L:L_AIC_PWR)
								0 (>L:R_AIC_PWR)
							}
					</Value>
				</Select>
			</Element>
			<Element Name="INTERCOMMUNICATION SYSTEM (ICS)">
				<Select>
					<Value>
						(L:GND_ICS_PWR, enum) 1 ==
						(L:ICS_PWR) 1 == and
						(L:ICS_CONT_PWR) 1 == and
							if{ 1 (>L:ICS_POWER) }
							els{ 0 (>L:ICS_POWER) }
					</Value>
				</Select>
			</Element>
			<Element Name="ARMAMENT CONTROL SET (ACS)">
				<Select>
					<Value>
						(L:GND_ACS_PWR, enum) 1 ==
						(L:ACS_PWR) 1 == and
							if{ 1 (>L:ACS_POWER) }
							els{ 0 (>L:ACS_POWER) }
					</Value>
				</Select>
			</Element>
			<Element Name="INTERFERENCE BLANKER SYSTEM (IBS)">
				<Select>
					<Value>
						(L:GND_IBS_PWR, enum) 1 ==
						(L:INTR_BLANER_PWR) 1 == and
							if{}
					</Value>
				</Select>
			</Element>
			<Element Name="PROGRAMMABLE SIGNAL DATA PROCESSOR (PSDP)">
				<Select>
					<Value>
						(L:GND_PSDP_PWR, enum) 1 ==
							if{}
					</Value>
				</Select>
			</Element>
		</Element>
	</Element>

	<Element Name="GAUGE NEEDLE CIRCUIT">
		<Element Name="AIRSPEED/MACH INDICATOR">
    		<Select>
      			<Value>
 					(A:AIRSPEED SELECT INDICATED OR TRUE:2, knots) (>L:GAU_STBY_AIRSPEED)

					(L:AMI_PWR, enum) 1 ==
					if{
						(A:INDICATED ALTITUDE, feet) 70000 &gt;
							if{
								(A:AIRSPEED INDICATED, meters per second) (>L:GAU_AIRSPEED_C)
							}
							els{
								(A:AIRSPEED INDICATED, knots) (>L:GAU_AIRSPEED_C)
							}

						(A:AIRSPEED MACH, machs) (>L:GAU_AIRSPEED_MACH)


						(A:GEAR HANDLE POSITION, bool) 0 &gt;
						(A:FLAPS HANDLE PERCENT, Percent) 0 == and
							if{
								300 (>L:GAU_AIRSPEED_INDEX)
								}
						(A:FLAPS HANDLE PERCENT, Percent) 0 &gt;
							if{
								200 (>L:GAU_AIRSPEED_INDEX)
							}
						(A:GEAR HANDLE POSITION, bool) 0 ==
						(A:FLAPS HANDLE PERCENT, Percent) 0 == and
							if{
								(A:AIRSPEED BARBER POLE, knots) (>L:GAU_AIRSPEED_INDEX)
							}
						}
					els{
						0 (>L:GAU_AIRSPEED_C)
						0 (>L:GAU_AIRSPEED_MACH)
						0 (>L:GAU_AIRSPEED_INDEX)
					}
      			</Value>
    		</Select>
		</Element>
		<Element Name="ANGLE OF ATTACK INDICATOR">
    		<Select>
      			<Value>
					(L:AOA_PWR, enum) 1 ==
						if{
							(A:INCIDENCE ALPHA, degrees) (>L:GAU_AOA)
						}
						els{
							0 (>L:GAU_AOA)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="ACCELEROMETER">
    		<Select>
      			<Value>
					(L:ACC_PWR, enum) 1 ==
						if{
							(A:G FORCE, G FORCE) (>L:GAU_G_FORCE)
							(A:MAX G FORCE, G FORCE) (>L:MAX_G_FORCE)
							(A:MIN G FORCE, G FORCE) (>L:MIN_G_FORCE)
						}
						els{
							0 (>L:GAU_G_FORCE)
							0 (>L:MAX_G_FORCE)
							0 (>L:MIN_G_FORCE)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="ILS STEERING BAR">
    		<Select>
      			<Value>
				(L:TACAN_ADI_TCN_ILS_PNL_PWR) 1 ==
				(L:ILS_PWR) 1 == and
					if{
						(A:NAV1 RADIAL ERROR, degrees) 5 * (>L:GAU_ILS_LC)
						(A:NAV1 GLIDE SLOPE ERROR, degrees) 5 * (>L:GAU_ILS_GS)
					}
					els{
						0 (>L:GAU_ILS_LC)
						0 (>L:GAU_ILS_GS)
					}
      			</Value>
    		</Select>
		</Element>
		<Element Name="ATTITUDE DIRECTOR INDICATOR">
    		<Select>
      			<Value>
					(L:ATTD_PWR, enum) 1 ==
						if{
							(L:ADI_REF_SELECT) 0 ==
							(L:ATTD_HDG_REF_PWR) 1 ==
								if{
									(A:ATTITUDE INDICATOR PITCH DEGREES, degrees) (>L:GAU_ATT_PITCH)
									(A:ATTITUDE INDICATOR BANK DEGREES, degrees) (>L:GAU_ATT_BANK)
								}
								els{
									(A:PLANE PITCH DEGREES, degrees) (>L:GAU_ATT_PITCH)
									(A:PLANE BANK DEGREES, degrees) (>L:GAU_ATT_BANK)
								}
							(A:TURN COORDINATOR BALL, Position) (>L:GAU_ATT_BALL)
							(A:DELTA HEADING RATE, RPM) (>L:GAU_ATT_HEADING_RATE)
							(A:ATTITUDE BARS POSITION, degrees) (>L:GAU_ATT_BARS)

							(L:KNOB_FS_STEER_MODE) 0 ==
							(L:KNOB_FS_STEER_MODE) 1 == or
								if{
									(A:AUTOPILOT FLIGHT DIRECTOR BANK, degrees) (L:GAU_ATT_PITCH) - /-/ (>L:GAU_ATT_STR_BANK)

									(A:AUTOPILOT ALTITUDE LOCK, bool) 1 ==
										if{
											(A:AUTOPILOT FLIGHT DIRECTOR PITCH, degrees) (A:ATTITUDE INDICATOR PITCH DEGREES, degrees) -  (>L:GAU_ATT_STR_PITCH)
										}
										els{
											0 (A:PLANE PITCH DEGREES, degrees) 5 / (>L:GAU_ATT_STR_PITCH)
										}
								}

							(L:KNOB_FS_STEER_MODE) 2 ==
							(L:KNOB_FS_STEER_MODE) 3 == or
								if{
									(L:GAU_ILS_LC) (>L:GAU_ATT_STR_BANK)
									(L:GAU_ILS_GS) (>L:GAU_ATT_STR_PITCH)
								}

							(L:KNOB_FS_STEER_MODE) 4 ==
								if{
									-91 (>L:GAU_ATT_STR_BANK)
									30 (>L:GAU_ATT_STR_PITCH)
								}
						}
						els{
							60 (>L:GAU_ATT_PITCH)
							0 (>L:GAU_ATT_BANK)
							0 (>L:GAU_ATT_BALL)
							0 (>L:GAU_ATT_HEADING_RATE)
							0 (>L:GAU_ATT_STR_BANK)
							0 (>L:GAU_ATT_STR_PITCH)
							0 (>L:GAU_ATT_BARS)
						}

					(A:ATTITUDE BARS POSITION, degrees) -57 &gt;
					(A:ATTITUDE BARS POSITION, degrees) -38 &lt; and
						if{ 0 (>L:ADI_BAR_POS) }

					(A:ATTITUDE BARS POSITION, degrees) -38 &gt;
					(A:ATTITUDE BARS POSITION, degrees) -19 &lt; and
						if{ 1 (>L:ADI_BAR_POS) }

					(A:ATTITUDE BARS POSITION, degrees) -19 &gt;
					(A:ATTITUDE BARS POSITION, degrees) -2 &lt; and
						if{ 2 (>L:ADI_BAR_POS) }

					(A:ATTITUDE BARS POSITION, degrees) -2 &gt;
					(A:ATTITUDE BARS POSITION, degrees) 2 &lt; and
						if{ 3 (>L:ADI_BAR_POS) }

					(A:ATTITUDE BARS POSITION, degrees) 2 &gt;
					(A:ATTITUDE BARS POSITION, degrees) 19 &lt; and
						if{ 4 (>L:ADI_BAR_POS) }

					(A:ATTITUDE BARS POSITION, degrees) 19 &gt;
					(A:ATTITUDE BARS POSITION, degrees) 38 &lt; and
						if{ 5 (>L:ADI_BAR_POS) }

					(A:ATTITUDE BARS POSITION, degrees) 38 &gt;
					(A:ATTITUDE BARS POSITION, degrees) 57 &lt; and
						if{ 6 (>L:ADI_BAR_POS) }

					(L:STBY_ATTD_PWR, enum) 1 ==
						if{
							(A:PLANE PITCH DEGREES, degrees) (>L:GAU_STBY_ATT_PITCH)
							(A:PLANE BANK DEGREES, degrees) (>L:GAU_STBY_ATT_BANK)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="HORIZONTAL SITUATION INDICATOR">
    		<Select>
      			<Value>
					(L:HSI_PWR, enum) 1 ==
						if{
							(A:ADF SIGNAL:1,NUMBER) 0 &gt;
							(L:ADF_PWR) 1 == and
								if{
									(A:ADF1 RADIAL, radians) (>L:HSI_PTR1)
								}
								els{
									(A:NAV2 OBS, radians) (>L:HSI_PTR1)
								}

							(A:PLANE HEADING DEGREES GYRO, radians) /-/ (>L:HSI_COMPASS)


							(L:KNOB_FS_STEER_MODE) 0 &gt;
								if{
									(A:AUTOPILOT HEADING LOCK DIR, radians) (>L:HSI_HDG)
								}

							(L:KNOB_FS_STEER_MODE) 0 ==
								if{
									(A:GPS WP BEARING, radians) (>L:HSI_PTR2)
									(A:GPS WP DISTANCE, nmiles) (>L:HSI_RANGE)
									(A:GPS WP BEARING, degrees) (>L:HSI_CRS_SELECT)
									(A:GPS WP BEARING, radians) (>L:HSI_CRS_ALLOW)
									(A:GPS WP BEARING, radians) (>L:HSI_HDG)
									0 (>L:HSI_TO_FROM)
									(A:GPS IS ACTIVE FLIGHT PLAN, bool) 1 ==
									if{
										(A:GPS WP BEARING, degrees) (A:GPS WP DESIRED TRACK, degrees) - 10 * (>L:HSI_DEVIATION)
									}
									els{
										0 (>L:HSI_DEVIATION)
									}
								}
							(L:KNOB_FS_STEER_MODE) 1 ==
								if{
									(A:NAV2 OBS, radians) (>L:HSI_PTR2)
									(A:NAV2 DME, nmiles) (>L:HSI_RANGE)
									(A:NAV2 OBS, degrees) (>L:HSI_CRS_SELECT)
									(A:NAV2 OBS, radians) (>L:HSI_CRS_ALLOW)
									(A:NAV2 TOFROM, enum) /-/ (>L:HSI_TO_FROM)
									(A:NAV2 CDI, Number) (>L:HSI_DEVIATION)
								}
							(L:KNOB_FS_STEER_MODE) 2 ==
								if{
									(A:GPS WP BEARING, radians) (>L:HSI_PTR2)
									(A:GPS WP DISTANCE, nmiles) (>L:HSI_RANGE)
									(A:GPS WP BEARING, degrees)(>L:HSI_CRS_SELECT)
									(A:GPS WP BEARING, radians) (>L:HSI_CRS_ALLOW)
									0 (>L:HSI_TO_FROM)
									(L:GAU_ILS_LC) (>L:HSI_DEVIATION)
								}
							(L:KNOB_FS_STEER_MODE) 3 ==
								if{
									(A:NAV2 OBS, radians) (>L:HSI_PTR2)
									(A:NAV2 DME, nmiles) (>L:HSI_RANGE)
									(A:NAV2 OBS, degrees) (>L:HSI_CRS_SELECT)
									(A:NAV2 OBS, radians) (>L:HSI_CRS_ALLOW)
									0 (>L:HSI_TO_FROM)
									(L:GAU_ILS_LC) (>L:HSI_DEVIATION)
								}

							(L:HSI_PTR1) (A:PLANE HEADING DEGREES GYRO, radians) - (>L:HSI_PTR1)
							(L:HSI_PTR2) (A:PLANE HEADING DEGREES GYRO, radians) - (>L:HSI_PTR2)
							(L:HSI_HDG) (A:PLANE HEADING DEGREES GYRO, radians) - (>L:HSI_HDG)
							(L:HSI_CRS_ALLOW) (A:PLANE HEADING DEGREES GYRO, radians) - (>L:HSI_CRS_ALLOW)
							}
						els{
							0 (>L:HSI_RANGE)
							0 (>L:HSI_PTR1)
							0 (>L:HSI_PTR2)
							0 (>L:HSI_CRS_ALLOW)
							0 (>L:HSI_TO_FROM)
							0 (>L:HSI_HDG)
							0 (>L:HSI_CRS_SELECT)
							0 (>L:HSI_DEVIATION)
							0 (>L:HSI_COMPASS)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="ALTIMETER">
    		<Select>
      			<Value>
					(A:INDICATED ALTITUDE:2, feet) (>L:GAU_STBY_ALTITUDE)
					(A:KOHLSMAN SETTING HG:2, INHG) (>L:GAU_STBY_KOHLSMAN)

					(L:ALTMTR_PWR, enum) 1 ==
						if{
							(A:INDICATED ALTITUDE, feet) 70000 &gt;
							if{
								(A:INDICATED ALTITUDE, meter) (>L:GAU_ALTITUDE)
								(A:INDICATED ALTITUDE, meter) (>L:IND_ALTITUDE)
							}
							els{
								(A:INDICATED ALTITUDE, feet) (>L:GAU_ALTITUDE)
								(A:INDICATED ALTITUDE, feet) (>L:IND_ALTITUDE)
							}

							(A:PRESSURIZATION CABIN ALTITUDE, feet) (>L:GAU_CABINALT)
							(A:KOHLSMAN SETTING HG, INHG) (>L:GAU_KOHLSMAN)
						}
						els{
							0 (>L:GAU_ALTITUDE)
							0 (>L:GAU_CABINALT)
							0 (>L:IND_ALTITUDE)
							0 (>L:GAU_KOHLSMAN)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="VERTICAL VELOCITY INDICATOR">
    		<Select>
      			<Value>
					(L:VSI_PWR, enum) 1 ==
						if{
							(A:VERTICAL SPEED, Feet per Minute) (>L:GAU_VSI)
						}
						els{
							0 (>L:GAU_VSI)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="EIGHT DAY CLOCK">
    		<Select>
      			<Value>
				(L:CLK_PWR, enum) 1 ==
					if{
						0 (>L:CLK_INIT, enum)
						(P:LOCAL TIME, hours) (>L:GAU_CLK_HUR)
						(P:LOCAL TIME, minutes) (>L:GAU_CLK_MIN)
						(P:LOCAL TIME, Seconds) (>L:GAU_CLK_SEC)
					}
					els{
						(L:CLK_INIT, enum) 0 ==
							if{
								1 (>L:CLK_INIT, enum)
								(P:LOCAL TIME, hours) (>L:GAU_CLK_HUR)
								(P:LOCAL TIME, minutes) (>L:GAU_CLK_MIN)
								(P:LOCAL TIME, Seconds) (>L:GAU_CLK_SEC)
							}
							els{
								(L:GAU_CLK_HUR) (>L:GAU_CLK_HUR)
								(L:GAU_CLK_MIN) (>L:GAU_CLK_MIN)
								(L:GAU_CLK_SEC) (>L:GAU_CLK_SEC)
							}
					}
      			</Value>
    		</Select>
		</Element>

		<Element Name="ENGINE TACHOMETERS">
    		<Select>
      			<Value>
					(L:TACH_GAUGE_PWR, enum) 1 ==
						if{
							(L:L_ENG_IND_ACCESS_PWR) 1 ==					
								if{
									(A:TURB ENG N2:1, Percent) (>L:GAU_LENG_RPM)
									(A:TURB ENG N2:1, Percent) (>L:IND_LENG_RPM)
								}
								els{
									0 (>L:GAU_LENG_RPM)
									0 (>L:IND_LENG_RPM)
								}
							(L:R_ENG_IND_ACCESS_PWR) 1 ==
								if{
									(A:TURB ENG N2:2, Percent) (>L:GAU_RENG_RPM)
									(A:TURB ENG N2:2, Percent) (>L:IND_RENG_RPM)
								}
								els{
									0 (>L:GAU_RENG_RPM)
									0 (>L:IND_RENG_RPM)
								}
						}
						els{
							0 (>L:GAU_LENG_RPM)
							0 (>L:IND_LENG_RPM)
							0 (>L:GAU_RENG_RPM)
							0 (>L:IND_RENG_RPM)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="FAN TURBINE INLET TEMPERATURE INDICATORS">
    		<Select>
      			<Value>
					(L:FTIT_GAUGE_PWR, enum) 1 ==
						if{
							(L:L_ENG_IND_ACCESS_PWR) 1 ==					
								if{
									(A:TURB ENG ITT:1, Celsius) (>L:GAU_LENG_ITT)
									(A:TURB ENG ITT:1, Celsius) (>L:IND_LENG_ITT)
								}
								els{
									0 (>L:GAU_LENG_ITT)
									0 (>L:IND_LENG_ITT)
								}
							(L:R_ENG_IND_ACCESS_PWR) 1 ==
								if{
									(A:TURB ENG ITT:2, Celsius) (>L:GAU_RENG_ITT)
									(A:TURB ENG ITT:2, Celsius) (>L:IND_RENG_ITT)
								}
								els{
									0 (>L:GAU_RENG_ITT)
									0 (>L:IND_RENG_ITT)
								}
						}
						els{
							0 (>L:GAU_LENG_ITT)
							0 (>L:GAU_RENG_ITT)
							0 (>L:IND_LENG_ITT)
							0 (>L:IND_RENG_ITT)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="FUEL FLOW INDICATORS">
    		<Select>
      			<Value>
					(L:L_FF_GAUGE_PWR, enum) 1 ==
						if{
							(A:TURB ENG FUEL FLOW PPH:1, Pounds per hour) (>L:GAU_LENG_FF)
							(A:TURB ENG FUEL FLOW PPH:1, Pounds per hour) (>L:IND_LENG_FF)
						}
						els{
							0 (>L:GAU_LENG_FF)
							0 (>L:IND_LENG_FF)
						}

					(L:R_FF_GAUGE_PWR, enum) 1 ==
						if{
							(A:TURB ENG FUEL FLOW PPH:2, Pounds per hour) (>L:GAU_RENG_FF)
							(A:TURB ENG FUEL FLOW PPH:2, Pounds per hour) (>L:IND_RENG_FF)
						}
						els{
							0 (>L:GAU_RENG_FF)
							0 (>L:IND_RENG_FF)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="EXHAUST NOZZLE POSITION INDICATORS">
			<Select>
				<Value>
					(L:ENP_GAUGE_PWR, enum) 1 ==
						if{
							(L:SW1_FS_ENG_CONT_L, enum) 1 ==
							(L:ENG1_AVAIL, bool) 1 == and
							(L:L_IDLE_NOZL_RESET_PWR) 1 == and
								if{
									(A:GENERAL ENG1 THROTTLE LEVER POSITION, Percent) 75 &lt;
										if{
											(A:GENERAL ENG1 THROTTLE LEVER POSITION, Percent) 75 - (>L:ENG1_NOZZLE_TEMP)
											(L:ENG1_NOZZLE_TEMP) -100 * 75 / (>L:ENG1_NOZZLE, enum)
										}
										els{
											(A:TURB ENG AFTERBURNER PCT ACTIVE:1, Percent) (>L:ENG1_NOZZLE, enum)
										}
								}
								els{
									0 (>L:ENG1_NOZZLE, enum)
								}

							(L:SW1_FS_ENG_CONT_R, enum) 1 ==
							(L:ENG2_AVAIL, bool) 1 == and
							(L:R_IDLE_NOZL_RESET_PWR) 1 == and
								if{
									(A:GENERAL ENG2 THROTTLE LEVER POSITION, Percent) 75 &lt;
										if{
											(A:GENERAL ENG2 THROTTLE LEVER POSITION, Percent) 75 - (>L:ENG2_NOZZLE_TEMP)
											(L:ENG2_NOZZLE_TEMP) -100 * 75 / (>L:ENG2_NOZZLE, enum)
										}
										els{
											(A:TURB ENG AFTERBURNER PCT ACTIVE:2, Percent) (>L:ENG2_NOZZLE, enum)
									}
								}
								els{
									0 (>L:ENG2_NOZZLE, enum))
								}
						}
						els{
							0 (>L:ENG1_NOZZLE, enum)
							0 (>L:ENG2_NOZZLE, enum)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="HYDRAULIC PRESSURE INDICATORS">
    		<Select>
      			<Value>
					(A:HYDRAULIC PRESSURE:1, PSI)
					(A:HYDRAULIC PRESSURE:2, PSI) + 2 / (>L:PX_HYD)

					(L:HYDRAULIC_GAUGE_PWR, enum) 1 ==
						if{
							(A:HYDRAULIC PRESSURE:1, PSI) (>L:GAU_LENG_HYD_PRESS)
							(A:HYDRAULIC PRESSURE:2, PSI) (>L:GAU_RENG_HYD_PRESS)
							(L:PX_HYD) (>L:GAU_UTIL_HYD_PRESS)
						}
						els{

							0 (>L:GAU_LENG_HYD_PRESS)
							0 (>L:GAU_RENG_HYD_PRESS)
							0 (>L:GAU_UTIL_HYD_PRESS)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="OIL PRESSURE INDICATORS">
    		<Select>
      			<Value>
					(L:ENG_OIL_PRS_PWR) 1 ==
						if{
							(A:ENG OIL PRESSURE:1, PSI)
							(A:ENG OIL PRESSURE:2, PSI) + 2 / (>L:PX_OIL, enum)

							(L:OIL_PRESS_GAUGE_PWR, enum) 1 ==
								if{
									(A:ENG OIL PRESSURE:1, PSI) (>L:GAU_LENG_OIL_PRESS)
									(A:ENG OIL PRESSURE:2, PSI) (>L:GAU_RENG_OIL_PRESS)
								}
						}
					(L:ENG_OIL_PRS_PWR) 0 ==
						if{
							(L:GAU_LENG_OIL_PRESS) 0 &gt;
								if{
									(L:GAU_LENG_OIL_PRESS) + (L:GAU_LENG_OIL_PRESS) 100 / - (>L:GAU_LENG_OIL_PRESS)
								}
							
							(L:GAU_RENG_OIL_PRESS) 0 &gt;
								if{
									(L:GAU_RENG_OIL_PRESS) + (L:GAU_RENG_OIL_PRESS) 100 / - (>L:GAU_RENG_OIL_PRESS)
								}
							
							(L:PX_OIL, enum) 0 &gt;
								if{
									(L:PX_OIL, enum) + (L:PX_OIL, enum) 100 / - (>L:PX_OIL, enum)
								}
							
						}
					(L:ENG_OIL_PRS_PWR) 0 ==
					(L:OIL_PRESS_GAUGE_PWR, enum) 0 == and
						if{
							0 (>L:GAU_LENG_OIL_PRESS)
							0 (>L:GAU_RENG_OIL_PRESS)
						}
      			</Value>
    		</Select>
		</Element>

		<Element Name="FUEL QUANTITY INDICATOR">
    		<Select>
      			<Value>
					(L:FUEL_GAUGE_PWR, enum) 1 ==
					(L:FUEL_LEVEL_SENSING_UNIT_PWR) 1 == and
					(L:FUEL_LVL_SENS_PWR) 1 == and

						if{
							(L:KNOB_FUEL_BINGO, enum) 1100 * (>L:SETTING BNGO, enum)
								(L:KNOB_FUEL_SELECT) 0 ==
									if{
										6000 (>L:FUEL_INTERNAL, enum)
										6000 (>L:FUEL_TOTAL, enum)
										600 (>L:FUEL_LEFT, enum)
										600 (>L:FUEL_RIGHT, enum)
									}
								(L:KNOB_FUEL_SELECT) 1 ==
									if{
										(L:FUEL_INTERNAL, enum) (>L:FUEL_TOTAL, enum)
										(A:FUEL TANK CENTER2 QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_LEFT, enum)
										(A:FUEL TANK CENTER3 QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_RIGHT, enum)
									}

								(L:KNOB_FUEL_SELECT) 2 ==
									if{
										(L:FUEL_INTERNAL, enum) (>L:FUEL_TOTAL, enum)
										(A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_LEFT, enum)
										(A:FUEL TANK RIGHT MAIN QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_RIGHT, enum)
									}

								(L:KNOB_FUEL_SELECT) 3 ==
									if{
										(L:FUEL_INTERNAL, enum) (>L:FUEL_TOTAL, enum)
										(A:FUEL TANK CENTER QUANTITY, GALLONS)  (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_LEFT, enum)
										0 (>L:FUEL_RIGHT, enum)
									}

								(L:KNOB_FUEL_SELECT) 4 ==
									if{
										(L:FUEL_INTERNAL, enum) (>L:FUEL_TOTAL, enum)
										(A:FUEL TANK LEFT AUX QUANTITY, GALLONS)   (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_LEFT, enum)
										(A:FUEL TANK RIGHT AUX QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_RIGHT, enum)
									}

								(L:KNOB_FUEL_SELECT) 5 ==
									if{
										(L:FUEL_INTERNAL, enum) (>L:FUEL_TOTAL, enum)
										(A:FUEL TANK EXTERNAL1 QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_LEFT, enum)
										0 (>L:FUEL_RIGHT, enum)
									}
								(L:KNOB_FUEL_SELECT) 6 ==
									if{
										(L:FUEL_INTERNAL, enum) (>L:FUEL_TOTAL, enum)
										(A:FUEL TANK LEFT TIP QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_LEFT, enum)
										(A:FUEL TANK RIGHT TIP QUANTITY, GALLONS) (A:FUEL WEIGHT PER GALLON, POUNDS) * (>L:FUEL_RIGHT, enum)
									}

								(L:KNOB_FUEL_SELECT) 0 &gt;
									if{
										(A:FUEL TANK CENTER QUANTITY, GALLONS)
										(A:FUEL TANK CENTER2 QUANTITY, GALLONS) +
										(A:FUEL TANK CENTER3 QUANTITY, GALLONS) +
										(A:FUEL TANK LEFT MAIN QUANTITY, GALLONS) +
										(A:FUEL TANK RIGHT MAIN QUANTITY, GALLONS) +
										(A:FUEL TANK LEFT AUX QUANTITY, GALLONS) +
										(A:FUEL TANK RIGHT AUX QUANTITY, GALLONS) +
										(A:FUEL TANK LEFT TIP QUANTITY, GALLONS) +
										(A:FUEL TANK RIGHT TIP QUANTITY, GALLONS) +
										(A:FUEL TANK EXTARNAL1 QUANTITY, GALLONS) +
										(A:FUEL TANK EXTARNAL2 QUANTITY, GALLONS) +
										(A:FUEL WEIGHT PER GALLON, POUNDS) *
										(>L:FUEL_INTERNAL, enum)
									}
						}
						els{
							0 (>L:FUEL_INTERNAL, enum)
							0 (>L:FUEL_TOTAL, enum)
							0 (>L:FUEL_LEFT, enum)
							0 (>L:FUEL_RIGHT, enum)
							0 (>L:SETTING BNGO, enum)
						}

      			</Value>
    		</Select>
		</Element>
		<Element Name="PITCH RATIO INDICATOR">
    		<Select>
      			<Value>
					(L:PRAD_GAUGE_PWR, enum) 1 ==
						if{
							(A:HYDRAULIC PRESSURE:1, PSI) 2000 &lt;
							(A:HYDRAULIC PRESSURE:2, PSI) 2000 &lt; and
							(L:SW1_FS_PITCH_RATIO, enum) 0 == or
								if{
									40 (>L:NEEDLE_PITCH_RATIO)
								}
								els{
									(A:AIRSPEED MACH, mach) 100 * (>L:NEEDLE_PITCH_RATIO)
								}
						}
						els{
							0 (>L:NEEDLE_PITCH_RATIO)
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="STANDBY MAGNETIC COMPASS">
    		<Select>
      			<Value>
					(A:WISKEY COMPASS INDICATION DEGREES, degrees) (>L:GAU_STBY_COMPASS)
      			</Value>
    		</Select>
		</Element>
		<Element Name="OXY GAUGE">
    		<Select>
      			<Value>
					(L:OXY_GAUGE_PWR, enum) 1 ==
					(L:SW2_FS_OXY_SUPPLY, enum) 1 == and
						if{
							4000 (>L:GAU_OXY_QTY)
						}
						els{
							0 (>L:GAU_OXY_QTY)
						}
      			</Value>
    		</Select>
		</Element>
	</Element>

	<Element Name="LIGHT">
		<Element Name="WARN CAUT LTS">
			<Select>
				<Value>
					(L:CAUT_LT_CON_MA_CAUT_RESET_PWR) 1 ==
						if{ 1 (>L:LIGHT_FLICKER, enum) }
						els{ 0 (>L:LIGHT_FLICKER, enum) }

					(L:WARN_CAUT_LTS) 0 ==
						if{ (L:AUTO_XMFR_VOLTAGE) 14 * 115 / (>L:LTS_BUS_VOLTAGE) }

					(L:WARN_CAUT_LTS) 1 ==
						els{ (L:AUTO_XMFR_VOLTAGE) 28 * 115 / (>L:LTS_BUS_VOLTAGE) }
				</Value>
			</Select>
		</Element>
		<Element Name="LT INIT TEST">
			<Element>
				<Select>
					<Value>
						(L:CAUT_LT_CON_MA_CAUT_RESET_PWR) 1 ==
						(L:LT-TIME, Seconds) 0 == and
							if{
								(P:LOCAL TIME, Seconds) (>L:LT-TIME, Seconds)
								1 (>L:SW1_FS_INT_LT_TEST)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:CAUT_LT_CON_MA_CAUT_RESET_PWR) 1 ==
						(L:LT-TIME, Seconds) 0 &gt; and
							if{
								0 (>L:LT-TIME, Seconds)
								0 (>L:SW1_FS_INT_LT_TEST)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:CAUT_LT_CON_MA_CAUT_RESET_PWR) 1 ==
						(P:LOCAL TIME, Seconds) (L:LT-TIME, Seconds) - 2 &gt; and
							if{
								0 (>L:SW1_FS_INT_LT_TEST)
							}
					</Value>
				</Select>
			</Element>
		</Element>

		<Element Name="INST PANEL">
			<Element Name="AIR INTERCEPT THREAT">
				<Element>
					<Select>
						<Value>
							(L:RWR_AC_PWR) 1 ==
							(L:SW2_FS_EW_ICS, enum) 0 ! and
							(L:SW1_FS_TEWS_ICS) 1 == and
							(L:SW1_FS_TEWS_EWWS_PWR) 1 == and
							(L:RDR_TGT_DIS) 10 &lt;  and
							(L:TGT_ALTITUDE) 1000 &gt; and
								if{ 1 (>L:INTERCEPT, enum)  }
								els{ 0 (>L:INTERCEPT, enum) }
						</Value>
					</Select>
				</Element>
				<Element>
					<Select>
						<Value>
							(L:RWR_AC_PWR) 1 ==
							(L:SW2_FS_EW_ICS, enum) 0 ! and
							(L:SW1_FS_TEWS_ICS) 1 == and
							(L:SW1_FS_TEWS_EWWS_PWR) 1 == and
							(L:RDR_TGT_DIS) 5 &lt;  and
							(L:TGT_ALTITUDE) 1000 &gt; and
								if{ 1 (>L:INTERCEPT_5, enum)  }
								els{ 0 (>L:INTERCEPT_5, enum) }
						</Value>
					</Select>
				</Element>
				<Element>
					<Select>
						<Value>
							(L:SW1_FS_TEWS_ICS, enum) 1 ==
							(L:INTERCEPT, enum) 1 == and
							(L:SW2_FS_EW_ICS, enum) 0 != and
							(L:SW1_FS_TEWS_ICS) 1 == and
							(L:SW1_FS_TEWS_EWWS_PWR) 1 == and
							(L:LIGHT_FLICKER, enum) 1 == and
							(L:FS_LIGHT_TEST, enum)	1 == or
								if{ 1 (>L:LT_FS_AI_WARN, enum)  }
								els{ 0 (>L:LT_FS_AI_WARN, enum) }
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="SAM WARNING">
				<Element>
					<Select>
						<Value>
							(L:RWR_AC_PWR) 1 ==
							(L:RDR_TGT_DIS) 10 &lt; and
							(L:TGT_ALTITUDE) 1000 &lt; and
								if{ 1 (>L:SAM_WARN)  }
								els{ 0 (>L:SAM_WARN) }
						</Value>
					</Select>
				</Element>
				<Element>
					<Select>
						<Value>
							(L:SW1_FS_TEWS_ICS, enum) 1 ==
							(L:INTERCEPT, enum) 1 == and
							(L:SW2_FS_EW_ICS, enum) 0 != and
							(L:SW1_FS_TEWS_ICS) 1 == and
							(L:SW1_FS_TEWS_EWWS_PWR) 1 == and
							(L:SAM_WARN) 1 == and
							(L:LIGHT_FLICKER, enum) 1 == and
							(L:FS_LIGHT_TEST, enum)	1 == or
								if{ 1 (>L:LT_FS_SAM_WARN, enum)  }
								els{ 0 (>L:LT_FS_SAM_WARN, enum) }
						</Value>
					</Select>
				</Element>
			</Element>

			<Element Name="CANOPY UNLOCKED WARN">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:CANOPY OPEN, Percent) 0 != and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_CAN_UNLOCKED)  }
							els{ 0 (>L:LT_FS_CAN_UNLOCKED) }
					</Value>
				</Select>
			</Element>

			<Element Name="TEWS INGICATOR">
				<Element Name="PROGRAM ADVISORY ">
					<Select>
						<Value>
							(L:LIGHT_FLICKER, enum) 1 ==
							(L:FS_LIGHT_TEST, enum)	1 == or
								if{ 1 (>L:LT_FS_PROGRAM, enum)  }
								els{ 0 (>L:LT_FS_PROGRAM, enum) }
						</Value>
					</Select>
				</Element>
				<Element Name="MINIMUM CAUTION">
					<Select>
						<Value>
							(L:LIGHT_FLICKER, enum) 1 ==
							(L:CHAFF_COUNT) 15 &lt; and
							(L:FLARE_COUNT) 15 &lt; and
							(L:FS_LIGHT_TEST, enum)	1 == or
								if{ 1 (>L:LT_FS_MINIMUM, enum) }
								els{ 0 (>L:LT_FS_MINIMUM, enum) }
						</Value>
					</Select>
				</Element>
				<Element Name="CHAFF RELEASE CAUTION">
					<Select>
						<Value>
							(L:LIGHT_FLICKER, enum) 1 ==
							(L:CHAFF_COUNT) 15 &lt; and
							(L:FS_LIGHT_TEST, enum)	1 == or
								if{ 1 (>L:LT_FS_CHAFF, enum) }
								els{ 0 (>L:LT_FS_CHAFF, enum) }
						</Value>
					</Select>
				</Element>
				<Element Name="FLARE OUT CAUTION">
					<Select>
						<Value>
							(L:LIGHT_FLICKER, enum) 1 ==
							(L:FLARE_COUNT) 15 &lt; and
							(L:FS_LIGHT_TEST, enum)	1 == or
								if{ 1 (>L:LT_FS_FLARE, enum) }
								els{ 0 (>L:LT_FS_FLARE, enum) }
						</Value>
					</Select>
				</Element>
				<Element Name="SPARE">
					<Select>
						<Value>
							(L:LIGHT_FLICKER, enum) 1 ==
							(L:DUMMY, enum) 1 == and
							(L:FS_LIGHT_TEST, enum)	1 == or
								if{ 1 (>L:LT_FS_SPARE, enum)  }
								els{ 0 (>L:LT_FS_SPARE, enum) }
						</Value>
					</Select>
				</Element>
			</Element>

			<Element Name="MASTER CAUTION ENGINE">
				<Element Name="BUTTON">
					<Select>
						<Value>
							(L:BTN_FS_MASTER_CAUTION_EXEC, enum) 1 ==
							(L:FS_MASTER_CAUTION_PRESSED, enum) 0 == and
								if{
									0 (>L:BTN_FS_MASTER_CAUTION_EXEC, enum)
									1 (>L:FS_MASTER_CAUTION_PRESSED, enum)
								}

							(L:BTN_FS_MASTER_CAUTION_EXEC, enum) 1 ==
							(L:FS_MASTER_CAUTION_PRESSED, enum) 1 == and
								if{
									0 (>L:BTN_FS_MASTER_CAUTION_EXEC, enum)
									0 (>L:FS_MASTER_CAUTION_PRESSED, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="BASE">
					<Select>
						<Value>
							(L:LT_FS_ANTI_SKID, enum) 1 ==

							(L:LT_FS_LEEC, enum) 1 == or
							(L:LT_FS_REEC, enum) 1 == or

							(L:LT_FS_LBLEED, enum) 1 == or
							(L:LT_FS_RBLEED, enum) 1 == or

							(L:LT_FS_LBST_PUMP, enum) 1 == or
							(L:LT_FS_RBST_PUMP, enum) 1 == or

							(L:LT_FS_BST_SYS_MAL, enum) 1 == or

							(L:LT_FS_FUEL_HOT, enum) 1 == or
							(L:LT_FS_TOT_TEMP, enum) 1 == or

							(L:LT_FS_IFF, enum) 1 == or
							(L:LT_FS_AV_BIT, enum) 1 == or

							(L:LT_FS_LGEN, enum) 1 == or
							(L:LT_FS_RGEN, enum) 1 == or

							(L:LT_FS_HYD, enum) 1 == or
							(L:LT_FS_OIL_PRESS, enum) 1 == or

							(L:LT_FS_FUEL_LOW, enum) 1 == or

							(L:LT_FS_OXYGEN, enum) 1 == or
							(L:LT_FS_ECS, enum) 1 == or
							(L:FS_MASTER_CAUTION_PRESSED, enum) 0 == and

								if{
									1 (>L:FS_MASTER_CAUTION, enum)
								}
								els{
									0 (>L:FS_MASTER_CAUTION, enum)
								}
						</Value>
					</Select>
				</Element>
				<Element Name="LT">
					<Select>
						<Value>
							(L:LIGHT_FLICKER, enum) 1 ==
							(L:FS_MASTER_CAUTION, enum) 1 == and
							(P:ABSOLUTE TIME, Number) 1 % 0.5 &lt; and
								if{
									1 (>L:LT_FS_MASTER_CAUT, enum)
								}
								els{
									0 (>L:LT_FS_MASTER_CAUT, enum)
								}
						</Value>
					</Select>
				</Element>
			</Element>

			<Element Name="ACS LOCKED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:HUD_MASTER_MODE, enum) 2 == and
						(L:LEAD_COM_GYRO_PWR) 1 == and
						(L:RLST, bool) and
						(L:GACQ SWITCH, bool) and
						(L:BGOH, bool) and
							if{ 1 (>L:LT_FS_LOCK, enum)  }
							els{ 0 (>L:LT_FS_LOCK, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="FIRE WARNING">
				<Element Name="AMAD FIRE WARN">
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:AMAD_FIRE_DET_SYS_PWR) 1 == and
								(L:AMAD_FIRE, bool) 1 == and
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 == and
								(L:FS_LIGHT_TEST, enum)	1 == or
									if{ 1 (>L:LT_FS_AMAD_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 == and
									if{ 1 (>L:LT_FS_AMAD_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 != and
								(L:AMAD_FIRE, enum) 0 == and
								(L:FS_LIGHT_TEST, enum)	0 == and
									if{ 0 (>L:LT_FS_AMAD_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
				</Element>

				<Element Name="L BURN THRU WARN">
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:INT_COMM_FTIT_WARN_PWR) 1 == and
								(A:TURB ENG ITT:1, Celsius) 960 &gt; and
									if{ 1 (>L:LT_FS_LENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:INT_COMM_FTIT_WARN_PWR) 1 == and
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 == and
								(L:FS_LIGHT_TEST, enum)	1 == or
									if{ 1 (>L:LT_FS_LENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>

					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 != and
								(A:TURB ENG ITT:1, Celsius) 960 &lt; and
								(L:FS_LIGHT_TEST, enum)	0 == and
									if{ 0 (>L:LT_FS_LENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 0 ==
								(L:INT_COMM_FTIT_WARN_PWR) 0 == or
									if{ 0 (>L:LT_FS_LENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>
				</Element>
				<Element Name="R BURN THRU WARN">
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:INT_COMM_FTIT_WARN_PWR) 1 == and
								(A:TURB ENG ITT:2, Celsius) 960 &gt; and
									if{ 1 (>L:LT_FS_RENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:INT_COMM_FTIT_WARN_PWR) 1 == and
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 == and
								(L:FS_LIGHT_TEST, enum)	1 == or
									if{ 1 (>L:LT_FS_RENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>

					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 != and
								(A:TURB ENG ITT:2, Celsius) 960 &lt; and
								(L:FS_LIGHT_TEST, enum)	0 == and
									if{ 0 (>L:LT_FS_RENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 0 ==
								(L:INT_COMM_FTIT_WARN_PWR) 0 == or
									if{ 0 (>L:LT_RS_LENG_WARN, enum)  }
							</Value>
						</Select>
					</Element>
				</Element>

				<Element Name="L ENG FIRE WARN">
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:ENG_FIRE_OVHT_DET_SYS_PWR) 1 == and
								(L:L_ENG_FIRE, enum) 1 == and
									if{ 1 (>L:LT_FS_LENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 == and
								(L:FS_LIGHT_TEST, enum)	1 == or
									if{ 1 (>L:LT_FS_LENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>

					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 != and
								(L:L_ENG_FIRE, enum) 0 == and
								(L:FS_LIGHT_TEST, enum)	0 == and
									if{ 0 (>L:LT_FS_LENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 0 ==
									if{ 0 (>L:LT_FS_LENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
				</Element>
				<Element Name="R ENG FIRE WARN">
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:ENG_FIRE_OVHT_DET_SYS_PWR) 1 == and
								(L:R_ENG_FIRE, enum) 1 == and
									if{ 1 (>L:LT_FS_RENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 == and
								(L:ENG_FIRE_OVHT_DET_SYS_PWR) 1 == and
								(L:FS_LIGHT_TEST, enum)	1 == or
									if{ 1 (>L:LT_FS_RENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>

					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 1 ==
								(L:SW2_FS_FIRE_DISCHARGE, enum) 2 != and
								(L:R_ENG_FIRE, enum) 0 == and
								(L:FS_LIGHT_TEST, enum)	0 == and
									if{ 0 (>L:LT_FS_RENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
					<Element>
						<Select>
							<Value>
								(L:LIGHT_FLICKER, enum) 0 ==
								(L:ENG_FIRE_OVHT_DET_SYS_PWR) 0 == or
									if{ 0 (>L:LT_FS_RENG_FIRE, enum)  }
							</Value>
						</Select>
					</Element>
				</Element>
			</Element>
		</Element>
		<Element Name="BUILT IN TEST LAMPS">
			<Element Name="L PMP">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:L_BST_PUMP_PWR) 0 == and
							if{ 1 (>L:LT_FS_BIT_L_PUMP, enum)  }
							els{ 0 (>L:LT_FS_BIT_L_PUMP, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="R PMP">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:R_BST_PUMP_PWR) 0 == and
							if{ 1 (>L:LT_FS_BIT_R_PUMP, enum)  }
							els{ 0 (>L:LT_FS_BIT_R_PUMP, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="UTL A">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:HYDRAULIC PRESSURE:1, PSI) 1000 &lt; and
							if{ 1 (>L:LT_FS_BIT_UTL_A, enum)  }
							els{ 0 (>L:LT_FS_BIT_UTL_A, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="UTL B">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:HYDRAULIC PRESSURE:2, PSI) 1000 &lt; and
							if{ 1 (>L:LT_FS_BIT_UTL_B, enum)  }
							els{ 0 (>L:LT_FS_BIT_UTL_B, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="PC1 A">
				<Select>
					<Value>
					(L:LIGHT_FLICKER, enum) 1 ==
					(A:HYDRAULIC PRESSURE:1, PSI) 2000 &lt; and
						if{ 1 (>L:LT_FS_PC1_A, enum)  }
						els{ 0 (>L:LT_FS_PC1_A, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="PC1 B">
				<Select>
					<Value>
					(L:LIGHT_FLICKER, enum) 1 ==
					(A:HYDRAULIC PRESSURE:1, PSI) 2000 &lt; and
						if{ 1 (>L:LT_FS_PC1_B, enum)  }
						els{ 0 (>L:LT_FS_PC1_B, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="PC2 A">
				<Select>
					<Value>
					(L:LIGHT_FLICKER, enum) 1 ==
					(A:HYDRAULIC PRESSURE:2, PSI) 2000 &lt; and
						if{ 1 (>L:LT_FS_PC2_B, enum)  }
						els{ 0 (>L:LT_FS_PC2_B, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="PC2 B">
				<Select>
					<Value>
					(L:LIGHT_FLICKER, enum) 1 ==
					(A:HYDRAULIC PRESSURE:2, PSI) 2000 &lt; and
						if{ 1 (>L:LT_FS_PC2_B, enum)  }
						els{ 0 (>L:LT_FS_PC2_B, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="TACTICAL INFORMATION SYSTEM (TIS)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:PARTIAL_SYS_TIS, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_TIS, enum)  }
							els{ 0 (>L:LT_FS_BIT_TIS, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="RADAR WARNING RECEIVER (RWR)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:RWR_DC_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_RWR, enum)  }
							els{ 0 (>L:LT_FS_BIT_RWR, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="MULTI-PURPOSE COLOR DISPLAY (MPCD)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:MPCD_DC_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_MPCD, enum)  }
							els{ 0 (>L:LT_FS_BIT_MPCD, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="CENTRAL COMPUTER (CC)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:CCC_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_CC, enum)  }
							els{ 0 (>L:LT_FS_BIT_CC, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="IFF REPLY EVALUATOR, INTERROGATOR (AAI)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:IFF_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_AAI, enum)  }
							els{ 0 (>L:LT_FS_BIT_AAI, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="RADAR (RDR)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:RDR_LVPS_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_RDR, enum)  }
							els{ 0 (>L:LT_FS_BIT_RDR, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="HEAD UP DISPLAY (HUD)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:HUD_DC_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_HUD, enum)  }
							els{ 0 (>L:LT_FS_BIT_HUD, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="COUNTERMEASURES DISPENSER (CMD)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:PARTIAL_SYS_CMD, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_CMD, enum)  }
							els{ 0 (>L:LT_FS_BIT_CMD, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="ELECTRIC WAFARE WARNING SET (EWW)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:EWWSS_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_EWW, enum)  }
							els{ 0 (>L:LT_FS_BIT_EWW, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="VERTICAL SITUATION DISPLAY (VSD)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:VSD_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_VSD, enum)  }
							els{ 0 (>L:LT_FS_BIT_VSD, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="AIR DATA COMPUTER (ADC)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ADC_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_ADC, enum)  }
							els{ 0 (>L:LT_FS_BIT_ADC, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="IFF TRANSPONDER and CONTROL PANEL (IFF)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:IFF_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_IFF, enum)  }
							els{ 0 (>L:LT_FS_BIT_IFF, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="SPARE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:BIT_DUMMY, enum) 1 ==	AND
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_SPARE, enum)  }
							els{ 0 (>L:LT_FS_BIT_SPARE, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="LEAD COMPUTER GYRO (LCG)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LEAD_COM_GYRO_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_LCG, enum)  }
							els{ 0 (>L:LT_FS_BIT_LCG, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="IFF REPLY EVALUATOR, INTERROGATOR (M/4)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:IFF_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_M4, enum)  }
							els{ 0 (>L:LT_FS_BIT_M4, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="INTERNAL COUNTERMEASURE SET (ICS)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ICS_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_ICS, enum)  }
							els{ 0 (>L:LT_FS_BIT_ICS, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="SPARE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:BIT_DUMMY, enum) 1 ==	AND
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_SPARE, enum)  }
							els{ 0 (>L:LT_FS_BIT_SPARE, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="PROGRAMABLE ARMAMENT CONTROL SYSTEM (PACS)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ARM_BUS_CONT_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_PACS, enum)  }
							els{ 0 (>L:LT_FS_BIT_PACS, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="INTERFERENCE BLANKER SET (IBS)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:INTR_BLANER_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_IBS, enum)  }
							els{ 0 (>L:LT_FS_BIT_IBS, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="INTERNAL NAVIGATION SYSTEM (INS)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:INTRL_NAV_SET_MEAS_UNIT_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_INS, enum)  }
							els{ 0 (>L:LT_FS_BIT_INS, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="HORIZONAL SITUATION INDICATOR (HSI)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:HSI_IND_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_HSI, enum)  }
							els{ 0 (>L:LT_FS_BIT_HSI, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="AIR INTERCEPT MISSILE (AIM)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ARM_BUS_CONT_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_AIM, enum)  }
							els{ 0 (>L:LT_FS_BIT_AIM, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="AUTOMATIC DIRECTION FINDER (ADF)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ADF_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_ADF, enum)  }
							els{ 0 (>L:LT_FS_BIT_ADF, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="SPARE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:BIT_DUMMY, enum) 1 ==	AND
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_SPARE, enum)  }
							els{ 0 (>L:LT_FS_BIT_SPARE, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="R1 (COMM)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:UHF_RCVR_XMTR_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_COMM, enum)  }
							els{ 0 (>L:LT_FS_BIT_COMM, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="JOINT TACTICAL INFORMATION DISPLAY SYSTEM (JTIDS)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:PARTIAL_SYS_JTIDS, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_JTIDS, enum)  }
							els{ 0 (>L:LT_FS_BIT_JTIDS, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="ATTITUDE and HEADING REFERENCE SYSTEM (AHR)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ATTD_HDG_REF_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_AHR, enum)  }
							els{ 0 (>L:LT_FS_BIT_AHR, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="TACAN (TCN)">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:TACAN_RCVR_XMTR_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BIT_TCN, enum)  }
							els{ 0 (>L:LT_FS_BIT_TCN, enum) }
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="ANNUCATOR PANEL">
			<Element Name="SPEED BRAKE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:SPOILERS HANDLE POSITION, bool) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_SPD_BRK, enum)  }
							els{ 0 (>L:LT_FS_SPD_BRK, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="RUDDER LIMITER">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:RUD_LMT, bool) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_RUDR_LMTR, enum)  }
							els{ 0 (>L:LT_FS_RUDR_LMTR, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="EMER BST PMP SYS LOGIC MALF">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:BST_SYS, bool) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BST_SYS_MAL, enum)  }
							els{ 0 (>L:LT_FS_BST_SYS_MAL, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="INLET TEMP HI">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:TOT_TEMP, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_TOT_TEMP, enum)  }
							els{ 0 (>L:LT_FS_TOT_TEMP, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="L BST PUMP FAILURE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:L_BST_PUMP_ON) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_LBST_PUMP, enum)  }
							els{ 0 (>L:LT_FS_LBST_PUMP, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="L INLET CONTOROLLER FAILURE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LINLET_ENABLED, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_L_INLET, enum)  }
							els{ 0 (>L:LT_FS_L_INLET, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="IFF NOT RESPONDING">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:IFF_MAIN_PWR) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_IFF, enum)  }
							els{ 0 (>L:LT_FS_IFF, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="L GEN FAIURE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LGEN_AVAIL, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_LGEN, enum)  }
							els{ 0 (>L:LT_FS_LGEN, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="HYDRAULICS FAILURE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:PX_HYD, enum) 2500 &lt; and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_HYD, enum)  }
							els{ 0 (>L:LT_FS_HYD, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="PITCH RATIO INCORRECT">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:PITCH_RATIO_RDY, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_PITCH_RATIO, enum)  }
							els{ 0 (>L:LT_FS_PITCH_RATIO, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="SPARE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:DUMMY, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_DUMMY, enum)  }
							els{ 0 (>L:LT_FS_DUMMY, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="CAS YAW DISENGAGED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:CAS_YAW_RDY, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_CAS_YAW, enum)  }
							els{ 0 (>L:LT_FS_CAS_YAW, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="L BLEED AIR LEAK">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:TURB ENG BLEED AIR:1, PSI) 65 &lt; and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_LBLEED, enum)  }
							els{ 0 (>L:LT_FS_LBLEED, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="FUEL LOW">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:FUEL_LOW_WARN, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_FUEL_LOW, enum)  }
							els{ 0 (>L:LT_FS_FUEL_LOW, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="ECS LOW FLOW">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ECS_MASTER) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_ECS, enum)  }
							els{ 0 (>L:LT_FS_ECS, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="ENG FUEL INLET HOT">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:FUEL_TEMP, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_FUEL_HOT, enum)  }
							els{ 0 (>L:LT_FS_FUEL_HOT, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="UNREKIABLE ATTITUDE SOURCE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ATT_CAUT) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_ATTTUDE, enum)  }
							els{ 0 (>L:LT_FS_ATTTUDE, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="R BST PUMP FAILURE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:R_BST_PUMP_ON) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_RBST_PUMP, enum)  }
							els{ 0 (>L:LT_FS_RBST_PUMP, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="R INLET CONTOROLLER FAILURE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:RINLET_ENABLED, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_R_INLET, enum)  }
							els{ 0 (>L:LT_FS_R_INLET, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="AV BUILT IN TEST CAUTION">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:AVIONICS MASTER SWITCH, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_AV_BIT, enum)  }
							els{ 0 (>L:LT_FS_AV_BIT, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="R GEN FAIURE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:RGEN_AVAIL, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_RGEN, enum)  }
							els{ 0 (>L:LT_FS_RGEN, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="OIL PLESS LOW">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:PX_OIL, enum) 45 &lt; and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_OIL_PRESS, enumM)  }
							els{ 0 (>L:LT_FS_OIL_PRESS, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="ROLL RATIO INCORRECT">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ROLL_RATIO_RDY, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_ROOL_RATIO, enum)  }
							els{ 0 (>L:LT_FS_ROOL_RATIO, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="L EEC FAILED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LEEC_ENABLED, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_LEEC, enum)  }
							els{ 0 (>L:LT_FS_LEEC, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="CAS ROLL DISENGAGED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:CAS_ROLL_RDY, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_CAS_ROOL, enum)  }
							els{ 0 (>L:LT_FS_CAS_ROOL, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="R BLEED AIR LEAK">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:TURB ENG BLEED AIR:2, PSI) 65 &lt; and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_RBLEED, enum)  }
							els{ 0 (>L:LT_FS_RBLEED, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="BINGO FUEL">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:FUEL_INTERNAL, enum) (L:SETTING BNGO) &lt; and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_BINGO_FUEL, enum)  }
							els{ 0 (>L:LT_FS_BINGO_FUEL, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="HOOK UNLOCKED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:TAILHOOK POSITION, Percent)  NEAR 100 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_HOOK, enum)  }
							els{ 0 (>L:LT_FS_HOOK, enum) }
					</Value>
				</Select>
			</Element>

			<Element Name="JFS ACCUM PRESSURE LOW">
				<Select>
					<Value>
						(L:JFS_ACCUM_1) 7000 &lt;
						(L:JFS_ACCUM_2) 7000 &lt; or
						(L:FS_LIGHT_TEST, enum)	1 == or
						(L:LIGHT_FLICKER, enum) 1 == and
							if{ 1 (>L:LT_FS_JFS_LOW, enum) }
							els{ 0 (>L:LT_FS_JFS_LOW, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="EMER BOOST PUMP SUPPLYING">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:EMER_BST_ON, bool) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_EMER_BST_ON, enum)  }
							els{ 0 (>L:LT_FS_EMER_BST_ON, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="INLET ICE">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:INLET_ICE, bool) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_INLET_ICE, enum) }
							els{ 0 (>L:LT_FS_INLET_ICE, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="ANTI SKID OFF">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:ANTI_SKID_DISABLE, bool) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_ANTI_SKID, enum)  }
							els{ 0 (>L:LT_FS_ANTI_SKID, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="R EEC FAILED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:REEC_ENABLED, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_REEC, enum)  }
							els{ 0 (>L:LT_FS_REEC, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="CAS PITCH DISENGAGED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:CAS_PITCH_RDY, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_CAS_PITCH, enum)  }
							els{ 0 (>L:LT_FS_CAS_PITCH, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="WINDSHLD HOT">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:WINDSH_HOT, bool) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_WINDSHLD_HOT, enum)  }
							els{ 0 (>L:LT_FS_WINDSHLD_HOT, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="OXY LOW">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:GAU_OXY_QTY) 2000 &lt; and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_OXYGEN, enum)  }
							els{ 0 (>L:LT_FS_OXYGEN, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="AFCS DISENGADED">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(A:AUTOPILOT MASTER, bool) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_FLT_CONTR, enum)  }
							els{ 0 (>L:LT_FS_FLT_CONTR, enum) }
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="INTERIOR LIGHT">
<!--			<Element Name="L/R CONSOLE / INST (PANEL LIGHT [LIGHT LANDING])">
				<Select>
					<Value>
						(L:KNOB_FS_INT_LT_L_CONSOLE) 1 &gt;
						(L:KNOB_FS_INT_LT_R_CONSOLE) 1 &gt; or
						(L:KNOB_FS_INT_LT_INST_AUX) 1 &gt; or
						(L:KNOB_FS_INT_LT_INST_FLT) 1 &gt; or
						(L:KNOB_FS_INT_LT_INST_ENG) 1 &gt; or
						(L:INTERIOR_LTS_PWR) 1 == and
							if{
								(A:LIGHT LANDING, bool) 0 ==
								if{
									(>K:LANDING_LIGHTS_TOGGLE)
								}
							}
							els{
								(A:LIGHT LANDING, bool) 1 ==
								if{
									(>K:LANDING_LIGHTS_TOGGLE)
								}
							}
					</Value>
				</Select>
			</Element> -->
			<Element Name="LIGHT TEST">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:SW1_FS_INT_LT_TEST) 1 == and
						(L:INT_LTS_TEST_PWR) 1 == and
							if{ 1 (>L:FS_LIGHT_TEST, enum) }
							els{ 0 (>L:FS_LIGHT_TEST, enum) }
					</Value>
				</Select>
			</Element>
  			<Element Name="STORM FLOOD (CABIN LIGHT)" >
				<Select>
					<Value>
						(L:STORM_FLOOD_LT_PWR) 1 ==
						(L:KNOB_FS_INT_LT_STORM) 1 &gt; and
							if{
								(A:LIGHT CABIN, bool) 0 ==
								if{
									(>K:TOGGLE_CABIN_LIGHTS)
								}
							}
							els{
								(A:LIGHT CABIN, bool) 1 ==
								if{
									(>K:TOGGLE_CABIN_LIGHTS)
								}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="WARNING CAUTION">
				<Select>
					<Value>
						(L:KNOB_FS_INT_LT_CAUTION) (>L:WARN_CAUT_LTS)
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="EXTERIOR LIGHT">
<!--  			<Element Name="LANDING / TAXI" >
				<Select>
					<Value>
						(L:LANDING_TAXY_LT_CONT_PWR) 1 ==
						(L:SW2_FS_MISC_LANDING_TAXI, enum) 1 ! and
						(A:GEAR CENTER POSITION, Percent) 100 == and
							if{
								(A:LIGHT TAXI, bool) 0 ==
								if{
									(>K:TOGGLE_TAXI_LIGHTS)
								}
							}
							els{
								(A:LIGHT TAXI, bool) 1 ==
								if{
									(>K:TOGGLE_TAXI_LIGHTS)
								}
							}

						(A:GEAR CENTER POSITION, Percent) 100 !=
							if{
								0 (>L:LIGHT_TAXI, bool)
							}
					</Value>
				</Select>
			</Element> -->
<!-- 			<Element Name="FORMATION (INOP)" >
				<Select>
					<Value>
						(L:FORM_LT_AVIONICS_DIM_CONT_PWR) 1 ==
						(L:KNOB_FS_LIGHT_FORM) 1 &gt; and
							if{
								(L:LIGHT FORM, bool) 0 ==
								if{
									1 (>L:LIGHT FORM, bool)
								}
							}
							els{
								(L:LIGHT FORM, bool) 1 ==
								if{
									0 (>L:LIGHT FORM, bool)
								}
							}
					</Value>
				</Select>
			</Element> -->
<!-- 			<Element Name="ANTI COLLISION (BEACON)" >
				<Select>
					<Value>
						(L:PSN_ANTI_COLLISION_LT_CONT_PWR) 1 ==
						(L:KNOB_FS_LIGHT_FORM) 1 &gt; and
							if{
								(A:LIGHT BEACON, bool) 0 ==
								if{
									(>K:TOGGLE_BEACON_LIGHTS)
								}
							}
							els{
								(A:LIGHT BEACON, bool) 0 ==
								if{
									(>K:TOGGLE_BEACON_LIGHTS)
								}
							}
					</Value>
				</Select>
			</Element> -->
<!--  			<Element Name="POSITION (NAVIGATION)" >
				<Select>
					<Value>
						(L:PSN_ANTI_COLLISION_LT_CONT_PWR) 1 ==
						(L:KNOB_FS_LIGHT_FORM) 1 &gt; and
							if{
								(L:LIGHT NAV, bool) 0 ==
								if{
									(>K:TOGGLE_NAV_LIGHTS)
								}
							}
							els{
								(L:LIGHT NAV, bool) 1 ==
								if{
									(>K:TOGGLE_NAV_LIGHTS)
								}
							}
					</Value>
				</Select>
			</Element>
		</Element> -->
		</Element>
		<Element Name="AVIONICS MODE LIGHTS">
			<Element Name="A/G">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:HUD_MASTER_MODE, enum) 3 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_ATOG, enum)  }
							els{ 0 (>L:LT_FS_ATOG, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="NAV">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:HUD_MASTER_MODE, enum) 0 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_ADI, enum)  }
							els{ 0 (>L:LT_FS_ADI, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="VI">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:HUD_MASTER_MODE, enum) 1 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_VI, enum)  }
							els{ 0 (>L:LT_FS_VI, enum) }
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="BEACON LIGHTS">
			<Select>
				<Value>
					(L:LIGHT_FLICKER, enum) 1 ==
					(A:OUTER MARKER, enum) 1 == and
					(A:MIDDLE MARKER, enum) 1 == or
					(A:INNER MARKER, enum) 1 == or
					(P:ABSOLUTE TIME, Number) 0.5 % 0.25 &lt; and
					(L:FS_LIGHT_TEST, enum)	1 == or
						if{ 1 (>L:LT_FS_BEACON) }
						els{ 0 (>L:LT_FS_BEACON) }
				</Value>
			</Select>
		</Element>
		<Element Name="TAKEOFF TRIM LIGHT">
			<Select>
				<Value>
					(L:LIGHT_FLICKER, enum) 1 ==
					(A:SIM ON GROUND, enum) 1 == and
					(A:ELEVATOR TRIM INDICATOR, Position) 0 == and
						if{ 1 (>L:LT_FS_TAKEOFF_TRIM, enum) }
						els{ 0 (>L:LT_FS_TAKEOFF_TRIM, enum) }
				</Value>
			</Select>
		</Element>

		<Element Name="GREEN GEAR LIGHTS">
			<Element>
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LG_POS_IND_PWR) 1 == and
						(A:GEAR CENTER POSITION, Percent) 100 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_NGEAR_GREEN, enum) }
							els{ 0 (>L:LT_FS_NGEAR_GREEN, enum) }
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LG_POS_IND_PWR) 1 == and
						(A:GEAR RIGHT POSITION, Percent) 100 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_RGEAR_GREEN, enum) }
							els{ 0 (>L:LT_FS_RGEAR_GREEN, enum) }
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LG_POS_IND_PWR) 1 == and
						(A:GEAR LEFT POSITION, Percent) 100 == and
						(L:FS_LIGHT_TEST, enum)	1 == or
							if{ 1 (>L:LT_FS_LGEAR_GREEN, enum) }
							els{ 0 (>L:LT_FS_LGEAR_GREEN, enum) }
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="RED GEAR LIGHTS">
			<Element Name="NGEAR">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LG_POS_IND_PWR) 1 == and
						(A:GEAR CENTER POSITION, Percent) 1 > and
						(A:GEAR CENTER POSITION, Percent) 100 &lt; and
							if{ 1 (>L:LT_FS_NGEAR_RED, enum) }
							els{ 0 (>L:LT_FS_NGEAR_RED, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="RGEAR">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LG_POS_IND_PWR) 1 == and
						(A:GEAR RIGHT POSITION, Percent) 1 > and
						(A:GEAR RIGHT POSITION, Percent) 100 &lt; and
							if{ 1 (>L:LT_FS_RGEAR_RED, enum) }
							els{ 0 (>L:LT_FS_RGEAR_RED, enum) }
					</Value>
				</Select>
			</Element>
			<Element Name="NGEAR">
				<Select>
					<Value>
						(L:LIGHT_FLICKER, enum) 1 ==
						(L:LG_POS_IND_PWR) 1 == and
						(A:GEAR LEFT POSITION, Percent) 1 > and
						(A:GEAR LEFT POSITION, Percent) 100 &lt; and
							if{ 1 (>L:LT_FS_LGEAR_RED, enum) }
							els{ 0 (>L:LT_FS_LGEAR_RED, enum) }
					</Value>
				</Select>
			</Element>
		</Element>

		<Element Name="FLAP LIGHTS">
			<Select>
				<Value>
					(L:GND_FLAPS_GAUGE_PWR, enum)
					(L:LIGHT_FLICKER, enum) 1 == and
					(L:FLAP_PWR) 1 == and
					(A:TRAILING EDGE FLAPS LEFT PERCENT, Percent) 1 > and
					(A:TRAILING EDGE FLAPS LEFT PERCENT, Percent) 100 &lt; and
					(L:FS_LIGHT_TEST, enum)	1 == or
						if{ 1 (>L:LT_FS_FLAP_MID, enum) }
						els{ 0 (>L:LT_FS_FLAP_MID, enum) }

					(L:GND_FLAPS_GAUGE_PWR, enum)
					(L:LIGHT_FLICKER, enum) 1 == and
					(L:FLAP_PWR) 1 == and
					(A:TRAILING EDGE FLAPS LEFT PERCENT, Percent) 100 == and
					(L:FS_LIGHT_TEST, enum)	1 == or
						if{ 1 (>L:LT_FS_FLAP_DN, enum) }
						els{ 0 (>L:LT_FS_FLAP_DN, enum) }
				</Value>
			</Select>
		</Element>
	</Element>
	<Element Name="OWS OVER-G / FACTOR CIRCUIT">
		<Element Name="OWS OVER-G CIRCUIT">
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 40000 &lt;
							if{
								9.0 (>L:OWS_OVER_G_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 40000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 45000 &lt; and
							if{
								8.0 (>L:OWS_OVER_G_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 45000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 50000 &lt; and
							if{
								7.5 (>L:OWS_OVER_G_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 50000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 55000 &lt; and
							if{
								6.5 (>L:OWS_OVER_G_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 55000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 60000 &lt; and
							if{
								6.0 (>L:OWS_OVER_G_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="OWS FACTOR 1 CIRCUIT">
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 40000 &lt;
							if{
								7.65 (>L:OWS_FACTOR_1_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 40000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 45000 &lt; and
							if{
								6.8 (>L:OWS_FACTOR_1_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 45000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 50000 &lt; and
							if{
								6.35 (>L:OWS_FACTOR_1_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 50000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 55000 &lt; and
							if{
								5.5 (>L:OWS_FACTOR_1_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 55000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 60000 &lt; and
							if{
								5.1 (>L:OWS_FACTOR_1_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="OWS FACTOR 2 CIRCUIT">
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 40000 &lt;
							if{
								8.28 (>L:OWS_FACTOR_2_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 40000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 45000 &lt; and
							if{
								7.36 (>L:OWS_FACTOR_2_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 45000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 50000 &lt; and
							if{
								6.9 (>L:OWS_FACTOR_2_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 50000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 55000 &lt; and
							if{
								5.98 (>L:OWS_FACTOR_2_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(A:TOTAL WEIGHT, POUNDS) 55000 &gt;
						(A:TOTAL WEIGHT, POUNDS) 60000 &lt; and
							if{
								5.52 (>L:OWS_FACTOR_2_LIMIT, enum)
							}
					</Value>
				</Select>
			</Element>
		</Element>
	</Element>

	<Element Name="INLET CONTROLER">
 		<Select>
   			<Value>
				(L:L_AIR_INLET_CONT_AC_PWR) 1 ==
				(L:SW1_FS_MISC_L_INLET_RAMP) 1 == and
					if{
						1 (>L:LINLET_ENABLED, enum)
					}
					els{
						0 (>L:LINLET_ENABLED, enum)
						}

				(L:R_AIR_INLET_CONT_AC_PWR) 1 ==
				(L:SW1_FS_MISC_R_INLET_RAMP) 1 == and
					if{
						1 (>L:RINLET_ENABLED, enum)
					}
					els{
						0 (>L:RINLET_ENABLED, enum)
					}

				(L:L_AIR_INLET_CONT_AC_PWR) 1 ==
				(L:SW1_FS_MISC_L_INLET_RAMP, enum) 0 == and
					if{
						1 (>L:L_RAMP_LOCKED, enum)
					}
					els{
						0 (>L:L_RAMP_LOCKED, enum)
					}
				(L:R_AIR_INLET_CONT_AC_PWR) 1 ==
				(L:SW1_FS_MISC_R_INLET_RAMP, enum) 0 == and
					if{
						1 (>L:R_RAMP_LOCKED, enum)
					}
					els{
						0 (>L:R_RAMP_LOCKED, enum)
					}
   			</Value>
 		</Select>
	</Element>
	<Element Name="ANTI SKID CONTROLER">
 		<Select>
   			<Value>
				(L:ARI_SHUTOFF_ANTI-SKID_CONT_PWR) 1 ==
				(L:BK_PULSER_PWR) 1 == and
				(L:SW2_FS_MISC_ANTI_SKID, enum) 2 == and
				(L:SW1_FS_EMER_BRAKE) 0 == and
					if{
						(A:ANTISKID BRAKES ACTIVE, bool) 0 ==
						if{
							(>K:ANTISKID_BRAKES_TOGGLE)
						}
					}
					els{
						(A:ANTISKID BRAKES ACTIVE, bool) 1 ==
						if{
							(>K:ANTISKID_BRAKES_TOGGLE)
						}
					}

					(A:SIM ON GROUND, bool) 1 ==
					(A:AIRSPEED INDICATED, knots) 5 &lt; and
					(A:BRAKE PARKING INDICATOR, bool) 0 == and
					(L:ANTI_SKID_TIME, Seconds) 0 == and
						if{
							(P:LOCAL TIME, Seconds) (>L:ANTI_SKID_TIME, Seconds)
						}

					(A:BRAKE PARKING INDICATOR, bool) 0 ==
					(P:LOCAL TIME, Seconds) (L:ANTI_SKID_TIME, Seconds) - 20 &gt; and
						if{
							1 (>L:ANTI_SKID_DISABLE)
						}

					(A:SIM ON GROUND, bool) 0 ==
					(A:AIRSPEED INDICATED, knots) 5 &gt; or
					(A:BRAKE PARKING INDICATOR, bool) 1 == or
						if{
							0 (>L:ANTI_SKID_DISABLE, bool)
							0 (>L:ANTI_SKID_TIME, Seconds)
						}
   			</Value>
 		</Select>
	</Element>
	<Element Name="BLEED AIR LEAK DET CONTROLER">
		<Select>
			<Value>
				(L:BLEED_AIR_LEAK_DET_AC_PWR) 1 ==
				(L:BLEED_AIR_LEAK_DET_DC_PWR) 1 == and
					if{}
			</Value>
		</Select>
	</Element>
	<Element Name="GEAR">
		<Select>
			<Value>
				(L:LG_PWR) 1 ==
					if{
						(L:NOSE_LDG_WOW_PWR)
						(L:L_MAIN_GEAR_WOW_PWR)
						(L:R_MAIN_GEAR_WOW_PWR)
					}
			</Value>
		</Select>
	</Element>
	<Element Name="FUEL CONT">
		<Element Name="TRANSFER">
			<Select>
				<Value>
<!--				OFF			= 0		OFF
					ALL			= 1		ALL
					LEFT ALL	= 2		LEFT EXT/CONF
					RIGHT ALL	= 3		RIGHT EXT/CONF
					LEFT_AUX	= 4		EXT LEFT
					RIGHT_AUX	= 5		EXT RIGHT
					CENTER		= 6		TANK1
					CENTER2		= 7		RIGHT FEED
					CENTER3		= 8		LEFT FEED
					EXTERNAL1	= 9		EXT CTR
					EXTERNAL2	= 10
					RIGHT_TIP	= 11	RIGHT CFT
					LEFT_TIP	= 12	LEFT CFT
								= 13	XFEED
								= 14	XFEED L2R
								= 15	XFEED R2L
								= 16	BOTH
								= 17	EXT ALL
								= 18	ISOLATE
								= 19	LEFT MAIN
								= 20	RIGHT MAIN  -->
					(A:FUEL TANK LEFT MAIN LEVEL, Percent) 0 ==
						if{
							6 (>K:FUEL_SELECTOR_SET)
						}
					(A:FUEL TANK RIGHT MAIN LEVEL, Percent) 0 ==
						if{
							6 (>K:FUEL_SELECTOR_2_SET)
						}

					(A:FUEL TANK CENTER LEVEL, Percent) 0 ==
						if{
							8 (>K:FUEL_SELECTOR_SET)
							7 (>K:FUEL_SELECTOR_2_SET)
						}

					(A:FUEL TANK CENTER3 LEVEL, Percent) 0 ==
						if{
							1 (>K:FUEL_SELECTOR_SET)
						}
					(A:FUEL TANK CENTER2 LEVEL, Percent) 0 ==
						if{
							1 (>K:FUEL_SELECTOR_2_SET)
						}

					(L:L_WING_XFR_PUMP_PWR) 0 ==
					(A:FUEL TANK SELECTOR:1, enum) 19 == and
						if{
							6 (>K:FUEL_SELECTOR_SET)
						}

					(L:R_WING_XFR_PUMP_PWR) 0 ==
					(A:FUEL TANK SELECTOR:2, enum) 20 == and
						if{
							6 (>K:FUEL_SELECTOR_2_SET)
						}
					
					(L:TANK_XFR_PMP_PWR) 1 ==
						if{
							(>K:CROSS_FEED_OPEN)
						}
						els{
							(>K:CROSS_FEED_OFF)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="CONTROL SWITCHES">
		<!--2 STOP TRANS
			1 NORM
			0 STOP REFUEL -->
			<Element Name="1 1 1">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 1 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 1 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 1 == and
							if{
								(L:EXT_TX) 1 ==
									if{
										12 (>K:FUEL_SELECTOR_SET)
										11 (>K:FUEL_SELECTOR_2_SET)

										(A:FUEL TANK LEFT TIP LEVEL, Percent) 0 ==
											if{
												4 (>K:FUEL_SELECTOR_SET)
											}
										(A:FUEL TANK RIGHT TIP LEVEL, Percent) 0 ==
											if{
												5 (>K:FUEL_SELECTOR_2_SET)
											}
									}
								(L:EXT_TX) 0 ==
									if{
										4 (>K:FUEL_SELECTOR_SET)
										5 (>K:FUEL_SELECTOR_2_SET)

										(A:FUEL TANK LEFT AUX LEVEL, Percent) 0 ==
											if{
												12 (>K:FUEL_SELECTOR_SET)
											}

										(A:FUEL TANK RIGHT AUX LEVEL, Percent) 0 ==
											if{
												11 (>K:FUEL_SELECTOR_2_SET)
											}
									}
								(A:FUEL TANK LEFT TIP LEVEL, Percent) 0 ==
								(A:FUEL TANK LEFT AUX LEVEL, Percent) 0 == and
									if{
										9 (>K:FUEL_SELECTOR_SET)
									}

								(A:FUEL TANK RIGHT TIP LEVEL, Percent) 0 ==
								(A:FUEL TANK RIGHT AUX LEVEL, Percent) 0 == and
									if{
										9 (>K:FUEL_SELECTOR_2_SET)
									}

								(A:FUEL TANK EXTERNAL1 LEVEL, Percent) 0 ==
									if{
										19 (>K:FUEL_SELECTOR_SET)
										20 (>K:FUEL_SELECTOR_2_SET)
									}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="1 1 2">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 1 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 1 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 2 == and
							if{
								9 (>K:FUEL_SELECTOR_SET)
								9 (>K:FUEL_SELECTOR_2_SET)

								(A:FUEL TANK EXTERNAL1 LEVEL, Percent) 0 ==
									if{
										4 (>K:FUEL_SELECTOR_SET)
										5 (>K:FUEL_SELECTOR_2_SET)

										(A:FUEL TANK LEFT AUX LEVEL, Percent) 0 ==
											if{
												19 (>K:FUEL_SELECTOR_SET)
											}

										(A:FUEL TANK RIGHT AUX LEVEL, Percent) 0 ==
											if{
												20 (>K:FUEL_SELECTOR_2_SET)
											}
									}

							}
					</Value>
				</Select>
			</Element>
			<Element Name="2 1 1">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 2 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 1 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 1 == and
							if{
								9 (>K:FUEL_SELECTOR_SET)
								9 (>K:FUEL_SELECTOR_2_SET)

								(A:FUEL TANK EXTERNAL1 LEVEL, Percent) 0 ==
									if{
										12 (>K:FUEL_SELECTOR_SET)
										11 (>K:FUEL_SELECTOR_2_SET)

										(A:FUEL TANK LEFT TIP LEVEL, Percent) 0 ==
											if{
												19 (>K:FUEL_SELECTOR_SET)
											}
										(A:FUEL TANK RIGHT TIP LEVEL, Percent) 0 ==
											if{
												20 (>K:FUEL_SELECTOR_2_SET)
											}
									}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="1 2 1">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 1 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 2 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 1 == and
							if{
								2 (>K:FUEL_SELECTOR_SET)
								3 (>K:FUEL_SELECTOR_2_SET)

								(A:FUEL TANK LEFT AUX LEVEL, Percent) 0 ==
								(A:FUEL TANK LEFT TIP LEVEL, Percent) 0 == and
									if{
										19 (>K:FUEL_SELECTOR_SET)
									}

								(A:FUEL TANK RIGHT AUX LEVEL, Percent) 0 ==
								(A:FUEL TANK RIGHT TIP LEVEL, Percent) 0 == and
									if{
										20 (>K:FUEL_SELECTOR_2_SET)
									}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="2 2 1">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 2 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 2 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 1 == and
							if{
								12 (>K:FUEL_SELECTOR_SET)
								13 (>K:FUEL_SELECTOR_2_SET)

								(A:FUEL TANK LEFT TIP LEVEL, Percent) 0 ==
								if{
									19 (>K:FUEL_SELECTOR_SET)
								}

								(A:FUEL TANK RIGHT TIP LEVEL, Percent) 0 ==
								if{
									20 (>K:FUEL_SELECTOR_2_SET)
								}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="1 2 2">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 1 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 2 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 2 == and
							if{
								4 (>K:FUEL_SELECTOR_SET)
								5 (>K:FUEL_SELECTOR_2_SET)

								(A:FUEL TANK LEFT AUX LEVEL, Percent) 0 ==
								if{
									19 (>K:FUEL_SELECTOR_SET)
								}
								(A:FUEL TANK RIGHT AUX LEVEL, Percent) 0 ==
								if{
									20 (>K:FUEL_SELECTOR_2_SET)
								}
							}

					</Value>
				</Select>
			</Element>
			<Element Name="2 1 2">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 2 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 1 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 2 == and
							if{
								9 (>K:FUEL_SELECTOR_SET)
								9 (>K:FUEL_SELECTOR_2_SET)

								(A:FUEL TANK EXTERNAL1 LEVEL, Percent) 0 ==
								if{
									19 (>K:FUEL_SELECTOR_SET)
									20 (>K:FUEL_SELECTOR_2_SET)
								}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="2 2 2">
				<Select>
					<Value>
						(L:SW2_FS_FUEL_CTRL_WING) 2 ==
						(L:SW2_FS_FUEL_CTRL_CTR) 2 == and
						(L:SW2_FS_FUEL_CTRL_CONF) 2 == and
							if{
								0 (>K:FUEL_SELECTOR_SET)
								0 (>K:FUEL_SELECTOR_2_SET)
							}
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="EXT_TX">
			<Select>
				<Value>
					(L:SW1_FS_FUEL_EXT_TX) 1 ==
					(L:LR_CFT_CTR_XFR_PUMP_PWR) 1 == and
						if{
							(A:FUEL TANK LEFT TIP LEVEL, Percent) 0 &gt;
							(A:FUEL TANK RIGHT TIP LEVEL, Percent) 0 &gt; or
								if{
									1 (>L:EXT_TX)
								}
						}
					(L:SW1_FS_FUEL_EXT_TX) 0 ==
						if{
							(A:FUEL TANK LEFT AUX LEVEL, Percent) 0 &gt;
							(A:FUEL TANK RIGHT AUX LEVEL, Percent) 0 &gt; or
								if{
									0 (>L:EXT_TX)
								}
						}
				</Value>
			</Select>
		</Element>
		<Element Name="DUMP">
			<Select>
				<Value>
				<!-- LCFT RCFT LEXT REXT LWING RWING LFEED RFEED TANK 1 CEXT -->
					(L:SW1_FS_FUEL_DUMP) 1 ==
					(L:FUEL_DUMP_PWR) 1 == and
						if{
							(A:FUEL DUMP SWITCH, bool) 0 ==
								if{
									(>K:FUEL_DUMP_TOGGLE)
								}
						}
						els{
							(A:FUEL DUMP SWITCH, bool) 1 ==
								if{
									(>K:FUEL_DUMP_TOGGLE)
								}
						}

					(L:FUEL_INTERNAL, enum) (L:SETTING BNGO) &lt;
						if{
							0 (>L:SW1_FS_FUEL_DUMP)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="EMER TX">
			<Select>
				<Value>
					(L:SW2_FS_FUEL_EMERG_TX) 0 ==
						if{}
					(L:SW2_FS_FUEL_EMERG_TX) 2 ==
						if{}
				</Value>
			</Select>
		</Element>
		<Element Name="SLIPWAY">
			<Select>
				<Value>
					(L:SW2_FS_FUEL_SLIP) 0 &gt;
					(L:AERIAL_REFUELING_PWR) 1 == and
						if{ 1 (>L:RF_DOOR_OPEN) }
						els{ 0 (>L:RF_DOOR_OPEN) }
				</Value>
			</Select>
		</Element>
	</Element>

	<Element Name="IFF CONTROLER">
		<Select>
			<Value>
				(L:SW2_FS_IFF_MODE, enum) 0 &gt;
				(L:IFF_PWR) 1 ==
					if{
						1 (>L:IFF_MAIN_PWR)
					}
					els{
						0 (>L:IFF_MAIN_PWR)
					}

				(L:IFF_MAIN_PWR) 0 ==
				(L:IFF_MAIN_PWR_INIT) 0 == and
					if{
						0 (>K:XPNDR_SET)
						1 (>L:IFF_MAIN_PWR_INIT)
					}

				(L:IFF_MAIN_PWR) 1 ==
				(L:IFF_MAIN_PWR_INIT) 1 == and
					if{
						0 (>L:IFF_MAIN_PWR_INIT)
					}
			</Value>
		</Select>
	</Element>
	<Element Name="KY-58">
		<Select>
			<Value>
				(L:KY-58_PWR) 1 ==
			</Value>
		</Select>
	</Element>
	<Element Name="BIT">
		<Select>
			<Value>
				(L:ASP_BIT_CONT_PNL_PWR) 1 ==
			</Value>
		</Select>
	</Element>
	<Element Name="ILS/TCN">
		<Element Name="ILS FREQ">
			<Select>
				<Value>
					(L:ILS_INIT) 0 ==
						if{
							1 (>L:ILS_INIT)
							(A:NAV1 ACTIVE FREQUENCY, MHZ) (>L:ILS_FREQ, MHZ)
							(L:ILS_FREQ, MHZ) FLR (>L:ILS_FREQ_100)
							(L:ILS_FREQ, MHZ) (L:ILS_FREQ, MHZ) FLR - (>L:ILS_FREQ_1)
							(L:ILS_FREQ, MHZ) (>L:ILS_FREQ_SLAVE, MHZ)
						}

					(L:ILS_FREQ_100) (L:ILS_FREQ_1) + (>L:ILS_FREQ, MHZ)
					(L:ILS_FREQ, MHZ) 100 * (>L:ILS_FREQ_I, MHZ)

					(L:ILS_FREQ, MHZ) (L:ILS_FREQ_SLAVE, MHZ) - 0 !=
					(L:ILS_PWR) 1 == and
						if{
							(L:ILS_FREQ, MHZ) (>L:ILS_FREQ_SLAVE, MHZ)
							(L:ILS_FREQ, FREQUENCY BCD16) (>K:NAV1_RADIO_SET)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="ILS RADIO VOLUME">
			<Select>
				<Value>
					(L:ILS_PWR) 1 ==
					(L:KNOB_FS_ILS_VOL) 0 &gt; and
					(L:ILSV_CNG) 0 == and
						if{
							1 (>K:RADIO_VOR1_IDENT_SET)
							1 (>L:ILSV_CNG)
						}

					(L:KNOB_FS_ILS_VOL) 0 ==
					(L:ILSV_CNG) 1 == and
						if{
							0 (>K:RADIO_VOR1_IDENT_SET)
							0 (>L:ILSV_CNG)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="TCN FREQ">
			<Select>
				<Value>
				(L:TCN_INIT) 0 ==
						if{
							1 (>L:TCN_INIT)
							(A:NAV2 ACTIVE FREQUENCY, MHZ) S0 112.3 &lt;
								if{ L0 10 * 1063 - INT (>L:TCN_FREQ) }
								els{ L0 10 * 1053 - INT (>L:TCN_FREQ) }

							(A:NAV2 ACTIVE FREQUENCY, MHZ) 100 * 1 / 10 % INT (>L:TCN_XY)

							(L:TCN_XY) 5 ==
								if{
									1 (>L:SW1_FS_TCN_X_Y)
								}

							(L:TCN_FREQ) 10 / FLR (>L:TCN_FREQ_100)
							(L:TCN_FREQ_100) 10 * (>L:TCN_FREQ_100)
							(L:TCN_FREQ) (L:TCN_FREQ_100) - (>L:TCN_FREQ_1)
							(L:VOR_FREQ) (>L:VOR_FREQ_SLAVE, MHZ)
						}

						(L:TCN_FREQ_100) (L:TCN_FREQ_1) + (>L:TCN_FREQ)

						1 126 (L:TCN_FREQ) RNG
							if{
								1 16 (L:TCN_FREQ) RNG
									if{
										(L:TCN_FREQ) 10 / 134.3 + (>L:VOR_FREQ, MHZ)
									}
									els{
										17 59 (L:TCN_FREQ) RNG
											if{
												(L:TCN_FREQ) 10 / 106.3 + (>L:VOR_FREQ, MHZ)
											}
											els{
												60 69 (L:TCN_FREQ) RNG
													if{
														(L:TCN_FREQ) 10 / 127.3 + (>L:VOR_FREQ, MHZ)
													}
													els{
														(L:TCN_FREQ) 10 / 105.3 + (>L:VOR_FREQ, MHZ)
													}
											}
									}
								}
						(L:SW1_FS_TCN_X_Y) 1 ==
							if{
								(L:VOR_FREQ, MHZ) 0.05 + (>L:VOR_FREQ, MHZ)
							}

						(L:TACAN_RCVR_XMTR_PWR) 1 ==
						(L:VOR_FREQ, MHZ) (L:VOR_FREQ_SLAVE, MHZ) - 0 != and
							if{
								(L:VOR_FREQ, MHZ)  100 * NEAR 10000 % D 10 % R 10 / INT D 10 % R 10 / INT D 10 % R 10 / INT 16 * + 16 * + 16 * +  (>K:NAV2_RADIO_SET)
								(L:VOR_FREQ) (>L:VOR_FREQ_SLAVE, MHZ)
							}
				</Value>
			</Select>
		</Element>
		<Element Name="TCN RADIO VOLUME">
			<Select>
				<Value>

					(L:TACAN_RCVR_XMTR_PWR) 1 ==
						if{ 2 (>K:DME_SELECT) }
						els{ 1 (>K:DME_SELECT) }
					(L:TACAN_RCVR_XMTR_PWR) 1 ==
					(L:KNOB_FS_TCN_VOL) 0 &gt; and
					(L:TCNV_CNG) 0 == and
						if{
							  (>K:RADIO_SELECTED_DME_IDENT_ENABLE)
							1 (>K:RADIO_VOR2_IDENT_SET)
							1 (>L:TCNV_CNG)
						}

					(L:KNOB_FS_TCN_VOL) 0 ==
					(L:TCNV_CNG) 1 == and
						if{
							 (>K:RADIO_SELECTED_DME_IDENT_DISABLE)
							0 (>K:RADIO_VOR2_IDENT_SET)
							0 (>L:TCNV_CNG)
						}
				</Value>
			</Select>
		</Element>
	</Element>
	<Element Name="AFCS CONTROLER">
		<Element Name="CAS RDY">
			<Select>
				<Value>
					(L:AFCS_POWER) 1 ==
						if{
							1 (>L:PITCH_RATIO_RDY, enum)
							1 (>L:ROLL_RATIO_RDY, enum)

							(L:SW2_FS_CAS_PITCH) 2 ==
								if{
									1 (>L:CAS_PITCH_RDY, enum)
								}
								els{
									0 (>L:CAS_PITCH_RDY, enum)
								}
							(L:SW2_FS_CAS_ROLL) 2 ==
								if{
									1 (>L:CAS_ROLL_RDY, enum)
								}
								els{
									0 (>L:CAS_ROLL_RDY, enum)
								}
							(L:SW2_FS_CAS_YAW) 2 ==
								if{
									1 (>L:CAS_YAW_RDY, enum)
								}
								els{
									0 (>L:CAS_YAW_RDY, enum)
								}
						}
						els{
							0 (>L:PITCH_RATIO_RDY, enum)
							0 (>L:ROLL_RATIO_RDY, enum)
	
							0 (>L:CAS_YAW_RDY, enum)
							0 (>L:CAS_ROLL_RDY, enum)
							0 (>L:CAS_PITCH_RDY, enum)
						}
				</Value>
			</Select>
		</Element>

		<Element Name="CAS ALT HOLD RDY">
			<Select>
				<Value>
					(L:SW1_FS_CAS_ALT_HOLD, enum) 1 ==
						if{
							1 (>L:CAS_ALT_HOLD_RDY, enum)
						}
						els{
							0 (>L:CAS_ALT_HOLD_RDY, enum)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="CAS ATT HOLD RDY">
			<Select>
				<Value>
					(L:SW1_FS_CAS_ATT_HOLD, enum) 1 ==
						if{
							1 (>L:CAS_ATT_HOLD_RDY, enum)
						}
						els{
							0 (>L:CAS_ATT_HOLD_RDY, enum)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="AFCS MASTER">
			<Select>
				<Value>
				(L:CAS_PITCH_RDY, enum) 1 ==
				(L:CAS_ROLL_RDY, enum) 1 == and
				(L:CAS_YAW_RDY, enum) 1 == and
				(L:AFCS_DC_PWR) 1 == and
				(A:GEAR HANDLE POSITION, bool) 0 == and
					if{
						(>K:AUTOPILOT_ON)
					}

				(L:CAS_PITCH_RDY, enum) 0 ==
				(L:CAS_ROLL_RDY, enum) 0 == or
				(L:CAS_YAW_RDY, enum) 0 == or
				(L:AFCS_DC_PWR) 0 == or
				(A:GEAR HANDLE POSITION, bool) 0 &gt; or
					if{
						(>K:AUTOPILOT_OFF)
					}

				(L:CAS_PITCH_RDY, enum) 1 ==
				(A:SIM ON GROUND, bool) 0 == and
				(A:NAV HAS LOCALIZER:1, bool)
				(A:NAV SIGNAL:1, bool) and
				(A:YOKE X POSITION, Position) 0 == and
				(A:YOKE Y POSITION, Position) 0 == and
					if{
						(L:KNOB_FS_STEER_MODE) 2 ==
						(L:KNOB_FS_STEER_MODE) 3 == or
							if{
								(>K:AP_APR_HOLD_ON)
							}
							els{
								(>K:AP_APR_HOLD_OFF)
							}
					}
					els{
						(>K:AP_APR_HOLD_OFF)
					}
				</Value>
			</Select>
		</Element>
		<Element Name="CAS PITCH">
			<Select>
				<Value>
					(L:CAS_PITCH_RDY, enum) 1 ==
					(L:CAS_ATT_HOLD_RDY, enum) 1 == and
					(A:SIM ON GROUND, bool) 0 == and
					(A:AUTOPILOT APPROACH HOLD, bool) 0 == and
					(A:AUTOPILOT ATTITUDE HOLD, bool) 0 == and
						if{
							(>K:AP_ATT_HOLD_ON)
						}

					(L:CAS_ATT_HOLD_RDY, enum) 0 ==
					(A:AUTOPILOT APPROACH HOLD, bool) 1 == or
					(A:AUTOPILOT ATTITUDE HOLD, bool) 1 == and
						if{
							(>K:AP_ATT_HOLD_OFF)
						}

					(L:CAS_PITCH_RDY, enum) 1 ==
					(L:CAS_ALT_HOLD_RDY, enum) 1 == and
					(L:CAS_ATT_HOLD_RDY, enum) 1 == and
					(A:VERTICAL SPEED, feet PER MINUTE) -4000 &gt; and
					(A:VERTICAL SPEED, feet PER MINUTE) 4000 &lt; and
					(A:SIM ON GROUND, bool) 0 == and
					(A:AUTOPILOT APPROACH HOLD, bool) 0 == and
					(A:AUTOPILOT ALTITUDE LOCK) 0 == and
						if{
							(>K:AP_ALT_HOLD_ON)
							(A:INDICATED ALTITUDE, feet) (>K:AP_ALT_VAR_SET_ENGLISH)
						}

					(L:CAS_ALT_HOLD_RDY, enum) 0 ==
					(A:AUTOPILOT APPROACH HOLD, bool) 1 == or
					(A:AUTOPILOT ALTITUDE HOLD, bool) 1 == and
						if{
							(>K:AP_ALT_HOLD_OFF)
						}

					(A:YOKE Y POSITION, Position) 0 !=
					(L:CAS_PITCH_RDY, enum) 0 == or
					(A:SIM ON GROUND, bool) 1 == or
						if{
							(>K:AP_ALT_HOLD_OFF)
							(>K:AP_ATT_HOLD_OFF)
							0 (>K:AXIS_ELEV_TRIM_SET)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="CAS ROLL">
			<Select>
				<Value>
					(L:CAS_ROLL_RDY, enum) 1 ==
					(A:VERTICAL SPEED, feet PER MINUTE) -4000 &gt; and
					(A:VERTICAL SPEED, feet PER MINUTE) 4000 &lt; and
					(A:SIM ON GROUND, bool) 0 == and
					(A:AUTOPILOT APPROACH HOLD, bool) 0 == and
					(A:AUTOPILOT HEADING LOCK) 0 == and
						if{
							(>K:AP_HDG_HOLD_ON)
							(A:PLANE HEADING DEGREES MAGNETIC,DEGREES) (>K:HEADING_BUG_SET)
						}

					(A:YOKE X POSITION, Position) 0 !=
					(L:CAS_ROLL_RDY, enum) 0 == or
					(A:SIM ON GROUND, bool) 1 == or
						if{
							(>K:AP_HDG_HOLD_OFF)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="CAS YAW">
			<Select>
				<Value>
					(A:RUDDER POSITION, Position) 0 ==
					(L:CAS_YAW_RDY, enum) 1 == and
						if{
							(>K:YAW_DAMPER_ON)
						}

					(A:RUDDER POSITION, Position) 0 !=
					(L:CAS_YAW_RDY, enum) 0 == or
					(A:SIM ON GROUND, bool) 1 == or
						if{
							(>K:YAW_DAMPER_OFF)
						}
				</Value>
			</Select>
		</Element>

		<Element Name="ROLL RATIO CONTROLER">
			<Select>
				<Value>
					(L:AFCS_DC_PWR) 1 ==
					(L:SW1_FS_MISC_ROLL_RATIO) 0 == and
						if{
							1 (>L:ROLL_RATIO_EMERG)
						}
						els{
							0 (>L:ROLL_RATIO_EMERG)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="TAKEOFF TRIM CONTROLER">
			<Select>
				<Value>
				(L:BTN_FS_TAKEOFF_TRIM_EXEC, enum) 1 ==
				(A:SIM ON GROUND, enum) 1 == and
					if{
						0 (>K:AXIS_ELEV_TRIM_SET, enum)
						0 (>L:BTN_FS_TAKEOFF_TRIM_EXEC, enum)
					}
				</Value>
			</Select>
		</Element>
	</Element>
	<Element Name="COMMUNICATIONS">
		<Element Name="R1 CHANNEL SELECTION">
			<Select>
				<Value>
					(L:KNOB_FS_UHF_1_MODE) 2 ==
					(L:SW2_FS_UHF1_MODE) 1 == or
					(L:UHF_RT_1_PWR) 1 == and
						if{ 118.2
							118.1
							126.2
							118.25
							120.1
							122.0
							120.1
							119.5
							122.05
							134.3
							118.0
							122.2
							118.85
							122.5
							118.5
							121.9
							121.8
							121.7
							118.75
							19 (L:KNOB_FS_UHF_1_CHAN) CASE 100 * NEAR 10000 % D 10 % R 10 / INT D 10 % R 10 / INT D 10 % R 10 / INT 16 * + 16 * + 16 * + (&gt; K:COM_RADIO_SET)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="R1 MODE">
			<Select>
				<Value>
					(L:UHF_RT_1_PWR) 1 ==
					(L:MODE_SEL_PWR) 1 == and
						if{
							(L:KNOB_FS_UHF_1_MODE) 0 ==
								if{
									243000 (>L:UHF-1_FREQ, enum)
									7338 (>K:COM_RADIO_SET)
									}

							(L:KNOB_FS_UHF_1_MODE) 1 ==
							(L:KNOB_FS_UHF_1_MODE) 2 == or
								if{
									(A:COM1 ACTIVE FREQUENCY, KHZ) (>L:UHF-1_FREQ, enum)
									0 (>L:UHF_1_INIT)
								}

							(L:KNOB_FS_UHF_1_MODE) 3 ==
							(L:UHF_1_INIT) 0 == and
								if{
									1 (>L:UHF_1_INIT)
									225000 (>L:UHF-1_FREQ, enum)
								}
						}
				</Value>
			</Select>
		</Element>
		<Element Name="R1 COMM VOLUME">
			<Select>
				<Value>
					(L:UHF_RT_1_PWR) 1 ==
					(L:KNOB_FS_UHF_1_VOL) 0 &gt; and
					(L:R1V_INIT) 0 == and
						if{
							1 (>K:COM1_TRANSMIT_SELECT)
							1 (>L:R1V_INIT)
						}

					(L:KNOB_FS_UHF_1_VOL) 0 ==
					(L:R1V_INIT) 1 == and
						if{
							0 (>L:R1V_INIT)
							1 (>K:COM2_TRANSMIT_SELECT)
						}
				</Value>
			</Select>
		</Element>

		<Element Name="R2 CHANNEL SELECTION">
			<Select>
				<Value>
					(L:KNOB_FS_RAD2_MODE) 2 ==
					(L:UHF_RT_2_PWR) 1 == and
						if{ 133.2
							125.5
							123.45
							122.8
							121.1
							121.0
							120.7
							120.5
							119.9
							119.7
							119.5
							119.1
							118.9
							118.7
							118.5
							121.9
							121.8
							121.7
							118.75
							19 (L:KNOB_FS_RAD2_CHAN) CASE 100 * NEAR 10000 % D 10 % R 10 / INT D 10 % R 10 / INT D 10 % R 10 / INT 16 * + 16 * + 16 * + (&gt; K:COM2_RADIO_SET)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="R2 MODE">
			<Select>
				<Value>
					(L:UHF_RT_2_PWR) 1 ==
					(L:MODE_SEL_PWR) 1 == and
						if{
							(L:KNOB_FS_RAD2_MODE) 0 ==
								if{
									243000 (>L:UHF-2_FREQ, enum)
									7338 (>K:COM2_RADIO_SET)
									0x000000 (>L:R2_IND_COL)
									}

							(L:KNOB_FS_RAD2_MODE) 1 ==
							(L:KNOB_FS_RAD2_MODE) 2 == or
								if{
									(L:R2_INT_COL) (>L:R2_IND_COL)
									(A:COM2 ACTIVE FREQUENCY, KHZ) (>L:UHF-2_FREQ, enum)
									0 (>L:UHF_2_INIT)
								}

								(L:KNOB_FS_RAD2_MODE) 3 ==
								(L:UHF_2_INIT) 0 == and
								if{
									(L:R2_INT_COL) (>L:R2_IND_COL)
									1 (>L:UHF_2_INIT)
									225000 (>L:UHF-2_FREQ, enum)
								}
					}
				</Value>
			</Select>
		</Element>
		<Element Name="R2 COMM VOLUME">
			<Select>
				<Value>
					(L:UHF_RT_2_PWR) 1 ==
					(L:SW2_FS_RAD2_TRANS) 2 == and
					(L:R2V_INIT) 0 == and
						if{
							1 (>K:COM_RECEIVE_ALL_SET)
							1 (>L:R2V_INIT)
						}
					(L:SW2_FS_RAD2_TRANS) 2 ! ==
					(L:R2V_INIT) 1 == and
						if{
							0 (>L:R2V_INIT)
							0 (>K:COM_RECEIVE_ALL_SET)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="R2 INTENCITY">
			<Select>
				<Value>
					(L:KNOB_FS_RAD2_INT) 0 ==
						if{
							0x001000 (>L:R2_INT_COL)
						}
					(L:KNOB_FS_RAD2_INT) 1 ==
						if{
							0x002000 (>L:R2_INT_COL)
						}
					(L:KNOB_FS_RAD2_INT) 2 ==
						if{
							0x004000 (>L:R2_INT_COL)
						}
					(L:KNOB_FS_RAD2_INT) 3 ==
						if{
							0x008000 (>L:R2_INT_COL)
						}
					(L:KNOB_FS_RAD2_INT)) 4 ==
						if{
							0x00A000 (>L:R2_INT_COL)
						}
					(L:KNOB_FS_RAD2_INT) 5 ==
						if{
							0x00C000 (>L:R2_INT_COL)
						}
					(L:KNOB_FS_RAD2_INT) 6 ==
						if{
							0x00FF00 (>L:R2_INT_COL)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="ADF VOLUME">
			<Select>
				<Value>
					(L:ADF_PWR) 1 ==
					(L:SW2_FS_VOL_R1_ADF) 2 == and
					(L:R2V_ADF_INIT) 0 == and
						if{
							1 (>K:RADIO_ADF_IDENT_ENABLE)
							1 (>L:R2V_ADF_INIT)
						}
					(L:SW2_FS_VOL_R1_ADF) 2 ! ==
					(L:R2V_ADF_INIT) 1 == and
						if{
							0 (>L:R2V_ADF_INIT)
							0 (>K:RADIO_ADF_IDENT_DISABLE)
						}
				</Value>
			</Select>
		</Element>

		<Element Name="TEWS LAUNCH VOLUME">
			<Select>
				<Value>
					(L:KNOB_FS_VOL_TEWS_LAUNCH) 0 &gt;
					(L:R2V_INIT) 0 == and
						if{
						}
					(L:R2V_INIT) 1 == and
						if{
						}
				</Value>
			</Select>
		</Element>
		<Element Name="TEWS CAUTION VOLUME">
			<Select>
				<Value>
					(L:KNOB_FS_VOL_TEWS_LAUNCH) 0 &gt;
					(L:R2V_INIT) 0 == and
						if{
						}
					(L:R2V_INIT) 1 == and
						if{
						}
				</Value>
			</Select>
		</Element>
		<Element Name="ICS VOLUME">
			<Select>
				<Value>
					(L:KNOB_FS_VOL_ICS) 0 &gt;
					(L:ICS_PWR) 1 == and
					(L:ICS_CONT_PWR) 1 == and
					(L:R2V_INIT) 0 == and
						if{
						}
					(L:R2V_INIT) 1 == and
						if{
						}
				</Value>
			</Select>
		</Element>
		<Element Name="WPN VOLUME">
			<Select>
				<Value>
					(L:KNOB_FS_VOL_WPN) 0 &gt;
					(L:R2V_INIT) 0 == and
						if{
						}
					(L:R2V_INIT) 1 == and
						if{
						}
				</Value>
			</Select>
		</Element>
		<Element Name="R2 VOLUME">
			<Select>
				<Value>
					(L:KNOB_FS_VOL_R2) 0 &gt;
					(L:UHF_RT_2_PWR) 1 == and
					(L:R2V_INIT) 0 == and
						if{
						}
					(L:R2V_INIT) 1 == and
						if{
						}
				</Value>
			</Select>
		</Element>
		<Element Name="JTIDS VOLUME">
			<Select>
				<Value>
					(L:KNOB_FS_VOL_JTIDS) 0 &gt;
					(L:JTIDS_PWR) 1 == and
					(L:R2V_INIT) 0 == and
						if{
						}

					(L:KNOB_FS_VOL_JTIDS) 0 ==
					(L:JTIDS_PWR) 0 == or
					(L:R2V_INIT) 1 == and
						if{
						}
				</Value>
			</Select>
		</Element>
	</Element>

	<Element Name="EMERGENCY BOOST PUMP">
		<Select>
			<Value>			
				(L:SW2_FS_ENG_EMER_GEN, enum) 0 &gt;
				(L:EMER_GEN_EBP_PWR) 1 == and
					if{			
						(L:L_BST_PUMP_ON) 0 ==
						(A:GENERAL ENG FUEL PUMP SWITCH:1, bool) 0 == and
						(L:EBP_L_INIT) 0 == and
							if{
								1 (>L:EMER_BST_ON, bool)
								(>K:TOGGLE_ELECT_FUEL_PUMP1)
								1 (>L:EBP_L_INIT)
							}
							
						(L:R_BST_PUMP_ON) 0 ==
						(A:GENERAL ENG FUEL PUMP SWITCH:2, bool) 0 == and
						(L:EBP_R_INIT) 0 == and
							if{
								1 (>L:EMER_BST_ON, bool)
								(>K:TOGGLE_ELECT_FUEL_PUMP2)
								1 (>L:EBP_R_INIT)
							}

						(L:L_BST_PUMP_ON) 1 ==
						(A:GENERAL ENG FUEL PUMP SWITCH:1, bool) 1 == and
						(L:EBP_L_INIT) 1 == and
							if{
								0 (>L:EMER_BST_ON, bool)
								(>K:TOGGLE_ELECT_FUEL_PUMP1)
								0 (>L:EBP_L_INIT)
							}
						(L:R_BST_PUMP_ON) 1 ==
						(A:GENERAL ENG FUEL PUMP SWITCH:2, bool) 1 == and
						(L:EBP_R_INIT) 1 == and
							if{
								0 (>L:EMER_BST_ON, bool)
								(>K:TOGGLE_ELECT_FUEL_PUMP2)
								0 (>L:EBP_R_INIT)
							}
					}
					els{
						(A:GENERAL ENG FUEL PUMP SWITCH:1, bool) 1 == and
						(L:EBP_L_INIT) 1 == and
							if{
								(>K:TOGGLE_ELECT_FUEL_PUMP1)
								0 (>L:EBP_L_INIT)
							}					
						(A:GENERAL ENG FUEL PUMP SWITCH:2, bool) 1 == and
						(L:EBP_R_INIT) 1 == and
							if{
								(>K:TOGGLE_ELECT_FUEL_PUMP2)
								0 (>L:EBP_R_INIT)
							}
					}
			</Value>
		</Select>
	</Element>
	
	<Element Name="EEC CONTROLER">
 		<Select>
   			<Value>
				(L:ENG_CONT_ESS_BUS_PWR) 1 ==
				(L:SW1_FS_ENG_CONT_L, enum) 1 == and
					if{
						1 (>L:LEEC_ENABLED, enum)
					}
					els{
						0 (>L:LEEC_ENABLED, enum)
					}

				(L:ENG_CONT_ESS_BUS_PWR) 1 ==
				(L:SW1_FS_ENG_CONT_R, enum) 1 == and
					if{
						1 (>L:REEC_ENABLED, enum)
					}
					els{
						0 (>L:REEC_ENABLED, enum)
					}
   			</Value>
 		</Select>
	</Element>
	<Element Name="INTRL NAV SET">
 		<Select>
   			<Value>
				(L:INTRL_NAV_SET_MEAS_UNIT_PWR) 1 ==
				(L:SIGNAL_DATA_RCDR_PWR) 1 == and
					if{
					}
				(L:INTRL_NAV_SET_DSPL_UNIT_PWR) 1 ==
				(L:SIGNAL_DATA_RCDR_PWR) 1 == and
					if{
					}
   			</Value>
 		</Select>
	</Element>

	<Element Name="ECS/TEMP CONTROLER">
		<Element Name="ANTI FOG CONTROLLER">
			<Select>
				<Value>
				(L:ECS_HEAT_EXCANGER_PWR) 1 ==
				(L:SW2_FS_ECS_ANTIFOG) 1 == and
						if{
						}
						els{
						}
				</Value>
			</Select>
		</Element>
		<Element Name="PITOT HEAT CONTROLLER">
			<Select>
				<Value>
					(L:LR_PITOT_MAST_HTR_PWR) 1 ==
					(L:SW1_FS_ECS_PITOT) 1 == and
					(L:L_AOA_PROVE_HTR_PWR) 1 == and
					(L:R_AOA_PROBR_HTR_PWR) 1 == and
					(A:AMBIENT TEMPERATURE, Celsius) 0 &lt; and
						if{
							1 (>K:PITOT_HEAT_SET)
						}
						els{
							0 (>K:PITOT_HEAT_SET)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="WINDSHIELD CONTROLLER">
			<Select>
				<Value>
				(L:WSHLD_ANTI_ICE_PWR) 1 ==
				(L:SW1_FS_ECS_WINDSHIELD) 1 == and
						if{
							(A:STRUCTURAL DEICE SWITCH, bool) 0 ==
							if{
								(>K:TOGGLE_STRUCTURAL_DEICE)
							}
						}
						els{
							(A:STRUCTURAL DEICE SWITCH, bool) 1 ==
							if{
								(>K:TOGGLE_STRUCTURAL_DEICE)
							}
						}
				</Value>
			</Select>
		</Element>
		<Element Name="ENG HEAT CONTROLLER">
			<Select>
				<Value>
				(L:ENG_ANTI_ICE_AC_PWR) 1 ==
				(L:SW2_FS_ECS_ENG) 1 == and
				(A:AMBIENT TEMPERATURE, Celsius) 0 &lt; and
						if{
							(A:ENG ANTI ICE:1, bool) 0 ==
							if{
								(>K:ANTI_ICE_TOGGLE_ENG1)
								(>K:ANTI_ICE_TOGGLE_ENG2)
							}
						}
						els{
							(A:ENG ANTI ICE:1, bool) 1 ==
							if{
								(>K:ANTI_ICE_TOGGLE_ENG1)
								(>K:ANTI_ICE_TOGGLE_ENG2)
							}
						}
				</Value>
			</Select>
		</Element>
		<Element Name="CABIN TEMP CONTROLER">
			<Select>
				<Value>
					(L:ECS_TEMP_CONT_PWR) 1 ==
					(L:ENVIRONMENTAL_CONT_SYS_PWR) 1 == and
					(L:KNOB_FS_AIRCON_SOURCE, enum) 0 != and
					(L:SW2_FS_AIRCON_MODE) 0 != and
						if{
							1 (>L:ECS_MASTER)
						}
						els{
							0 (>L:ECS_MASTER)
						}

					(L:ECS_MASTER) 1 ==
					(L:SW2_FS_AIRCON_MODE) 1 == and
						if{
							1 (>L:SUPPLY_MAN_ON)
						}
						els{
							0 (>L:SUPPLY_MAN_ON)
						}

					(L:ECS_MASTER) 1 ==
					(L:SW2_FS_AIRCON_MODE) 2 == and
					(A:AMBIENT TEMPERATURE, Celsius) 5 &lt; and
						if{
							1 (>L:SUPPLY_AUTO_ON)
						}
						els{
							0 (>L:SUPPLY_AUTO_ON)
						}

					(L:SUPPLY_AUTO_ON, bool) 1 ==
					(L:SUPPLY_MAN_ON, bool) 1 == or
						if{
							1 (>L:SUPPLY_ON)
						}
						els{
							0 (>L:SUPPLY_ON)
							}
				</Value>
			</Select>
		</Element>
		<Element Name="CABIN AIR DUMP">
    		<Select>
      			<Value>
					(L:CBN_AIR_DUMP_SOL_PWR) 0 ==
					(L:CBN_AIR_DUMP_INIT) 0 == and
						if{
							1 (>L:CBN_AIR_DUMP_INIT)
							0 (>K:PRESSURIZATION_PRESSURE_DUMP_SWTICH)
						}
						
					(L:CBN_AIR_DUMP_SOL_PWR) 1 ==
					(L:CBN_AIR_DUMP_INIT) 1 == and
						if{
							1 (>L:CBN_AIR_DUMP_INIT)
						}

      			</Value>
    		</Select>
		</Element>
		<Element Name="TOTAL TEMP HI CAUT">
    		<Select>
      			<Value>
					(L:L_TOTAL_TEMP_SNSR_HTR_PWR) 1 ==
					(L:R_TOTAL_TEMP_PROBE_HTR_PWR) 1 == and
					(A:AMBIENT TEMPERATURE, Celsius) 30 &gt; and
					(A:AIRSPEED MACH, machs) 1.5 &gt; and
					(L:TOT_TEMP, enum) 0 == and
						if{ (P:LOCAL TIME, Seconds) (>L:INLET_OVERHEATED_TIME) 1 (>L:TOT_TEMP, enum) }

					(L:TOT_TEMP, enum) 1 ==
					(P:LOCAL TIME, Seconds) (L:INLET_OVERHEATED_TIME) - 60 &gt; and
						if{ 1 (>L:INLET_OVERHEATED, bool) }

					(L:INLET_OVERHEATED, bool) 1 ==
						if{ (>K:THROTTLE_CUT) }

					(L:TOT_TEMP, enum) 1 ==
					(A:AIRSPEED MACH, machs) 1 &lt; and
						if{ 0 (>L:INLET_OVERHEATED, bool) 0 (>L:INLET_OVERHEATED_TIME) 0 (>L:TOT_TEMP, enum) }

					(A:AMBIENT TEMPERATURE, Celsius) 30 &lt;
					(A:AIRSPEED MACH, machs) 1.5 &lt; or
						if{ 0 (>L:INLET_OVERHEATED_TIME)  0 (>L:TOT_TEMP, enum)}
      			</Value>
    		</Select>
		</Element>
	</Element>

	<Element Name="VTRS CONTROLER">
		<Select>
			<Value>
				(L:KNOB_FS_VTRS_RECORD) 0 ==
				(L:SW2_FS_VTRS_RECORD) 0 == or
				(L:VTRS_CTVS_PWR) 0 == or
					if{
						0 (>L:VTRS_RUN)
					}

				(L:KNOB_FS_VTRS_RECORD) 1 ==
				(L:SW2_FS_VTRS_RECORD) 1 == or
				(L:VTRS_CTVS_PWR) 1 == and
					if{
						0 (>L:VTRS_RUN)
					}
				(L:KNOB_FS_VTRS_RECORD) 2 ==
				(L:SW2_FS_VTRS_RECORD) 2 == or
				(L:VTRS_CTVS_PWR) 1 == and
					if{
						1 (>L:VTRS_RUN)
					}

				(L:VTRS_RUN) 1 ==
				(L:HUD_DC_PWR) 1 == and
				(P:ABSOLUTE TIME, minutes) 1 % 0.996 &gt; and
					if{
						(L:IND_VTRS_REMAIN) + 1 - (>L:IND_VTRS_REMAIN)

						(L:IND_VTRS_REMAIN) 0 ==
							if{
								0 (>L:IND_VTRS_REMAIN)
							}
					}

				(L:KNOB_VTRS_RESET) 1 ==
					if{
						0 (>L:KNOB_VTRS_RESET)
						(L:IND_VTRS_REMAIN) 30 &lt;
						if{
							(L:IND_VTRS_REMAIN) ++ (>L:IND_VTRS_REMAIN)
						}
					}
				(L:KNOB_VTRS_RESET) -1 ==
					if{
						0 (>L:KNOB_VTRS_RESET)
						(L:IND_VTRS_REMAIN) 0 &gt;
						if{
							(L:IND_VTRS_REMAIN) -- (>L:IND_VTRS_REMAIN)
						}
					}
			</Value>
		</Select>
	</Element>

	<Element Name="ARMT">
		<Element Name="ARMT SYS">
			<Select>
				<Value>
					0 (>L:RDR_TRK_MEM_ENABLE)
					0 (>L:RDR_JAM_ENABLE)
					1 (>L:RDR_JAM_CODES)
					0 (>L:RDR_HOLD_ALT_ENABLE)

					(L:RDR_XMTR_LVPS_PWR) 1 ==
						if{
							(L:TO_ALT_DIFF) -100 &lt;
								if{ 0 (>L:RDR_HOLD_ALT_ENABLE) }

							(L:TO_ALT_DIFF) 100 &gt;
								if{ 0 (>L:RDR_HOLD_ALT_ENABLE) }

							(L:TO_ALT_DIFF) -100 &gt;
							(L:TO_ALT_DIFF) 100 &lt; and
								if{ 1 (>L:RDR_HOLD_ALT_ENABLE) }

							(L:LAAJ, nmiles) (A:GROUND VELOCITY, knots) / 3600 * (>L:MRM_TTG)
						}

						(L:MASTER_ARM, bool)
						(L:HUD_MASTER_MODE, enum) 2 == and
							if{
								0 (>L:SW1_RS_CMD_FLARE_JETT, enum)
								3 (>L:KNOB_RS_CMD_MODE, enum)
							}
				</Value>
			</Select>
		</Element>

		<Element Name="GUN RATE">
			<Select>
				<Value>
					(L:GUN_FIRE_RATE, Number) 0 ==
					if{
						4000 (>L:GUN_RATE)
					}
					els{
						6000 (>L:GUN_RATE)
					}
					(L:GUN_PWR) 1 ==
					(L:GUN_TRIG_PWR) 1 == and
						if{
							(L:GUN_RUN) 2 ==
							(L:AO_GUN_AMMO_COUNT, Number) 0 != and
								if{
									(L:AO_GUN_AMMO_COUNT, Number) (L:GUN_RATE) 1000 / - (>L:AO_GUN_AMMO_COUNT, Number)
								}
						}
				</Value>
			</Select>
		</Element>
		<Element Name="WEAPON RELOAD">
			<Select>
				<Value>
<!--				0 EMPTY
				A/A TYPE
					1 AAM-7
					2 AAM-4
					3 AIM-9L
					4 AIM-120C
				A/G TYPE
					5 FUEL
					6 EO		(MK-84 ELECTRO-OPTICAL GUIDED BOMB)
					7 IR		(MK-84 INFRARED GUIDED BOMB)
					8 MK-82		(MK-82 LDGP)
					9 MK-82 R
					10 MK-84	(MK-82 LDGP)
					11 MK-84 L	(MK-84 LASER GUIDED BOMB GBU-10)
					12 CBU-58
					13 CBU-42
					14 CBU-52
					15 CBU-71
					16 MK-20	(ROCKEYE CLUSTER BOMB UNIT)
					17 SUU-20
					18 BLU-27F	(BLU-27 FINNRD FIRE BOMB)
					19 BLU-27U	(BLU-27 FINNRD FIRE BOMB)-->
				(A:BRAKE PARKING INDICATOR, bool) 1 ==
				(A:SIM ON GROUND, enum) 1 == and
					if{
						940 (>L:AO_GUN_AMMO_COUNT, Number)
						120 (>L:CHAFF_COUNT)
						60 (>L:FLARE_COUNT)
						
						(L:AA_STA_2AB_AC_PWR) 1 ==
							if{
								1 (>L:AO_STA-2A_LTYPE, enum)
								1 (>L:AO_STA-2A_LQTY, Number)
								1 (>L:AO_STA-2B_LTYPE, enum)
								1 (>L:AO_STA-2B_LQTY, Number)
							}
						(L:AA_STA_8AB_AC_PWR) 1 ==
							if{
								1 (>L:AO_STA-8B_LTYPE, enum)
								1 (>L:AO_STA-8B_LQTY, Number)
								1 (>L:AO_STA-8A_LTYPE, enum)
								1 (>L:AO_STA-8A_LQTY, Number)
							}
						4 (>L:AO_SRM_QTY, Number)

						(L:AA_STA_3L_7R_CFT_AC_PWR) 1 ==
							if{
								2 (>L:AO_STA-3_LTYPE, enum)
								1 (>L:AO_STA-3_LQTY, Number)
								2 (>L:AO_STA-4_LTYPE, enum)
								1 (>L:AO_STA-4_LQTY, Number)

								2 (>L:AO_STA-6_LTYPE, enum)
								1 (>L:AO_STA-6_LQTY, Number)
								2 (>L:AO_STA-7_LTYPE, enum)
								1 (>L:AO_STA-7_LQTY, Number)
							}
						4 (>L:AO_MRM_QTY, Number)
						(A:FUEL TANK LEFT AUX CAPACITY, GALLONS) 0 &gt;
							if{
								5 (>L:AO_STA-2_LTYPE, enum)
								1 (>L:AO_STA-2_LQTY, enum)
							}
							els{
								0 (>L:AO_STA-2_LTYPE, enum)
								0 (>L:AO_STA-2_LQTY, enum)
							}
						(A:FUEL TANK EXTERNAL1 CAPACITY, GALLONS) 0 &gt;
							if{
								5 (>L:AO_STA-5_LTYPE, enum)
								1 (>L:AO_STA-5_LQTY, enum)
							}
							els{
								0 (>L:AO_STA-5_LTYPE, enum)
								0 (>L:AO_STA-5_LQTY, enum)
							}
						(A:FUEL TANK RIGHT AUX CAPACITY, GALLONS) 0 &gt;
							if{
								5 (>L:AO_STA-8_LTYPE, enum)
								1 (>L:AO_STA-8_LQTY, enum)
							}
							els{
								0 (>L:AO_STA-8_LTYPE, enum)
								0 (>L:AO_STA-8_LQTY, enum)
							}
					}
				</Value>
			</Select>
		</Element>
		<Element Name="WEAPON SELECT">
			<Select>
				<Value>
				(L:AAM_SEL, enum) 0 ==
					if{ 0 (>L:AAM_PRTY, Number) }

				(L:AAM_SEL, enum) 1 ==
				(L:AIM-9_LAUNCHER_PWR) 1 ==
				(L:AIM-9_JETT_PWR) 1 ==
					if{
						(L:AO_STA-2A_LQTY, Number) 1 ==
						(L:AO_STA-2A_LTYPE, enum) 1 == and
						(L:AIM-9_STA_2_AC_PWR) 1 == and
							if{ 1 }
							els{
								(L:AO_STA-8A_LQTY, Number) 1 ==
								(L:AO_STA-8A_LTYPE, enum) 1 == and
								(L:AIM-9_STA_8_AC_PWR) 1 == and
									if{ 2 }
									els{
										(L:AO_STA-2B_LQTY, Number) 1 ==
										(L:AO_STA-2B_LTYPE, enum) 1 == and
										(L:AIM-9_STA_2_AC_PWR) 1 == and
											if{ 3 }
											els{
												(L:AO_STA-8B_LQTY, Number) 1 ==
												(L:AO_STA-8B_LTYPE, enum) 1 == and
												(L:AIM-9_STA_8_AC_PWR) 1 == and
													if{ 4 }
													els{ 0 }
											}
									}
						} (>L:AAM_PRTY, Number)
					}

				(L:AAM_SEL, enum) 2 ==
				(L:AIM-7_EJECT_PWR) 1 == and
				(L:AIM-7_JETT_PWR) 1 == and
					if{
						(L:AO_STA-3_LQTY, Number) 1 ==
						(L:AO_STA-3_LTYPE, enum) 2 == and
						(L:AIM-7_STA_3_4_PWR) 1 == and
							if{ 5 }
							els{
								(L:AO_STA-7_LQTY, Number) 1 ==
								(L:AO_STA-7_LTYPE, enum) 2 == and
								(L:AIM-7_STA_6_7_PWR) 1 == and
									if{ 6 }
									els{
										(L:AO_STA-4_LQTY, Number) 1 ==
										(L:AO_STA-4_LTYPE, enum) 2 == and
										(L:AIM-7_STA_3_4_PWR) 1 == and
											if{ 7 }
											els{
												(L:AO_STA-6_LQTY, Number) 1 ==
												(L:AO_STA-6_LTYPE, enum) 2 == and
												(L:AIM-7_STA_6_7_PWR) 1 == and
													if{ 8 }
													els{ 0 }
										}
									}
							} (>L:AAM_PRTY, Number)
					}
				</Value>
			</Select>
		</Element>
		<Element Name="RMAX/MIN">
			<Select>
				<Value>
					(L:AAM_SEL, enum) 0 ==
						if{
							5 (>L:RDR_RMAX_1)
							3 (>L:RDR_RMAX_2)
							1 (>L:RDR_RMIN)
						}
					(L:AAM_SEL, enum) 1 ==
						if{
							9 (>L:RDR_RMAX_1)
							6 (>L:RDR_RMAX_2)
							2 (>L:RDR_RMIN)
						}
					(L:AAM_SEL, enum) 2 ==
						if{
							20 (>L:RDR_RMAX_1)
							15 (>L:RDR_RMAX_2)
							4 (>L:RDR_RMIN)
						}


						(L:RDR_RMAX_1) (L:RADAR_SCALE, nmiles) / 10 * (>L:RMAX_1)
						(L:RDR_RMAX_2) (L:RADAR_SCALE, nmiles) / 10 * (>L:RMAX_2)
						(L:RDR_RMIN) (L:RADAR_SCALE, nmiles) / 10 *  (>L:RMIN)
				</Value>
			</Select>
		</Element>
		<Element Name="TGT/OWN_ALT">
			<Select>
				<Value>
					(L:RDR_XMTR_LVPS_PWR) 1 ==
						if{
							(L:TGT_ALTITUDE) (A:INDICATED ALTITUDE, feet) - (>L:TO_ALT_DIFF)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="SRM IN RANGE">
			<Select>
				<Value>
					(L:RLST, bool) 1 ==
					(L:AAM_SEL, enum) 1 == and
					(L:LAAJ, nmiles) 2.5 &lt; and
						if{ 1 (>L:SRM_IN_RNG) }
						els{ 0 (>L:SRM_IN_RNG) }
				</Value>
			</Select>
		</Element>
		<Element Name="A/G TARGET">
			<Select>
				<Value>
					(L:GBAT, nmiles) (A:GROUND VELOCITY, knots) / 3600 * (>L:TTGT, Seconds)
				</Value>
			</Select>
		</Element>
		<Element Name="ECM ENABLE">
			<Select>
				<Value>
					(L:KNOB_FS_ECM_MODE1) 1 &gt;
					(L:TEWS-POWER, bool) 1 == and
						if{
							1 (>L:ECM_ENABLED)
						}
						els{
							0 (>L:ECM_ENABLED)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="ICMS">
			<Select>
				<Value>
					(L:SW1_FS_TEWS_ICS) 1 ==
						if{
							(L:SW1_FS_TEWS_SET1) 0 ==
								if{
									8 (>L:ICMS_STATUS_B1)
								}
								els{
									10 (>L:ICMS_STATUS_B1)
								}
							(L:SW1_FS_TEWS_SET2) 0 ==
								if{
									3 (>L:ICMS_STATUS_B2)
								}
								els{
									4 (>L:ICMS_STATUS_B2)
								}
							(L:SW1_FS_TEWS_SET1) 0 ==
								if{
									3 (>L:ICMS_STATUS_B1)
								}
								els{
									4 (>L:ICMS_STATUS_B1)
								}
						}
						els{
							0 (>L:ICMS_STATUS_B1)
							5 (>L:ICMS_STATUS_B2)
							5 (>L:ICMS_STATUS_B3)
						}
				</Value>
			</Select>
		</Element>
	</Element>

	<Element Name="ARAMENTS CONTROL PANEL">
		<Element Name="A/G">
			<Element Name="STA-2">
				<Select>
					<Value>
						(L:ACS_PWR) 1 ==
						(L:BTN_FS_ARAM_STR_SEL_1_EXEC) 1 == and
							if{
								0 (>L:BTN_FS_ARAM_STR_SEL_1_EXEC)

								(L:SELECT_FUEL_TANK_1) 0 ==
									if{ 1 (>L:SELECT_FUEL_TANK_1) }
									els{ 0 (>L:SELECT_FUEL_TANK_1) }
							}
					</Value>
				</Select>
			</Element>
			<Element Name="STA-5">
				<Select>
					<Value>
						(L:ACS_PWR) 1 ==
						(L:BTN_FS_ARAM_STR_SEL_2_EXEC) 1 == and
							if{
								0 (>L:BTN_FS_ARAM_STR_SEL_2_EXEC)

								(L:SELECT_FUEL_TANK_2) 0 ==
									if{ 1 (>L:SELECT_FUEL_TANK_2) }
									els{ 0 (>L:SELECT_FUEL_TANK_2) }
							}
					</Value>
				</Select>
			</Element>
			<Element Name="STA-8">
				<Select>
					<Value>
						(L:ACS_PWR) 1 ==
						(L:BTN_FS_ARAM_STR_SEL_3_EXEC) 1 == and
							if{
								0 (>L:BTN_FS_ARAM_STR_SEL_3_EXEC)

								(L:SELECT_FUEL_TANK_3) 0 ==
									if{ 1 (>L:SELECT_FUEL_TANK_3) }
									els{ 0 (>L:SELECT_FUEL_TANK_3) }
							}
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="INTERVAL">
			<Select>
				<Value>
					(L:ACS_PWR) 1 ==
					(L:SW1_FS_ARAM_INTERVAL) 1 == and
						if{}
				</Value>
			</Select>
		</Element>
		<Element Name="QUANTITY">
			<Select>
				<Value>
					(L:ACS_PWR) 1 ==
					(L:SW1_FS_ARAM_QUANTITY) 1 == and
						if{}
				</Value>
			</Select>
		</Element>
		<Element Name="MON/OPT BTNS">
			<Select>
				<Value>
					(L:ACS_PWR) 1 ==
						if{
							(L:BTN_FS_ARAM_MON_1_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_MON_1_EXEC)
									(>K:VOR1_OBI_INC)
								}
							(L:BTN_FS_ARAM_MON_2_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_MON_2_EXEC)
									(>K:HEADING_BUG_INC)
								}
							(L:BTN_FS_ARAM_MON_3_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_MON_3_EXEC)
									(>K:AP_ALT_VAR_INC)
								}
							(L:BTN_FS_ARAM_MON_4_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_MON_4_EXEC)
									(>K:AP_SPD_VAR_DEC)
								}
							(L:BTN_FS_ARAM_OPT_1_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_OPT_1_EXEC)
									(>K:VOR1_OBI_DEC)
								}
							(L:BTN_FS_ARAM_OPT_2_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_OPT_2_EXEC)
									(>K:HEADING_BUG_DEC)
								}
							(L:BTN_FS_ARAM_OPT_3_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_OPT_3_EXEC)
									(>K:AP_ALT_VAR_DEC)
								}
							(L:BTN_FS_ARAM_OPT_4_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_OPT_4_EXEC)
									(>K:AP_SPD_VAR_DEC)
								}
							(L:BTN_FS_ARAM_OPT_5_EXEC) 1 ==
								if{
									0 (>L:BTN_FS_ARAM_OPT_5_EXEC)
									(A:AUTOPILOT MASTER, enum) 0 ==
										if{
											2 (>L:SW2_FS_CAS_PITCH, enum)
											2 (>L:SW2_FS_CAS_ROLL, enum)
											2 (>L:SW2_FS_CAS_YAW, enum)
										}
										els{
											1 (>L:SW2_FS_CAS_PITCH, enum)
											1 (>L:SW2_FS_CAS_ROLL, enum)
											1 (>L:SW2_FS_CAS_YAW, enum)
										}
								}
						}
				</Value>
			</Select>
		</Element>
	</Element>

	<Element Name="HUD">
		<Element Name="POWER">
    		<Select>
      			<Value>
					(L:HUD_AC_PWR) 1 ==
						if{ 0 (>L:HUD POWER, bool) }
	    				els{ 1 (>L:HUD POWER, bool) }
      			</Value>
    		</Select>
		</Element>
		<Element Name="INIT">
    		<Select>
      			<Value>
					(L:HUD POWER, bool) 1 ==
						if{
							(L:HUD_INIT, bool) 0 ==
							if{
								0 (>L:CAGE SWITCH, enum)
								0 (>L:HUD REJECT MODE, enum)
								0 (>L:ILS SWITCH, enum)
								400 (>L:SETTING LAW, enum)
								2000 (>L:SETTING BNGO, enum)
								1 (>L:HUD_INIT, bool)
							}
						}
      			</Value>
    		</Select>
		</Element>
		<Element Name="iTrafficInfo">
			<Select>
				<Value>
				(L:RDR_LVPS_PWR) 1 ==
					if{
						(L:KNOB_FS_VSD_RDR) 1 + (>C:iTrafficInfo:CURRENTVEHICLE)
						(L:KNOB_FS_VSD_RDR) 1 + (>C:iTrafficInfo:SELECTEDVEHICLE)

						(C:iTrafficInfo:C:PLANE LATITUDE, radians) (>L:HTGT_LAT, radians)
						(C:iTrafficInfo:S:PLANE LONGITUDE, radians) (>L:HTGT_LONG, radians)

						(C:iTrafficInfo:S:VELOCITY WORLD Z, knots) (>L:HTGT_VELW_Z, knots)
						(C:iTrafficInfo:S:VELOCITY WORLD X, knots) (>L:HTGT_VELW_X, knots)
						(C:iTrafficInfo:S:VELOCITY WORLD Y, knots) (>L:HTGT_VELW_Y, knots)

						(C:iTrafficInfo:S:PLANE ALTITUDE, nmiles) (>L:HTGT_ALT, nmiles)
						(C:iTrafficInfo:S:WING SPAN, meterS) (>L:HTGT_WSPAN, meterS)
						(C:iTrafficInfo:S:PLANE ALTITUDE, feet)	(>L:HTGT_ALT_FEET, feet)
						(C:iTrafficInfo:S:PLANE HEADING DEGREES TRUE, radians) (>L:HTGT_HDG, radians)
					}
				</Value>
			</Select>
		</Element>
		<Element Name="SYSTEMS">
			<Element Name="ILS GLIDE SLOPE">
				<Select>
					<Value>
						(L:ILS_PWR) 1 ==
						if{
							(A:NAV1 GLIDE SLOPE ERROR, degrees) -0.25 &lt;
								if{ 1 (>L:HUD_GLDSLP) }

							(A:NAV1 GLIDE SLOPE ERROR, degrees) 0.25 &gt;
								if{ 2 (>L:HUD_GLDSLP) }

							(A:NAV1 GLIDE SLOPE ERROR, degrees) -0.25 &gt;
							(A:NAV1 GLIDE SLOPE ERROR, degrees) 0.25 &lt; and
								if{ 0 (>L:HUD_GLDSLP) }
						}
					</Value>
				</Select>
			</Element>
			<Element Name="MRM">
				<Select>
					<Value>
						 (L:RLST, bool) 1 ==
							if{
							(L:LAAJ, nmiles) (L:RDR_RMIN) &lt;
								if{
									1 (>L:MRM_BREAK)
								}
								els{
									0 (>L:MRM_BREAK)
								}

							(L:LAAJ, nmiles) (L:RDR_RMIN) &gt;
							(L:LAAJ, nmiles) (L:RDR_RMAX_2) &lt; and
								if{
									1 (>L:MRM_SHOT)
								}
							(L:LAAJ, nmiles) (L:RDR_RMAX_1) &lt;
							(L:LAAJ, nmiles) (L:RDR_RMAX_2) &gt; and
								if{
									2 (>L:MRM_SHOT)
								}
							}

							(L:LAAJ, nmiles) (L:RDR_RMIN) &lt;
							(L:LAAJ, nmiles) (L:RDR_RMAX_1) &gt; or
								if{
									0 (>L:MRM_SHOT)
								}
					</Value>
				</Select>
			</Element>
			<Element Name="SRM">
				<Select>
					<Value>
						(L:POINT_X_REF_HUD, degrees) -2 &gt;
						(L:POINT_X_REF_HUD, degrees) 2 &lt; and
						(L:POINT_Y_REF_HUD, degrees) -2 &gt;
						(L:POINT_Y_REF_HUD, degrees) 2 &lt; and
							if{
								1 (>L:SRM_ASE_IN)
							}
							els{
								0 (>L:SRM_ASE_IN)
							}

						(L:LAAJ, nmiles) (L:RDR_RMIN) &gt;
						(L:LAAJ, nmiles) (L:RDR_RMAX_1) &lt; and
						(L:SRM_ASE_IN) 1 == and
							if{
								1 (>L:SRM_SHOT)
							}

						(L:LAAJ, nmiles) (L:RDR_RMIN) &lt;
						(L:LAAJ, nmiles) (L:RDR_RMAX_1) &gt; or
						(L:SRM_ASE_IN) 0 == or
							if{
								0 (>L:SRM_SHOT)
							}
					</Value>
				</Select>
			</Element>
			<Element Name="MASTER MODES">
				<Select>
					<Value>
						(L:BTN_FS_HSI_AG_EXEC) 1 ==
							if{
								0 (>L:BTN_FS_HSI_AG_EXEC)
								(L:HUD_MASTER_MODE, enum) 3 ==
									if{
										2 (>L:HUD_MASTER_MODE, enum)
									}
									els{
										3 (>L:HUD_MASTER_MODE, enum)
									}
							}
						(L:BTN_FS_HSI_NAV_EXEC) 1 ==
							if{
								0 (>L:BTN_FS_HSI_NAV_EXEC, enum)
								(L:HUD_MASTER_MODE, enum) 0 ==
									if{
										2 (>L:HUD_MASTER_MODE, enum)
									}
									els{
										0 (>L:HUD_MASTER_MODE, enum)
									}
							}
						(L:BTN_FS_HSI_VI_EXEC) 1 ==
							if{
								0 (>L:BTN_FS_HSI_VI_EXEC)
								(L:HUD_MASTER_MODE, enum) 1 ==
									if{
										2 (>L:HUD_MASTER_MODE, enum)
									}
									els{
										1 (>L:HUD_MASTER_MODE, enum)
									}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="STEER MODES">
				<Select>
					<Value>
						(L:HSI_MODE, enum) 0 ==
							if{ 0 (>L:HUD_STEER_MODE) }

						(L:HSI_MODE, enum) 2 ==
							if{ 1 (>L:HUD_STEER_MODE) }

						(L:HSI_MODE, enum) 3 ==
							if{ 2 (>L:HUD_STEER_MODE) }

						(L:HSI_MODE, enum) 4 ==
							if{ 3 (>L:HUD_STEER_MODE) }
					</Value>
				</Select>
			</Element>
			<Element Name="BRIGHTNESS">
				<Select>
					<Value>
						(L:SW1_FS_HUD_BRT) 0 ==
							if{
							(L:KNOB_FS_HUD_SYM_BRT) 0 ==
								if{
									0x000000 (>L:HUD_COLOR_SYM)
								}
							(L:KNOB_FS_HUD_SYM_BRT) 1 ==
								if{
									0x002A00 (>L:HUD_COLOR_SYM)
								}
							(L:KNOB_FS_HUD_SYM_BRT) 2 ==
								if{
									0x005400 (>L:HUD_COLOR_SYM)
								}
							(L:KNOB_FS_HUD_SYM_BRT) 3 ==
								if{
									0x007E00 (>L:HUD_COLOR_SYM)
								}
							(L:KNOB_FS_HUD_SYM_BRT) 4 ==
								if{
									0x00A800 (>L:HUD_COLOR_SYM)
								}
							(L:KNOB_FS_HUD_SYM_BRT) 5 ==
								if{
									0x00D200 (>L:HUD_COLOR_SYM)
								}
							(L:KNOB_FS_HUD_SYM_BRT) 6 ==
								if{
									0x00FD00 (>L:HUD_COLOR_SYM)
								}
							}
						(L:SW1_FS_HUD_BRT) 1 ==
							if{
									0x00FD00 (>L:HUD_COLOR_SYM)
								}
					</Value>
				</Select>
			</Element>

			<Element Name="LEAD COMP">
				<Select>
					<Value>
					<!-- ../F-15C_HUD_VC/GUN_F-15C -->
						(L:LEAD_COMP_GYRO_AC_PWR) 1 ==
							if{
								(L:GNDR, bool)
									if{
										(L:Lead_lock_X, degrees) (&gt;L:Lead_X, degrees)
										(L:Lead_lock_Y, degrees) (&gt;L:Lead_Y, degrees)
									}
									els{
										(L:Lead_nolock_X, degrees) (&gt;L:Lead_X, degrees)
										(L:Lead_nolock_Y, degrees) (&gt;L:Lead_Y, degrees)
									}
							}
							els{
								0 (&gt;L:Lead_X, degrees)
								0 (&gt;L:Lead_Y, degrees)
							}
					</Value>
				</Select>
			</Element>
			</Element>
		<Element Name="SWITCH">
			<Element Name="HUD BRT">
				<Select>
					<Value>
						(L:SW1_FS_HUD_BRT) 1 ==
							if{}
					</Value>
				</Select>
			</Element>
			<Element Name="HUD SYM">
				<Element>
					<Select>
						<Value>
							(L:SW1_FS_HUD_SYM) 1 ==
								if{ 1 (>L:HUD REJECT MODE, enum) }
								els{ 0 (>L:HUD REJECT MODE, enum) }
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="HUD RTCL">
				<Element>
					<Select>
						<Value>
							(L:SW2_FS_HUD_RTCL) 2 ==
								if{ 0 (>L:CAGE SWITCH, enum) }

							(L:SW2_FS_HUD_RTCL) 1 ==
							(L:HUD_MASTER_MODE, enum) 0 ! == and
								if{ 1 (>L:CAGE SWITCH, enum) }

							(L:SW2_FS_HUD_RTCL) 0 ==
								if{ 1 (>L:CAGE SWITCH, enum) }
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="HUD CAMERA">
				<Select>
					<Value>
						(L:SW2_FS_HUD_CAMERA) 0 ==
							if{}
					</Value>
				</Select>
			</Element>
			<Element Name="HUD COLOR">
				<Select>
					<Value>
						(L:SW1_FS_HUD_DAY) 1 ==
							if{
								(P:LOCAL TIME, Seconds) 0.5 % 0.25 &gt;
									if{
										(L:HUD_COLOR_SYM) 1 + (>L:HUD_COLOR_SYM)
									}
							}
							els{
								(L:HUD_COLOR_SYM) 255 + (>L:HUD_COLOR_SYM)

								(P:LOCAL TIME, Seconds) 0.5 % 0.25 &gt;
									if{
										(L:HUD_COLOR_SYM) 1 - (>L:HUD_COLOR_SYM)
									}
							}
					</Value>
				</Select>
			</Element>
			<Element Name="HUD RTCL DEPR">
				<Select>
					<Value>
						(L:KNOB_FS_HUD_RTCL_DEPR) (>L:IND_RTCL_DEPR)
					</Value>
				</Select>
			</Element>
		</Element>
	</Element>

	<Element Name="MPCD">
		<Element Name="POWER">
			<Element>
				<Select>
					<Value>
						(L:MPCD_PWR) 1 ==
						(L:KNOB_FS_MPCD_PWR, enum) 0 &gt;
						(L:MPCD-POWER, enum) 0 == and
						(L:MPCD-TIME, Seconds) 0 == and
							if{
								(P:LOCAL TIME, Seconds) (>L:MPCD-TIME, Seconds)
								1 (>L:MPCD-INIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:MPCD_PWR) 0 ==
						(L:MPCD-TIME, Seconds) 0 &gt; and
							if{
								0 (>L:MPCD-TIME, Seconds)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:MPCD_PWR) 1==
						(P:LOCAL TIME, Seconds) (L:MPCD-TIME, Seconds) - 8 &gt; and
							if{
								1 (>L:MPCD-POWER, enum)
								0 (>L:MPCD-TIME, Seconds)
								0 (>L:MPCD-INIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:MPCD_PWR) 0 ==
						(L:KNOB_FS_MPCD_PWR, enum) 0 == or
							if{
								0 (>L:MPCD-POWER, enum)
								0 (>L:MPCD-TIME, Seconds)
								0 (>L:MPCD-INIT, enum)

							}
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="SYSTEMS">
			<Element Name="BRIGHTNESS">
				<Select>
					<Value>
					<!--
					GREEN(00FF00)
					AMBER(407AAA)
					CYAN(FF9900)
					WHITE(FFFFFF) -->
						(L:KNOB_FS_MPCD_PWR) 1 ==
							if{
								0x007E00 (>L:MPCD_COLOR)
								0x003F00 (>L:MPCD_COLOR_DARK)
							}

						(L:KNOB_FS_MPCD_PWR) 2 ==
							if{
								0x00FE00 (>L:MPCD_COLOR)
								0x007E00 (>L:MPCD_COLOR_DARK)
							}
					</Value>
				</Select>
			</Element>
			<Element Name="DTM">
				<Select>
					<Value>
						(L:MPCD_DTM_SAM) 1 ==
							if{ 6 (>L:MPCD_DTM_TRK) }
							els{ 4 (>L:MPCD_DTM_TRK) }
					</Value>
				</Select>
			</Element>
			<Element Name="PACS">
				<Select>
					<Value>
						(L:PACS_AC_PWR) 1 ==
							if{ 1 (>L:PACS_ENABLED) }
							els{ 0 (>L:PACS_ENABLED) }
					</Value>
				</Select>
			</Element>
		</Element>
	</Element>

	<Element Name="VSD">
		<Element Name="POWER">
			<Element>
				<Select>
					<Value>
						(L:VSD_PWR) 1 ==
						(L:KNOB_FS_RDR_PWR) 0 &gt; and
						(L:VSD-POWER, bool) 0 == and
						(L:VSD-TIME, Seconds) 0 == and
							if{
								(P:LOCAL TIME, Seconds) (>L:VSD-TIME, Seconds)
								1 (>L:VSD-INIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:VSD_PWR) 0 ==
						(L:VSD-TIME, Seconds) 0 &gt; and
							if{
								0 (>L:VSD-TIME, Seconds)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:VSD_PWR) 1 ==
						(L:VSD-POWER, bool) 0 == and
						(L:VSD-BIT, enum) 0 == and
						(L:KNOB_FS_RDR_PWR) 1 &gt; and
							if{
								1 (>L:VSD-BIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:VSD_PWR) 1 ==
						(L:KNOB_FS_RDR_PWR) 1 &gt; and
						(P:LOCAL TIME, Seconds) (L:VSD-TIME, Seconds) - 2 &gt; and
							if{
								2 (>L:VSD-BIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:VSD_PWR) 1 ==
						(P:LOCAL TIME, Seconds) (L:VSD-TIME, Seconds) - 5 &gt; and
							if{
								0 (>L:VSD-BIT, enum)
								1 (>L:VSD-POWER, bool)
								0 (>L:VSD-TIME, Seconds)
								0 (>L:VSD-INIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:VSD_PWR) 0 ==
						(L:KNOB_FS_RDR_PWR) 0 == or
							if{
								0 (>L:VSD-TIME, Seconds)
								0 (>L:VSD-BIT, enum)
								0 (>L:VSD-POWER, bool)
								0 (>L:VSD-INIT, enum)

							}
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="iTrafficInfo">
			<Select>
				<Value>
					(L:RDR_LVPS_PWR) 1 ==
						if{
							(L:KNOB_FS_VSD_RDR) 1 + (>C:iTrafficInfo:CURRENTVEHICLE)
							(L:KNOB_FS_VSD_RDR) 1 + (>C:iTrafficInfo:SELECTEDVEHICLE)
							(L:KNOB_FS_VSD_RDR) 1 + (>C:FS9GPS:1:SELECTEDVEHICLE)

							(C:iTrafficInfo:S:AIRSPEED INDICATED, knots) (>L:TGT_AIRSPEED_C)
							(C:iTrafficInfo:S:AIRSPEED MACH, machs) (>L:TGT_AIRSPEED_MACH)

							(C:iTrafficInfo:S:INCIDENCE ALPHA, degrees) (>L:TGT_AOA)

							(C:iTrafficInfo:S:G FORCE, G FORCE) (>L:TGT_G_FORCE)

							(C:iTrafficInfo:S:ATTITUDE INDICATOR PITCH DEGREES, degrees) (>L:TGT_ATT_PITCH)
							(C:iTrafficInfo:S:ATTITUDE INDICATOR BANK DEGREES, degrees) (>L:TGT_ATT_BANK)
							(C:iTrafficInfo:S:TURN COORDINATOR BALL,POSITION) (>L:TGT_ATT_BALL)
							(C:iTrafficInfo:S:DELTA HEADING RATE,RPM) (>L:TGT_ATT_HEADING_RATE)

							(C:iTrafficInfo:S:PLANE HEADING DEGREES GYRO, degrees) (>L:TGT_HDG)

							(C:iTrafficInfo:S:INDICATED ALTITUDE, feet) (>L:TGT_ALTITUDE)
							(C:iTrafficInfo:S:KOHLSMAN SETTING HG,INHG) (>L:TGT_KOHLSMAN)

							(C:iTrafficInfo:S:VERTICAL SPEED, feet PER MINUTE) 100 / (>L:TGT_VSI)

							(C:iTrafficInfo:S:TURB ENG1 N2, Percent) (>L:TGT_LENG_RPM)
							(C:iTrafficInfo:S:TURB ENG2 N2, Percent) (>L:TGT_RENG_RPM)

							(C:iTrafficInfo:S:TURB ENG ITT:1,Celsius) (>L:TGT_LENG_ITT)
							(C:iTrafficInfo:S:TURB ENG ITT:2,Celsius) (>L:TGT_RENG_ITT)

							(C:iTrafficInfo:S:TURB ENG FUEL FLOW PPH:1, Pounds per hour) (>L:TGT_LENG_FF)
							(C:iTrafficInfo:S:TURB ENG FUEL FLOW PPH:1, Pounds per hour) (>L:TGT_RENG_FF)

							(C:iTrafficInfo:S:GENERAL ENG1 THROTTLE LEVER POSITION, Percent)
							(C:iTrafficInfo:S:GENERAL ENG2 THROTTLE LEVER POSITION, Percent)

							(C:iTrafficInfo:S:TURB ENG AFTERBURNER PCT ACTIVE:1, Percent)
							(C:iTrafficInfo:S:TURB ENG AFTERBURNER PCT ACTIVE:2, Percent)

							(C:iTrafficInfo:S:HYDRAULIC PRESSURE:1, PSI) (>L:TGT_LENG_HYD_PRESS)
							(C:iTrafficInfo:S:HYDRAULIC PRESSURE:2, PSI) (>L:TGT_RENG_HYD_PRESS)

							(C:iTrafficInfo:S:GENERAL ENG1 OIL PRESSURE, PSI) (>L:TGT_LENG_OIL_PRESS)
							(C:iTrafficInfo:S:GENERAL ENG2 OIL PRESSURE, PSI) (>L:TGT_RENG_OIL_PRESS)

							(C:iTrafficInfo:S:FUEL TANK CENTER QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK CENTER2 QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK CENTER3 QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK LEFT MAIN QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK RIGHT MAIN QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK LEFT AUX QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK RIGHT AUX QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK LEFT TIP QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK RIGHT TIP QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK EXTARNAL1 QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL TANK EXTARNAL2 QUANTITY, GALLONS)
							(C:iTrafficInfo:S:FUEL WEIGHT PER GALLON, POUNDS)

							(C:iTrafficInfo:S:PRESSURIZATION CABIN ALTITUDE, feet) (>L:TGT_CABINALT)

							(C:iTrafficInfo:CURRENTDISTANCE, nmiles) (>L:RDR_TGT_DIS)
							(C:iTrafficInfo:S:ATC MODEL, STRING) (>L:RDR_TGT_MDL)
							(C:iTrafficInfo:S:COM1 ACTIVE FREQUENCY, MHZ) (>L:RDR_TGT_COM)
							(C:iTrafficInfo:S:NAV1 ACTIVE FREQUENCY, MHZ) (>L:RDR_TGT_NAV)
							(C:iTrafficInfo:S:TRANSPONDER CODE, Number) (>L:RDR_TGT_IFF)
							(C:iTrafficInfo:SELECTEDFLIGHTPLAN) (>L:RDR_TGT_PLN)
						}
				</Value>
			</Select>
		</Element>
		<Element Name="SYSTEMS">
			<Element Name="MODES">
				<Select>
					<Value>
						(L:RDR_INIT) 0 ==
							if{
								1 (>L:RDR_INIT)
								2 (>L:RDR_BAND)
								3 (>L:RDR_CHAN)
							}

						(L:SW1_FS_RDR_MODE_CONTR) 0 ==
							if{
								(L:KNOB_FS_RDR_MODE_SEL) (>L:VSD_MODE)
							}
						(L:SW1_FS_RDR_MODE_CONTR) 1 ==
							if{
								(L:HUD_MASTER_MODE, enum) 0 ==
									if{	1 (>L:VSD_MODE) }

								(L:HUD_MASTER_MODE, enum) 1 ==
									if{	3 (>L:VSD_MODE) }

								(L:HUD_MASTER_MODE, enum) 2 ==
									if{
										(L:AAM_SEL, enum) 0 ==
											if{ 4 (>L:VSD_MODE) }


										(L:AAM_SEL, enum) 1 ==
											if{ 2 (>L:VSD_MODE) }

										(L:AAM_SEL, enum) 2 ==
											if{	4 (>L:VSD_MODE) }
									}
								(L:HUD_MASTER_MODE, enum) 3 ==
									if{	7 (>L:VSD_MODE) }
							}

						(L:VSD_MODE) 1 ==
							if{  1 (>L:VSD_MAP) 6 (>L:VSD_TRACK_MODE) }
							els{ 0 (>L:VSD_MAP) }
						(L:VSD_MODE) 1 &gt; (L:VSD_MODE) 5 &lt; and
							if{  1 (>L:VSD_ATOA) 4 (>L:VSD_TRACK_MODE) }
							els{ 0 (>L:VSD_ATOA) }
						(L:VSD_MODE) 7 ==
							if{  1 (>L:VSD_ATOG) 2 (>L:VSD_TRACK_MODE) }
							els{ 0 (>L:VSD_ATOG) }
					</Value>
				</Select>
			</Element>
			<Element Name="RANGE">
				<Select>
					<Value>
						(P:LOCAL TIME, Seconds) 20 % (>L:VSD_TIME)

						(L:VSD_TIME) 0 &gt;
						(L:VSD_TIME) 10 &lt; and
							if{
								800.00 (>L:VSD_RANGESTATIC, Number)
								16000.00 (>L:TEWS_RANGESTATIC, Number)
							}
						(L:VSD_TIME) 10 &gt;
							if{
								800.01 (>L:VSD_RANGESTATIC, Number)
								16000.01 (>L:TEWS_RANGESTATIC, Number)
							}

						(L:SW1_FS_RDR_MODE_CONTR) 0 ==
							if{ (L:KNOB_FS_RDR_RANGE) (>L:VSD_RNG, enum) }
						(L:SW1_FS_RDR_MODE_CONTR) 1 ==
							if{
								(L:HUD_MASTER_MODE, enum) 0 ==
									if{ 2 (>L:VSD_RNG, enum) }
								(L:HUD_MASTER_MODE, enum) 2 ==
									if{
										(L:AAM_SEL, enum) 0 ==
											if{
												0 (>L:VSD_RNG, enum)
											}
										(L:AAM_SEL, enum) 1 ==
											if{
												(L:RDR_TGT_DIS) 150 &gt;
												(L:TGT_ALTITUDE) 1000 &gt; and
													if{ 4 (>L:VSD_RNG, enum) }

												(L:RDR_TGT_DIS) 70 &lt;
												(L:RDR_TGT_DIS) 35 &gt; and
												(L:TGT_ALTITUDE) 1000 &gt; and
													if{ 3 (>L:VSD_RNG, enum)  }

												(L:RDR_TGT_DIS) 35 &lt;
												(L:RDR_TGT_DIS) 15 &gt; and
												(L:TGT_ALTITUDE) 1000 &gt; and
													if{ 2 (>L:VSD_RNG, enum)  }

												(L:RDR_TGT_DIS) 15 &lt;
												(L:RDR_TGT_DIS) 8 &gt; and
												(L:TGT_ALTITUDE) 1000 &gt; and
													if{ 1 (>L:VSD_RNG, enum)  }

												(L:RDR_TGT_DIS) 8 &lt;
												(L:TGT_ALTITUDE) 1000 &gt; and
													if{ 0 (>L:VSD_RNG, enum)  }
											}
										(L:AAM_SEL, enum) 2 ==
											if{
												2 (>L:VSD_RNG, enum)
											}
									}
							}
						(L:VSD_RNG, enum) 0 ==
							if{ 10 (>L:VSD_RANGEFACTOR, Number) }
						(L:VSD_RNG, enum) 1 ==
							if{ 20 (>L:VSD_RANGEFACTOR, Number) }
						(L:VSD_RNG, enum) 2 ==
							if{ 40 (>L:VSD_RANGEFACTOR, Number) }
						(L:VSD_RNG, enum) 3 ==
							if{ 80 (>L:VSD_RANGEFACTOR, Number) }
						(L:VSD_RNG, enum) 4 ==
							if{ 160 (>L:VSD_RANGEFACTOR, Number) }

						(L:VSD_RANGEFACTOR, Number) (>L:RADAR_SCALE, nmiles)
					</Value>
				</Select>
			</Element>
			<Element Name="SCAN">
				<Select>
					<Value>
						(L:RDR_CONT_LVPS_AC_PWR) 1 ==
						if{
							(L:SW1_FS_RDR_MODE_CONTR) 0 ==
								if{
									(L:KNOB_FS_RDR_EL_SCAN) (>L:VSD_EL_SCAN)
									(L:KNOB_FS_RDR_AZ_SCAN)	(>L:VSD_AZ_SCAN)
								}
								els{
									(L:AAM_SEL, enum) 0 ==
										if{
											4 (>L:VSD_EL_SCAN)
											2 (>L:VSD_AZ_SCAN)
										}
									(L:AAM_SEL, enum) 1 ==
										if{
											3 (>L:VSD_EL_SCAN)
											1 (>L:VSD_AZ_SCAN)
										}
									(L:AAM_SEL, enum) 2 ==
										if{
											3 (>L:VSD_EL_SCAN)
											1 (>L:VSD_AZ_SCAN)
										}
								}
						(L:VSD_MODE) 1 ==
							if{
								(A:PLANE PITCH DEGREES, degrees) /-/ (>L:VSD_EL_SCAN)
								(A:PLANE BANK DEGREES, degrees) /-/ (>L:VSD_AZ_SCAN)
							}

							(L:VSD_MODE) 2 ==
							(L:VSD_MODE) 4 == or
							if{
								110 70 50 30 20 5 (L:VSD_EL_SCAN) CASE (>L:EL_SCAN)
								2 4 6 8 10 5 (L:VSD_EL_SCAN) CASE (>L:EL_SCAN_TIME)

								200 100 50 3 (L:VSD_AZ_SCAN) CASE (>L:AZ_SCAN)
								2 4 8 3 (L:VSD_AZ_SCAN) CASE (>L:AZ_SCAN_TIME)

								(P:LOCAL TIME, Seconds) (L:EL_SCAN_TIME) * 4 % 2 - ABS + 1 - (L:EL_SCAN) * 10 / INT 10 * (>L:VSD_EL_SCAN)
								(P:LOCAL TIME, Seconds) (L:AZ_SCAN_TIME) * 4 % 2 - ABS + 1 - (L:AZ_SCAN) * (>L:VSD_AZ_SCAN)
								(P:LOCAL TIME, Seconds) 4 % (>L:PX_TIME)
							}
							(L:VSD_MODE) 3 ==
							if{
								(L:RDR_TGT_DIS) 2 * (>L:VSD_EL_SCAN)
								(L:TGT_HDG) (A:PLANE HEADING DEGREES GYRO, radians) - (>L:VSD_AZ_SCAN)
							}
						}
					</Value>
				</Select>
			</Element>
			<Element Name="BRIGHTNESS">
				<Select>
					<Value>
						(L:KNOB_FS_VSD_BRT) 1 ==
							if{
								0x00FE00 (>L:VSD_COLOR)
								0x007E00 (>L:VSD_COLOR_DARK)
								0xFE0000 (>L:VSD_COLOR_R)
								0x0000FE (>L:VSD_COLOR_B)

								(L:KNOB_FS_VSD_SYM) 0 ==
									if{
										0x001000 (>L:VSD_COLOR_SYM)
										0x000800 (>L:VSD_COLOR_SYM_DARK)
									}
								(L:KNOB_FS_VSD_SYM) 1 ==
									if{
										0x002000 (>L:VSD_COLOR_SYM)
										0x001000 (>L:VSD_COLOR_SYM_DARK)
									}
								(L:KNOB_FS_VSD_SYM) 2 ==
									if{
										0x004000 (>L:VSD_COLOR_SYM)
										0x002000 (>L:VSD_COLOR_SYM_DARK)
									}
								(L:KNOB_FS_VSD_SYM) 3 ==
									if{
										0x008000 (>L:VSD_COLOR_SYM)
										0x004000 (>L:VSD_COLOR_SYM_DARK)
									}
								(L:KNOB_FS_VSD_SYM) 4 ==
									if{
										0x00A000 (>L:VSD_COLOR_SYM)
										0x005000 (>L:VSD_COLOR_SYM_DARK)
									}
								(L:KNOB_FS_VSD_SYM) 5 ==
									if{
										0x00C000 (>L:VSD_COLOR_SYM)
										0x006000 (>L:VSD_COLOR_SYM_DARK)
									}
								(L:KNOB_FS_VSD_SYM) 6 ==
									if{
										0x00FE00 (>L:VSD_COLOR_SYM)
										0x007E00 (>L:VSD_COLOR_SYM_DARK)
									}
							}

							(P:LOCAL TIME, hours) 5 &lt;
							(P:LOCAL TIME, hours) 16 &gt; or
							(L:SW1_FS_VSD_CNT) 0 == and
							if{
								(L:VSD_COLOR) 2 / (>L:VSD_COLOR)
								(L:VSD_COLOR_DARK) 2 / (>L:VSD_COLOR_DARK)
								(L:VSD_COLOR_R) 2 / (>L:VSD_COLOR_R)
								(L:VSD_COLOR_B) 2 / (>L:VSD_COLOR_B)
								(L:VSD_COLOR_SYM) 2 / (>L:VSD_COLOR_SYM)
								(L:VSD_COLOR_SYM_DARK) 2 / (>L:VSD_COLOR_SYM_DARK)
							}
					</Value>
				</Select>
			</Element>
			<Element Name="VSD_RANGE">
				<Select>
					<Value>
						(L:SW1_FS_RDR_MODE_CONTR) 0 == if{
							(L:KNOB_FS_RDR_RANGE) 0 ==
								if{ 10 (>L:VSD_RANGE, Number) }
							(L:KNOB_FS_RDR_RANGE) 1 ==
								if{ 20 (>L:VSD_RANGE, Number) }
							(L:KNOB_FS_RDR_RANGE) 2 ==
								if{ 40 (>L:VSD_RANGE, Number) }
							(L:KNOB_FS_RDR_RANGE) 3 ==
								if{ 80 (>L:VSD_RANGE, Number) }
							(L:KNOB_FS_RDR_RANGE) 4 ==
								if{ 160 (>L:VSD_RANGE, Number) }
						}
						(L:SW1_FS_RDR_MODE_CONTR) 1 == if{
							(L:VSD_AUTO_RANGE, enum) 10 ==
								if{ 10 (>L:VSD_RANGE, Number) }
							(L:VSD_AUTO_RANGE, enum) 20 ==
								if{ 20 (>L:VSD_RANGE, Number) }
							(L:VSD_AUTO_RANGE, enum) 40 ==
								if{ 40 (>L:VSD_RANGE, Number) }
							(L:VSD_AUTO_RANGE, enum) 80 ==
								if{ 80 (>L:VSD_RANGE, Number) }
							(L:VSD_AUTO_RANGE, enum) 160 ==
								if{ 160 (>L:VSD_RANGE, Number) }
						}
					</Value>
				</Select>
			</Element>
			<Element Name="AAM MODE">
				<Select>
					<Value>
						(L:HUD_MASTER_MODE, enum) 0 ==
							if{
								0 (>L:VSD_AAM)
								0 (>L:VSD_AA_GUN)
							}

						(L:HUD_MASTER_MODE, enum) 2 ==
						(L:AAM_SEL, enum) 0 == and
							if{
								0 (>L:VSD_AAM)
								0 (>L:VSD_AA_BREAK)
							}
						(L:AAM_SEL, enum) 1 ==
						(L:RDR_TGT_DIS) 2 &lt; and
							if{  1 (>L:VSD_AA_BREAK) }
							els{ 0 (>L:VSD_AA_BREAK) }


						(L:AAM_SEL, enum) 1 ==
						(L:VSD_AA_BREAK) 0 == and
							if{
								1 (>L:VSD_AA_SRM)
							}
							els{
								0 (>L:VSD_AA_SRM)
							}

						(L:AAM_SEL, enum) 2 ==
						(L:VSD_AA_BREAK) 0 == and
							if{
								1 (>L:VSD_AA_MRM)
							}
							els{
								0 (>L:VSD_AA_MRM)
							}
					</Value>
				</Select>
			</Element>
		</Element>
	</Element>

	<Element Name="TEWS">
		<Element Name="POWER">
			<Element>
				<Select>
					<Value>
						(L:TEWS_SYS_PWR) 1 ==
						(L:TEWS-TIME, Seconds) 0 == and
							if{
								(P:LOCAL TIME, Seconds) (>L:TEWS-TIME, Seconds)
								1 (>L:TEWS-INIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:TEWS_SYS_PWR) 0 == 
						(L:TEWS-TIME, Seconds) 0 &gt; and
							if{
								0 (>L:TEWS-TIME, Seconds)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:TEWS_SYS_PWR) 1 ==
						(P:LOCAL TIME, Seconds) (L:TEWS-TIME, Seconds) - 6 &gt; and
						(L:TEWS-INIT, enum) 1 == and
							}
							if{
								1 (>L:TEWS-POWER, bool)
								0 (>L:TEWS-TIME, Seconds)
								0 (>L:TEWS-INIT, enum)
							}
					</Value>
				</Select>
			</Element>
			<Element>
				<Select>
					<Value>
						(L:TEWS_SYS_PWR) 0 ==
							if{
								0 (>L:TEWS-TIME, Seconds)
								0 (>L:TEWS-POWER, bool)
								0 (>L:TEWS-INIT, enum)
							}
					</Value>
				</Select>
			</Element>
		</Element>
		<Element Name="SYSTEMS">
			<Element Name="RANGE CHANGE">
				<Select>
					<Value>
						(P:LOCAL TIME, Seconds) 1 % (>L:TEWS_TIME)

						(L:TEWS_TIME) 0 &gt;
						(L:TEWS_TIME) 0.5 &lt; and
							if{
								1 (>L:TEWS_RANGESTATIC, Number)
							}
						(L:TEWS_TIME) 0.5 &gt;
							if{
								1.001 (>L:TEWS_RANGESTATIC, Number)
							}
					</Value>
				</Select>
			</Element>
			<Element Name="ECM">
				<Element>
					<Select>
						<Value>
							(L:ECM_ENABLED) 1 ==
							(L:TEWS_ECM_TIME, Seconds) 0 == and
								if{
									(P:LOCAL TIME, Seconds) (>L:TEWS_ECM_TIME, Seconds)
									1 (>L:TEWS_ECM_INIT, enum)
						</Value>
					</Select>
				</Element>
				<Element>
					<Select>
						<Value>
							(L:ECM_ENABLED) 0 ==
							(L:TEWS_ECM_TIME, Seconds) 0 &gt; and
								if{
									0 (>L:TEWS_ECM_TIME, Seconds)
								}
						</Value>
					</Select>
				</Element>
				<Element>
					<Select>
						<Value>
							(L:ECM_ENABLED) 1 ==
							(P:LOCAL TIME, Seconds) (L:TEWS_ECM_TIME, Seconds) - 10 &gt; and
								if{
									1 (>L:TEWS_ECM_POWER)
									0 (>L:TEWS_ECM_TIME, Seconds)
									0 (>L:TEWS_ECM_INIT)
								}
						</Value>
					</Select>
				</Element>
				<Element>
					<Select>
						<Value>
							(L:ECM_ENABLED) 0 ==
								if{
									0 (>L:TEWS_ECM_POWER)
									0 (>L:TEWS_ECM_TIME, Seconds)
									0 (>L:TEWS_ECM_INIT)
								}
						</Value>
					</Select>
				</Element>
			</Element>
			<Element Name="BRIGHTNESS">
				<Select>
					<Value>
						(L:KNOB_FS_TEWS_INT) 0 ==
							if{
								0x001000 (>L:TEWS_COLOR_SYM)
								0x000800 (>L:TEWS_COLOR_SYM_DARK)
							}
						(L:KNOB_FS_TEWS_INT) 1 ==
							if{
								0x002000 (>L:TEWS_COLOR_SYM)
								0x001000 (>L:TEWS_COLOR_SYM_DARK)
							}
						(L:KNOB_FS_TEWS_INT) 2 ==
							if{
								0x004000 (>L:TEWS_COLOR_SYM)
								0x002000 (>L:TEWS_COLOR_SYM_DARK)
							}
						(L:KNOB_FS_TEWS_INT) 3 ==
							if{
								0x008000 (>L:TEWS_COLOR_SYM)
								0x004000 (>L:TEWS_COLOR_SYM_DARK)
							}
						(L:KNOB_FS_TEWS_INT) 4 ==
							if{
								0x00A000 (>L:TEWS_COLOR_SYM)
								0x005000 (>L:TEWS_COLOR_SYM_DARK)
							}
						(L:KNOB_FS_TEWS_INT) 5 ==
							if{
								0x00C000 (>L:TEWS_COLOR_SYM)
								0x006000 (>L:TEWS_COLOR_SYM_DARK)
							}
						(L:KNOB_FS_TEWS_INT) 6 ==
							if{
								0x00FF00 (>L:TEWS_COLOR_SYM)
								0x007F00 (>L:TEWS_COLOR_SYM_DARK)
							}
					</Value>
				</Select>
			</Element>
		</Element>
	</Element>

</Gauge>